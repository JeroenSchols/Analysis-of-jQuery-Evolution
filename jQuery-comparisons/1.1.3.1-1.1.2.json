[{"id":"77ef469a2f57579fd70eb794b38388472b56717f","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[510,611],"code":"test(\"before(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(4);\n\tvar expected = 'This is a normal link: bugaYahoo';\n\t$('#yahoo').before('<b>buga</b>');\n\tok( expected == $('#en').text(), 'Insert String before' );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:Yahoo\";\n\t$('#yahoo').before(document.getElementById('first'));\n\tok( expected == $('#en').text(), \"Insert element before\" );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\t$('#yahoo').before([document.getElementById('first'), document.getElementById('mark')]);\n\tok( expected == $('#en').text(), \"Insert array of elements before\" );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\t$('#yahoo').before($(\"#first, #mark\"));\n\tok( expected == $('#en').text(), \"Insert jQuery before\" );\n});\n\ntest(\"insertBefore(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(4);\n\tvar expected = 'This is a normal link: bugaYahoo';\n\t$('<b>buga</b>').insertBefore('#yahoo');\n\tok( expected == $('#en').text(), 'Insert String before' );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:Yahoo\";\n\t$(document.getElementById('first')).insertBefore('#yahoo');\n\tok( expected == $('#en').text(), \"Insert element before\" );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\t$([document.getElementById('first'), document.getElementById('mark')]).insertBefore('#yahoo');\n\tok( expected == $('#en').text(), \"Insert array of elements before\" );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\t$(\"#first, #mark\").insertBefore('#yahoo');\n\tok( expected == $('#en').text(), \"Insert jQuery before\" );\n});\n\ntest(\"after(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(4);\n\tvar expected = 'This is a normal link: Yahoobuga';\n\t$('#yahoo').after('<b>buga</b>');\n\tok( expected == $('#en').text(), 'Insert String after' );\n\t\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:\";\n\t$('#yahoo').after(document.getElementById('first'));\n\tok( expected == $('#en').text(), \"Insert element after\" );\n\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\n\t$('#yahoo').after([document.getElementById('first'), document.getElementById('mark')]);\n\tok( expected == $('#en').text(), \"Insert array of elements after\" );\n\t\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\n\t$('#yahoo').after($(\"#first, #mark\"));\n\tok( expected == $('#en').text(), \"Insert jQuery after\" );\n});\n\ntest(\"insertAfter(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(4);\n\tvar expected = 'This is a normal link: Yahoobuga';\n\t$('<b>buga</b>').insertAfter('#yahoo');\n\tok( expected == $('#en').text(), 'Insert String after' );\n\t\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:\";\n\t$(document.getElementById('first')).insertAfter('#yahoo');\n\tok( expected == $('#en').text(), \"Insert element after\" );\n\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\n\t$([document.getElementById('mark'), document.getElementById('first')]).insertAfter('#yahoo');\n\tok( expected == $('#en').text(), \"Insert array of elements after\" );\n\t\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\n\t$(\"#mark, #first\").insertAfter('#yahoo');\n\tok( expected == $('#en').text(), \"Insert jQuery after\" );\n});\n\ntest(\"end()\", function() {\n\texpect(3);\n\tok( 'Yahoo' == $('#yahoo').parent().end().text(), 'Check for end' );\n\tok( $('#yahoo').end(), 'Check for end with nothing to end' );\n\t\n\tvar x = $('#yahoo');\n\tx.parent();\n\tok( 'Yahoo' == $('#yahoo').text(), 'Check for non-destructive behaviour' );\n});\n\ntest(\"find(String)\", function() {\n\texpect(1);"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[321,421],"code":"test(\"before(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(4);\r\n\tvar expected = 'This is a normal link: bugaYahoo';\r\n\t$('#yahoo').before('<b>buga</b>');\r\n\tok( expected == $('#en').text(), 'Insert String before' );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:Yahoo\";\r\n\t$('#yahoo').before(document.getElementById('first'));\r\n\tok( expected == $('#en').text(), \"Insert element before\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\r\n\t$('#yahoo').before([document.getElementById('first'), document.getElementById('mark')]);\r\n\tok( expected == $('#en').text(), \"Insert array of elements before\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\r\n\t$('#yahoo').before($(\"#first, #mark\"));\r\n\tok( expected == $('#en').text(), \"Insert jQuery before\" );\r\n});\r\n\r\ntest(\"insertBefore(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(4);\r\n\tvar expected = 'This is a normal link: bugaYahoo';\r\n\t$('<b>buga</b>').insertBefore('#yahoo');\r\n\tok( expected == $('#en').text(), 'Insert String before' );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:Yahoo\";\r\n\t$(document.getElementById('first')).insertBefore('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert element before\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\r\n\t$([document.getElementById('first'), document.getElementById('mark')]).insertBefore('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert array of elements before\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\r\n\t$(\"#first, #mark\").insertBefore('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert jQuery before\" );\r\n});\r\n\r\ntest(\"after(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(4);\r\n\tvar expected = 'This is a normal link: Yahoobuga';\r\n\t$('#yahoo').after('<b>buga</b>');\r\n\tok( expected == $('#en').text(), 'Insert String after' );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:\";\r\n\t$('#yahoo').after(document.getElementById('first'));\r\n\tok( expected == $('#en').text(), \"Insert element after\" );\r\n\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\r\n\t$('#yahoo').after([document.getElementById('first'), document.getElementById('mark')]);\r\n\tok( expected == $('#en').text(), \"Insert array of elements after\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\r\n\t$('#yahoo').after($(\"#first, #mark\"));\r\n\tok( expected == $('#en').text(), \"Insert jQuery after\" );\r\n});\r\n\r\ntest(\"insertAfter(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(4);\r\n\tvar expected = 'This is a normal link: Yahoobuga';\r\n\t$('<b>buga</b>').insertAfter('#yahoo');\r\n\tok( expected == $('#en').text(), 'Insert String after' );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:\";\r\n\t$(document.getElementById('first')).insertAfter('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert element after\" );\r\n\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\r\n\t$([document.getElementById('mark'), document.getElementById('first')]).insertAfter('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert array of elements after\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\r\n\t$(\"#mark, #first\").insertAfter('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert jQuery after\" );\r\n});\r\n\r\ntest(\"end()\", function() {\r\n\texpect(3);\r\n\tok( 'Yahoo' == $('#yahoo').parent().end().text(), 'Check for end' );\r\n\tok( $('#yahoo').end(), 'Check for end with nothing to end' );\r\n\t\r\n\tvar x = $('#yahoo');\r\n\tx.parent();\r\n\tok( 'Yahoo' == $('#yahoo').text(), 'Check for non-destructive behaviour' );\r\n});\r\n\r\ntest(\"find(String)\", function() {\r\n\tok( 'Yahoo' == $('#foo').find('.blogTest').text(), 'Check for find' );\r"}]},
{"id":"77ef469a2f57579fd70eb794b38388472b56717f","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[510,611],"code":"test(\"before(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(4);\n\tvar expected = 'This is a normal link: bugaYahoo';\n\t$('#yahoo').before('<b>buga</b>');\n\tok( expected == $('#en').text(), 'Insert String before' );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:Yahoo\";\n\t$('#yahoo').before(document.getElementById('first'));\n\tok( expected == $('#en').text(), \"Insert element before\" );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\t$('#yahoo').before([document.getElementById('first'), document.getElementById('mark')]);\n\tok( expected == $('#en').text(), \"Insert array of elements before\" );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\t$('#yahoo').before($(\"#first, #mark\"));\n\tok( expected == $('#en').text(), \"Insert jQuery before\" );\n});\n\ntest(\"insertBefore(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(4);\n\tvar expected = 'This is a normal link: bugaYahoo';\n\t$('<b>buga</b>').insertBefore('#yahoo');\n\tok( expected == $('#en').text(), 'Insert String before' );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:Yahoo\";\n\t$(document.getElementById('first')).insertBefore('#yahoo');\n\tok( expected == $('#en').text(), \"Insert element before\" );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\t$([document.getElementById('first'), document.getElementById('mark')]).insertBefore('#yahoo');\n\tok( expected == $('#en').text(), \"Insert array of elements before\" );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\t$(\"#first, #mark\").insertBefore('#yahoo');\n\tok( expected == $('#en').text(), \"Insert jQuery before\" );\n});\n\ntest(\"after(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(4);\n\tvar expected = 'This is a normal link: Yahoobuga';\n\t$('#yahoo').after('<b>buga</b>');\n\tok( expected == $('#en').text(), 'Insert String after' );\n\t\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:\";\n\t$('#yahoo').after(document.getElementById('first'));\n\tok( expected == $('#en').text(), \"Insert element after\" );\n\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\n\t$('#yahoo').after([document.getElementById('first'), document.getElementById('mark')]);\n\tok( expected == $('#en').text(), \"Insert array of elements after\" );\n\t\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\n\t$('#yahoo').after($(\"#first, #mark\"));\n\tok( expected == $('#en').text(), \"Insert jQuery after\" );\n});\n\ntest(\"insertAfter(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(4);\n\tvar expected = 'This is a normal link: Yahoobuga';\n\t$('<b>buga</b>').insertAfter('#yahoo');\n\tok( expected == $('#en').text(), 'Insert String after' );\n\t\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:\";\n\t$(document.getElementById('first')).insertAfter('#yahoo');\n\tok( expected == $('#en').text(), \"Insert element after\" );\n\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\n\t$([document.getElementById('mark'), document.getElementById('first')]).insertAfter('#yahoo');\n\tok( expected == $('#en').text(), \"Insert array of elements after\" );\n\t\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\n\t$(\"#mark, #first\").insertAfter('#yahoo');\n\tok( expected == $('#en').text(), \"Insert jQuery after\" );\n});\n\ntest(\"end()\", function() {\n\texpect(3);\n\tok( 'Yahoo' == $('#yahoo').parent().end().text(), 'Check for end' );\n\tok( $('#yahoo').end(), 'Check for end with nothing to end' );\n\t\n\tvar x = $('#yahoo');\n\tx.parent();\n\tok( 'Yahoo' == $('#yahoo').text(), 'Check for non-destructive behaviour' );\n});\n\ntest(\"find(String)\", function() {\n\texpect(1);"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[321,421],"code":"test(\"before(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(4);\r\n\tvar expected = 'This is a normal link: bugaYahoo';\r\n\t$('#yahoo').before('<b>buga</b>');\r\n\tok( expected == $('#en').text(), 'Insert String before' );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:Yahoo\";\r\n\t$('#yahoo').before(document.getElementById('first'));\r\n\tok( expected == $('#en').text(), \"Insert element before\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\r\n\t$('#yahoo').before([document.getElementById('first'), document.getElementById('mark')]);\r\n\tok( expected == $('#en').text(), \"Insert array of elements before\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\r\n\t$('#yahoo').before($(\"#first, #mark\"));\r\n\tok( expected == $('#en').text(), \"Insert jQuery before\" );\r\n});\r\n\r\ntest(\"insertBefore(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(4);\r\n\tvar expected = 'This is a normal link: bugaYahoo';\r\n\t$('<b>buga</b>').insertBefore('#yahoo');\r\n\tok( expected == $('#en').text(), 'Insert String before' );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:Yahoo\";\r\n\t$(document.getElementById('first')).insertBefore('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert element before\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\r\n\t$([document.getElementById('first'), document.getElementById('mark')]).insertBefore('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert array of elements before\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\r\n\t$(\"#first, #mark\").insertBefore('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert jQuery before\" );\r\n});\r\n\r\ntest(\"after(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(4);\r\n\tvar expected = 'This is a normal link: Yahoobuga';\r\n\t$('#yahoo').after('<b>buga</b>');\r\n\tok( expected == $('#en').text(), 'Insert String after' );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:\";\r\n\t$('#yahoo').after(document.getElementById('first'));\r\n\tok( expected == $('#en').text(), \"Insert element after\" );\r\n\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\r\n\t$('#yahoo').after([document.getElementById('first'), document.getElementById('mark')]);\r\n\tok( expected == $('#en').text(), \"Insert array of elements after\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\r\n\t$('#yahoo').after($(\"#first, #mark\"));\r\n\tok( expected == $('#en').text(), \"Insert jQuery after\" );\r\n});\r\n\r\ntest(\"insertAfter(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(4);\r\n\tvar expected = 'This is a normal link: Yahoobuga';\r\n\t$('<b>buga</b>').insertAfter('#yahoo');\r\n\tok( expected == $('#en').text(), 'Insert String after' );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:\";\r\n\t$(document.getElementById('first')).insertAfter('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert element after\" );\r\n\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\r\n\t$([document.getElementById('mark'), document.getElementById('first')]).insertAfter('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert array of elements after\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\r\n\t$(\"#mark, #first\").insertAfter('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert jQuery after\" );\r\n});\r\n\r\ntest(\"end()\", function() {\r\n\texpect(3);\r\n\tok( 'Yahoo' == $('#yahoo').parent().end().text(), 'Check for end' );\r\n\tok( $('#yahoo').end(), 'Check for end with nothing to end' );\r\n\t\r\n\tvar x = $('#yahoo');\r\n\tx.parent();\r\n\tok( 'Yahoo' == $('#yahoo').text(), 'Check for non-destructive behaviour' );\r\n});\r\n\r\ntest(\"find(String)\", function() {\r\n\tok( 'Yahoo' == $('#foo').find('.blogTest').text(), 'Check for find' );\r"}]},
{"id":"77ef469a2f57579fd70eb794b38388472b56717f","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[510,611],"code":"test(\"before(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(4);\n\tvar expected = 'This is a normal link: bugaYahoo';\n\t$('#yahoo').before('<b>buga</b>');\n\tok( expected == $('#en').text(), 'Insert String before' );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:Yahoo\";\n\t$('#yahoo').before(document.getElementById('first'));\n\tok( expected == $('#en').text(), \"Insert element before\" );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\t$('#yahoo').before([document.getElementById('first'), document.getElementById('mark')]);\n\tok( expected == $('#en').text(), \"Insert array of elements before\" );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\t$('#yahoo').before($(\"#first, #mark\"));\n\tok( expected == $('#en').text(), \"Insert jQuery before\" );\n});\n\ntest(\"insertBefore(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(4);\n\tvar expected = 'This is a normal link: bugaYahoo';\n\t$('<b>buga</b>').insertBefore('#yahoo');\n\tok( expected == $('#en').text(), 'Insert String before' );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:Yahoo\";\n\t$(document.getElementById('first')).insertBefore('#yahoo');\n\tok( expected == $('#en').text(), \"Insert element before\" );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\t$([document.getElementById('first'), document.getElementById('mark')]).insertBefore('#yahoo');\n\tok( expected == $('#en').text(), \"Insert array of elements before\" );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\t$(\"#first, #mark\").insertBefore('#yahoo');\n\tok( expected == $('#en').text(), \"Insert jQuery before\" );\n});\n\ntest(\"after(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(4);\n\tvar expected = 'This is a normal link: Yahoobuga';\n\t$('#yahoo').after('<b>buga</b>');\n\tok( expected == $('#en').text(), 'Insert String after' );\n\t\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:\";\n\t$('#yahoo').after(document.getElementById('first'));\n\tok( expected == $('#en').text(), \"Insert element after\" );\n\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\n\t$('#yahoo').after([document.getElementById('first'), document.getElementById('mark')]);\n\tok( expected == $('#en').text(), \"Insert array of elements after\" );\n\t\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\n\t$('#yahoo').after($(\"#first, #mark\"));\n\tok( expected == $('#en').text(), \"Insert jQuery after\" );\n});\n\ntest(\"insertAfter(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(4);\n\tvar expected = 'This is a normal link: Yahoobuga';\n\t$('<b>buga</b>').insertAfter('#yahoo');\n\tok( expected == $('#en').text(), 'Insert String after' );\n\t\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:\";\n\t$(document.getElementById('first')).insertAfter('#yahoo');\n\tok( expected == $('#en').text(), \"Insert element after\" );\n\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\n\t$([document.getElementById('mark'), document.getElementById('first')]).insertAfter('#yahoo');\n\tok( expected == $('#en').text(), \"Insert array of elements after\" );\n\t\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\n\t$(\"#mark, #first\").insertAfter('#yahoo');\n\tok( expected == $('#en').text(), \"Insert jQuery after\" );\n});\n\ntest(\"end()\", function() {\n\texpect(3);\n\tok( 'Yahoo' == $('#yahoo').parent().end().text(), 'Check for end' );\n\tok( $('#yahoo').end(), 'Check for end with nothing to end' );\n\t\n\tvar x = $('#yahoo');\n\tx.parent();\n\tok( 'Yahoo' == $('#yahoo').text(), 'Check for non-destructive behaviour' );\n});\n\ntest(\"find(String)\", function() {\n\texpect(1);"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[321,421],"code":"test(\"before(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(4);\r\n\tvar expected = 'This is a normal link: bugaYahoo';\r\n\t$('#yahoo').before('<b>buga</b>');\r\n\tok( expected == $('#en').text(), 'Insert String before' );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:Yahoo\";\r\n\t$('#yahoo').before(document.getElementById('first'));\r\n\tok( expected == $('#en').text(), \"Insert element before\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\r\n\t$('#yahoo').before([document.getElementById('first'), document.getElementById('mark')]);\r\n\tok( expected == $('#en').text(), \"Insert array of elements before\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\r\n\t$('#yahoo').before($(\"#first, #mark\"));\r\n\tok( expected == $('#en').text(), \"Insert jQuery before\" );\r\n});\r\n\r\ntest(\"insertBefore(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(4);\r\n\tvar expected = 'This is a normal link: bugaYahoo';\r\n\t$('<b>buga</b>').insertBefore('#yahoo');\r\n\tok( expected == $('#en').text(), 'Insert String before' );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:Yahoo\";\r\n\t$(document.getElementById('first')).insertBefore('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert element before\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\r\n\t$([document.getElementById('first'), document.getElementById('mark')]).insertBefore('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert array of elements before\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\r\n\t$(\"#first, #mark\").insertBefore('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert jQuery before\" );\r\n});\r\n\r\ntest(\"after(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(4);\r\n\tvar expected = 'This is a normal link: Yahoobuga';\r\n\t$('#yahoo').after('<b>buga</b>');\r\n\tok( expected == $('#en').text(), 'Insert String after' );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:\";\r\n\t$('#yahoo').after(document.getElementById('first'));\r\n\tok( expected == $('#en').text(), \"Insert element after\" );\r\n\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\r\n\t$('#yahoo').after([document.getElementById('first'), document.getElementById('mark')]);\r\n\tok( expected == $('#en').text(), \"Insert array of elements after\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\r\n\t$('#yahoo').after($(\"#first, #mark\"));\r\n\tok( expected == $('#en').text(), \"Insert jQuery after\" );\r\n});\r\n\r\ntest(\"insertAfter(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(4);\r\n\tvar expected = 'This is a normal link: Yahoobuga';\r\n\t$('<b>buga</b>').insertAfter('#yahoo');\r\n\tok( expected == $('#en').text(), 'Insert String after' );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:\";\r\n\t$(document.getElementById('first')).insertAfter('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert element after\" );\r\n\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\r\n\t$([document.getElementById('mark'), document.getElementById('first')]).insertAfter('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert array of elements after\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\r\n\t$(\"#mark, #first\").insertAfter('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert jQuery after\" );\r\n});\r\n\r\ntest(\"end()\", function() {\r\n\texpect(3);\r\n\tok( 'Yahoo' == $('#yahoo').parent().end().text(), 'Check for end' );\r\n\tok( $('#yahoo').end(), 'Check for end with nothing to end' );\r\n\t\r\n\tvar x = $('#yahoo');\r\n\tx.parent();\r\n\tok( 'Yahoo' == $('#yahoo').text(), 'Check for non-destructive behaviour' );\r\n});\r\n\r\ntest(\"find(String)\", function() {\r\n\tok( 'Yahoo' == $('#foo').find('.blogTest').text(), 'Check for find' );\r"}]},
{"id":"77ef469a2f57579fd70eb794b38388472b56717f","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[510,611],"code":"test(\"before(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(4);\n\tvar expected = 'This is a normal link: bugaYahoo';\n\t$('#yahoo').before('<b>buga</b>');\n\tok( expected == $('#en').text(), 'Insert String before' );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:Yahoo\";\n\t$('#yahoo').before(document.getElementById('first'));\n\tok( expected == $('#en').text(), \"Insert element before\" );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\t$('#yahoo').before([document.getElementById('first'), document.getElementById('mark')]);\n\tok( expected == $('#en').text(), \"Insert array of elements before\" );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\t$('#yahoo').before($(\"#first, #mark\"));\n\tok( expected == $('#en').text(), \"Insert jQuery before\" );\n});\n\ntest(\"insertBefore(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(4);\n\tvar expected = 'This is a normal link: bugaYahoo';\n\t$('<b>buga</b>').insertBefore('#yahoo');\n\tok( expected == $('#en').text(), 'Insert String before' );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:Yahoo\";\n\t$(document.getElementById('first')).insertBefore('#yahoo');\n\tok( expected == $('#en').text(), \"Insert element before\" );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\t$([document.getElementById('first'), document.getElementById('mark')]).insertBefore('#yahoo');\n\tok( expected == $('#en').text(), \"Insert array of elements before\" );\n\t\n\treset();\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n\t$(\"#first, #mark\").insertBefore('#yahoo');\n\tok( expected == $('#en').text(), \"Insert jQuery before\" );\n});\n\ntest(\"after(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(4);\n\tvar expected = 'This is a normal link: Yahoobuga';\n\t$('#yahoo').after('<b>buga</b>');\n\tok( expected == $('#en').text(), 'Insert String after' );\n\t\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:\";\n\t$('#yahoo').after(document.getElementById('first'));\n\tok( expected == $('#en').text(), \"Insert element after\" );\n\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\n\t$('#yahoo').after([document.getElementById('first'), document.getElementById('mark')]);\n\tok( expected == $('#en').text(), \"Insert array of elements after\" );\n\t\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\n\t$('#yahoo').after($(\"#first, #mark\"));\n\tok( expected == $('#en').text(), \"Insert jQuery after\" );\n});\n\ntest(\"insertAfter(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(4);\n\tvar expected = 'This is a normal link: Yahoobuga';\n\t$('<b>buga</b>').insertAfter('#yahoo');\n\tok( expected == $('#en').text(), 'Insert String after' );\n\t\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:\";\n\t$(document.getElementById('first')).insertAfter('#yahoo');\n\tok( expected == $('#en').text(), \"Insert element after\" );\n\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\n\t$([document.getElementById('mark'), document.getElementById('first')]).insertAfter('#yahoo');\n\tok( expected == $('#en').text(), \"Insert array of elements after\" );\n\t\n\treset();\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\n\t$(\"#mark, #first\").insertAfter('#yahoo');\n\tok( expected == $('#en').text(), \"Insert jQuery after\" );\n});\n\ntest(\"end()\", function() {\n\texpect(3);\n\tok( 'Yahoo' == $('#yahoo').parent().end().text(), 'Check for end' );\n\tok( $('#yahoo').end(), 'Check for end with nothing to end' );\n\t\n\tvar x = $('#yahoo');\n\tx.parent();\n\tok( 'Yahoo' == $('#yahoo').text(), 'Check for non-destructive behaviour' );\n});\n\ntest(\"find(String)\", function() {\n\texpect(1);"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[321,421],"code":"test(\"before(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(4);\r\n\tvar expected = 'This is a normal link: bugaYahoo';\r\n\t$('#yahoo').before('<b>buga</b>');\r\n\tok( expected == $('#en').text(), 'Insert String before' );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:Yahoo\";\r\n\t$('#yahoo').before(document.getElementById('first'));\r\n\tok( expected == $('#en').text(), \"Insert element before\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\r\n\t$('#yahoo').before([document.getElementById('first'), document.getElementById('mark')]);\r\n\tok( expected == $('#en').text(), \"Insert array of elements before\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\r\n\t$('#yahoo').before($(\"#first, #mark\"));\r\n\tok( expected == $('#en').text(), \"Insert jQuery before\" );\r\n});\r\n\r\ntest(\"insertBefore(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(4);\r\n\tvar expected = 'This is a normal link: bugaYahoo';\r\n\t$('<b>buga</b>').insertBefore('#yahoo');\r\n\tok( expected == $('#en').text(), 'Insert String before' );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:Yahoo\";\r\n\t$(document.getElementById('first')).insertBefore('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert element before\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\r\n\t$([document.getElementById('first'), document.getElementById('mark')]).insertBefore('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert array of elements before\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: Try them out:diveintomarkYahoo\";\r\n\t$(\"#first, #mark\").insertBefore('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert jQuery before\" );\r\n});\r\n\r\ntest(\"after(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(4);\r\n\tvar expected = 'This is a normal link: Yahoobuga';\r\n\t$('#yahoo').after('<b>buga</b>');\r\n\tok( expected == $('#en').text(), 'Insert String after' );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:\";\r\n\t$('#yahoo').after(document.getElementById('first'));\r\n\tok( expected == $('#en').text(), \"Insert element after\" );\r\n\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\r\n\t$('#yahoo').after([document.getElementById('first'), document.getElementById('mark')]);\r\n\tok( expected == $('#en').text(), \"Insert array of elements after\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\r\n\t$('#yahoo').after($(\"#first, #mark\"));\r\n\tok( expected == $('#en').text(), \"Insert jQuery after\" );\r\n});\r\n\r\ntest(\"insertAfter(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(4);\r\n\tvar expected = 'This is a normal link: Yahoobuga';\r\n\t$('<b>buga</b>').insertAfter('#yahoo');\r\n\tok( expected == $('#en').text(), 'Insert String after' );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:\";\r\n\t$(document.getElementById('first')).insertAfter('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert element after\" );\r\n\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\r\n\t$([document.getElementById('mark'), document.getElementById('first')]).insertAfter('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert array of elements after\" );\r\n\t\r\n\treset();\r\n\texpected = \"This is a normal link: YahooTry them out:diveintomark\";\r\n\t$(\"#mark, #first\").insertAfter('#yahoo');\r\n\tok( expected == $('#en').text(), \"Insert jQuery after\" );\r\n});\r\n\r\ntest(\"end()\", function() {\r\n\texpect(3);\r\n\tok( 'Yahoo' == $('#yahoo').parent().end().text(), 'Check for end' );\r\n\tok( $('#yahoo').end(), 'Check for end with nothing to end' );\r\n\t\r\n\tvar x = $('#yahoo');\r\n\tx.parent();\r\n\tok( 'Yahoo' == $('#yahoo').text(), 'Check for non-destructive behaviour' );\r\n});\r\n\r\ntest(\"find(String)\", function() {\r\n\tok( 'Yahoo' == $('#foo').find('.blogTest').text(), 'Check for find' );\r"}]},
{"id":"8d08b5f36f5e2a6aa72bcb8c07a7ca44b26f70fc","instances":[{"path":"./jquery-data/1.1.3.1/src/ajax/ajaxTest.js","lines":[1,379],"code":"module(\"ajax\");\n\nif ( location.protocol != \"file:\" ) {\n\ntest(\"serialize()\", function() {\n\texpect(1);\n\tvar data = $(':input').not('button').serialize();\n\t// ignore button, IE takes text content as value, not relevant for this test\n\tok( data == 'action=Test&text2=Test&radio1=on&radio2=on&check=on&=on&hidden=&foo%5Bbar%5D=&name=name&=foobar&select1=&select2=3&select3=1', 'Check form serialization as query string' );\n});\n\ntest(\"param\", function() {\n\texpect(4);\n\tvar params = {foo:\"bar\", baz:42, quux:\"All your base are belong to us\"};\n\tok( $.param(params) == \"foo=bar&baz=42&quux=All%20your%20base%20are%20belong%20to%20us\", \"simple\" );\n\t\n\tparams = {someName: [1, 2, 3], regularThing: \"blah\" };\n\tok( $.param(params) == \"someName=1&someName=2&someName=3&regularThing=blah\", \"with array\" );\n\t\n\tparams = {\"foo[]\":[\"baz\", 42, \"All your base are belong to us\"]};\n\tok( $.param(params) == \"foo%5B%5D=baz&foo%5B%5D=42&foo%5B%5D=All%20your%20base%20are%20belong%20to%20us\", \"more array\" );\n\t\n\tparams = {\"foo[bar]\":\"baz\", \"foo[beep]\":42, \"foo[quux]\":\"All your base are belong to us\"};\n\tok( $.param(params) == \"foo%5Bbar%5D=baz&foo%5Bbeep%5D=42&foo%5Bquux%5D=All%20your%20base%20are%20belong%20to%20us\", \"even more arrays\" );\n});\n\ntest(\"pass-through request object\", function() {\n\texpect(7);\n\tstop(true);\n\tvar count = 0;\n\tvar success = function() {\n\t\tif(count++ == 6)\n\t\t\tstart();\n\t}\n\tvar target = \"data/name.php\";\n\tok( $.get(url(target), success), \"get\" );\n\tok( $.getIfModified(url(target), success), \"getIfModified\" );\n\tok( $.post(url(target), success), \"post\" );\n\tok( $.getScript(url(\"data/test.js\"), success), \"script\" );\n\tok( $.getJSON(url(\"data/json.php\"), success), \"json\" );\n\tok( $.ajax({url: url(target), success: success}), \"generic\" );\n});\n\ntest(\"synchronous request\", function() {\n\tok( /^{ \"data\"/.test( $.ajax({url: url(\"data/json.php\"), async: false}).responseText ), \"check returned text\" );\n});\n\ntest(\"synchronous request with callbacks\", function() {\n\texpect(2);\n\tvar result;\n\t$.ajax({url: url(\"data/json.php\"), async: false, success: function(data) { ok(true, \"sucess callback executed\"); result = data; } });\n\tok( /^{ \"data\"/.test( result ), \"check returned text\" );\n});\n\ntest(\"load(String, Object, Function) - simple: inject text into DOM\", function() {\n\texpect(2);\n\tstop();\n\t$('#first').load(url(\"data/name.php\"), function() {\n\t\tok( /^ERROR/.test($('#first').text()), 'Check if content was injected into the DOM' );\n\t\tstart();\n\t});\n});\n\ntest(\"load(String, Object, Function) - inject without callback\", function() {\n\texpect(1);\n\tstop(true); // check if load can be called with only url\n\t$('#first').load(\"data/name.php\");\n});\n\ntest(\"load(String, Object, Function) - check scripts\", function() {\n\texpect(7);\n\tstop();\n\twindow.testFoo = undefined;\n\twindow.foobar = null;\n\tvar verifyEvaluation = function() {\n\t  ok( foobar == \"bar\", 'Check if script src was evaluated after load' );\n\t  ok( $('#ap').html() == 'bar', 'Check if script evaluation has modified DOM');\n\t  start();\n\t};\n\t$('#first').load(url('data/test.php'), function() {\n\t  ok( $('#first').html().match(/^html text/), 'Check content after loading html' );\n\t  ok( $('#foo').html() == 'foo', 'Check if script evaluation has modified DOM');\n\t  ok( testFoo == \"foo\", 'Check if script was evaluated after load' );\n\t  setTimeout(verifyEvaluation, 600);\n\t});\n});\n\ntest(\"load(String, Object, Function) - check file with only a script tag\", function() {\n\texpect(3);\n\tstop();\n\ttestFoo = undefined;\n\t$('#first').load(url('data/test2.php'), function() {\n\t  ok( $('#foo').html() == 'foo', 'Check if script evaluation has modified DOM');\n\t  ok( testFoo == \"foo\", 'Check if script was evaluated after load' );\n\t  start();\n\t});\n});\n\ntest(\"test global handlers - success\", function() {\n\texpect(8);"},{"path":"./jquery-data/1.1.2/src/ajax/ajaxTest.js","lines":[1,379],"code":"module(\"ajax\");\n\nif ( location.protocol != \"file:\" ) {\n\ntest(\"serialize()\", function() {\n\texpect(1);\n\tvar data = $(':input').not('button').serialize();\n\t// ignore button, IE takes text content as value, not relevant for this test\n\tok( data == 'action=Test&text2=Test&radio1=on&radio2=on&check=on&=on&hidden=&foo%5Bbar%5D=&name=name&=foobar&select1=&select2=3&select3=1', 'Check form serialization as query string' );\n});\n\ntest(\"param\", function() {\n\texpect(4);\n\tvar params = {foo:\"bar\", baz:42, quux:\"All your base are belong to us\"};\n\tok( $.param(params) == \"foo=bar&baz=42&quux=All%20your%20base%20are%20belong%20to%20us\", \"simple\" );\n\t\n\tparams = {someName: [1, 2, 3], regularThing: \"blah\" };\n\tok( $.param(params) == \"someName=1&someName=2&someName=3&regularThing=blah\", \"with array\" );\n\t\n\tparams = {\"foo[]\":[\"baz\", 42, \"All your base are belong to us\"]};\n\tok( $.param(params) == \"foo%5B%5D=baz&foo%5B%5D=42&foo%5B%5D=All%20your%20base%20are%20belong%20to%20us\", \"more array\" );\n\t\n\tparams = {\"foo[bar]\":\"baz\", \"foo[beep]\":42, \"foo[quux]\":\"All your base are belong to us\"};\n\tok( $.param(params) == \"foo%5Bbar%5D=baz&foo%5Bbeep%5D=42&foo%5Bquux%5D=All%20your%20base%20are%20belong%20to%20us\", \"even more arrays\" );\n});\n\ntest(\"pass-through request object\", function() {\n\texpect(7);\n\tstop(true);\n\tvar count = 0;\n\tvar success = function() {\n\t\tif(count++ == 6)\n\t\t\tstart();\n\t}\n\tvar target = \"data/name.php\";\n\tok( $.get(url(target), success), \"get\" );\n\tok( $.getIfModified(url(target), success), \"getIfModified\" );\n\tok( $.post(url(target), success), \"post\" );\n\tok( $.getScript(url(\"data/test.js\"), success), \"script\" );\n\tok( $.getJSON(url(\"data/json.php\"), success), \"json\" );\n\tok( $.ajax({url: url(target), success: success}), \"generic\" );\n});\n\ntest(\"synchronous request\", function() {\n\tok( /^{ \"data\"/.test( $.ajax({url: url(\"data/json.php\"), async: false}).responseText ), \"check returned text\" );\n});\n\ntest(\"synchronous request with callbacks\", function() {\n\texpect(2);\n\tvar result;\n\t$.ajax({url: url(\"data/json.php\"), async: false, success: function(data) { ok(true, \"sucess callback executed\"); result = data; } });\n\tok( /^{ \"data\"/.test( result ), \"check returned text\" );\n});\n\ntest(\"load(String, Object, Function) - simple: inject text into DOM\", function() {\n\texpect(2);\n\tstop();\n\t$('#first').load(url(\"data/name.php\"), function() {\n\t\tok( /^ERROR/.test($('#first').text()), 'Check if content was injected into the DOM' );\n\t\tstart();\n\t});\n});\n\ntest(\"load(String, Object, Function) - inject without callback\", function() {\n\texpect(1);\n\tstop(true); // check if load can be called with only url\n\t$('#first').load(\"data/name.php\");\n});\n\ntest(\"load(String, Object, Function) - check scripts\", function() {\n\texpect(7);\n\tstop();\n\twindow.testFoo = undefined;\n\twindow.foobar = null;\n\tvar verifyEvaluation = function() {\n\t  ok( foobar == \"bar\", 'Check if script src was evaluated after load' );\n\t  ok( $('#ap').html() == 'bar', 'Check if script evaluation has modified DOM');\n\t  start();\n\t};\n\t$('#first').load(url('data/test.php'), function() {\n\t  ok( $('#first').html().match(/^html text/), 'Check content after loading html' );\n\t  ok( $('#foo').html() == 'foo', 'Check if script evaluation has modified DOM');\n\t  ok( testFoo == \"foo\", 'Check if script was evaluated after load' );\n\t  setTimeout(verifyEvaluation, 600);\n\t});\n});\n\ntest(\"load(String, Object, Function) - check file with only a script tag\", function() {\n\texpect(3);\n\tstop();\n\ttestFoo = undefined;\n\t$('#first').load(url('data/test2.php'), function() {\n\t  ok( $('#foo').html() == 'foo', 'Check if script evaluation has modified DOM');\n\t  ok( testFoo == \"foo\", 'Check if script was evaluated after load' );\n\t  start();\n\t});\n});\n\ntest(\"test global handlers - success\", function() {\n\texpect(8);"}]},
{"id":"8d08b5f36f5e2a6aa72bcb8c07a7ca44b26f70fc","instances":[{"path":"./jquery-data/1.1.3.1/src/ajax/ajaxTest.js","lines":[1,379],"code":"module(\"ajax\");\n\nif ( location.protocol != \"file:\" ) {\n\ntest(\"serialize()\", function() {\n\texpect(1);\n\tvar data = $(':input').not('button').serialize();\n\t// ignore button, IE takes text content as value, not relevant for this test\n\tok( data == 'action=Test&text2=Test&radio1=on&radio2=on&check=on&=on&hidden=&foo%5Bbar%5D=&name=name&=foobar&select1=&select2=3&select3=1', 'Check form serialization as query string' );\n});\n\ntest(\"param\", function() {\n\texpect(4);\n\tvar params = {foo:\"bar\", baz:42, quux:\"All your base are belong to us\"};\n\tok( $.param(params) == \"foo=bar&baz=42&quux=All%20your%20base%20are%20belong%20to%20us\", \"simple\" );\n\t\n\tparams = {someName: [1, 2, 3], regularThing: \"blah\" };\n\tok( $.param(params) == \"someName=1&someName=2&someName=3&regularThing=blah\", \"with array\" );\n\t\n\tparams = {\"foo[]\":[\"baz\", 42, \"All your base are belong to us\"]};\n\tok( $.param(params) == \"foo%5B%5D=baz&foo%5B%5D=42&foo%5B%5D=All%20your%20base%20are%20belong%20to%20us\", \"more array\" );\n\t\n\tparams = {\"foo[bar]\":\"baz\", \"foo[beep]\":42, \"foo[quux]\":\"All your base are belong to us\"};\n\tok( $.param(params) == \"foo%5Bbar%5D=baz&foo%5Bbeep%5D=42&foo%5Bquux%5D=All%20your%20base%20are%20belong%20to%20us\", \"even more arrays\" );\n});\n\ntest(\"pass-through request object\", function() {\n\texpect(7);\n\tstop(true);\n\tvar count = 0;\n\tvar success = function() {\n\t\tif(count++ == 6)\n\t\t\tstart();\n\t}\n\tvar target = \"data/name.php\";\n\tok( $.get(url(target), success), \"get\" );\n\tok( $.getIfModified(url(target), success), \"getIfModified\" );\n\tok( $.post(url(target), success), \"post\" );\n\tok( $.getScript(url(\"data/test.js\"), success), \"script\" );\n\tok( $.getJSON(url(\"data/json.php\"), success), \"json\" );\n\tok( $.ajax({url: url(target), success: success}), \"generic\" );\n});\n\ntest(\"synchronous request\", function() {\n\tok( /^{ \"data\"/.test( $.ajax({url: url(\"data/json.php\"), async: false}).responseText ), \"check returned text\" );\n});\n\ntest(\"synchronous request with callbacks\", function() {\n\texpect(2);\n\tvar result;\n\t$.ajax({url: url(\"data/json.php\"), async: false, success: function(data) { ok(true, \"sucess callback executed\"); result = data; } });\n\tok( /^{ \"data\"/.test( result ), \"check returned text\" );\n});\n\ntest(\"load(String, Object, Function) - simple: inject text into DOM\", function() {\n\texpect(2);\n\tstop();\n\t$('#first').load(url(\"data/name.php\"), function() {\n\t\tok( /^ERROR/.test($('#first').text()), 'Check if content was injected into the DOM' );\n\t\tstart();\n\t});\n});\n\ntest(\"load(String, Object, Function) - inject without callback\", function() {\n\texpect(1);\n\tstop(true); // check if load can be called with only url\n\t$('#first').load(\"data/name.php\");\n});\n\ntest(\"load(String, Object, Function) - check scripts\", function() {\n\texpect(7);\n\tstop();\n\twindow.testFoo = undefined;\n\twindow.foobar = null;\n\tvar verifyEvaluation = function() {\n\t  ok( foobar == \"bar\", 'Check if script src was evaluated after load' );\n\t  ok( $('#ap').html() == 'bar', 'Check if script evaluation has modified DOM');\n\t  start();\n\t};\n\t$('#first').load(url('data/test.php'), function() {\n\t  ok( $('#first').html().match(/^html text/), 'Check content after loading html' );\n\t  ok( $('#foo').html() == 'foo', 'Check if script evaluation has modified DOM');\n\t  ok( testFoo == \"foo\", 'Check if script was evaluated after load' );\n\t  setTimeout(verifyEvaluation, 600);\n\t});\n});\n\ntest(\"load(String, Object, Function) - check file with only a script tag\", function() {\n\texpect(3);\n\tstop();\n\ttestFoo = undefined;\n\t$('#first').load(url('data/test2.php'), function() {\n\t  ok( $('#foo').html() == 'foo', 'Check if script evaluation has modified DOM');\n\t  ok( testFoo == \"foo\", 'Check if script was evaluated after load' );\n\t  start();\n\t});\n});\n\ntest(\"test global handlers - success\", function() {\n\texpect(8);"},{"path":"./jquery-data/1.1.2/src/ajax/ajaxTest.js","lines":[1,379],"code":"module(\"ajax\");\n\nif ( location.protocol != \"file:\" ) {\n\ntest(\"serialize()\", function() {\n\texpect(1);\n\tvar data = $(':input').not('button').serialize();\n\t// ignore button, IE takes text content as value, not relevant for this test\n\tok( data == 'action=Test&text2=Test&radio1=on&radio2=on&check=on&=on&hidden=&foo%5Bbar%5D=&name=name&=foobar&select1=&select2=3&select3=1', 'Check form serialization as query string' );\n});\n\ntest(\"param\", function() {\n\texpect(4);\n\tvar params = {foo:\"bar\", baz:42, quux:\"All your base are belong to us\"};\n\tok( $.param(params) == \"foo=bar&baz=42&quux=All%20your%20base%20are%20belong%20to%20us\", \"simple\" );\n\t\n\tparams = {someName: [1, 2, 3], regularThing: \"blah\" };\n\tok( $.param(params) == \"someName=1&someName=2&someName=3&regularThing=blah\", \"with array\" );\n\t\n\tparams = {\"foo[]\":[\"baz\", 42, \"All your base are belong to us\"]};\n\tok( $.param(params) == \"foo%5B%5D=baz&foo%5B%5D=42&foo%5B%5D=All%20your%20base%20are%20belong%20to%20us\", \"more array\" );\n\t\n\tparams = {\"foo[bar]\":\"baz\", \"foo[beep]\":42, \"foo[quux]\":\"All your base are belong to us\"};\n\tok( $.param(params) == \"foo%5Bbar%5D=baz&foo%5Bbeep%5D=42&foo%5Bquux%5D=All%20your%20base%20are%20belong%20to%20us\", \"even more arrays\" );\n});\n\ntest(\"pass-through request object\", function() {\n\texpect(7);\n\tstop(true);\n\tvar count = 0;\n\tvar success = function() {\n\t\tif(count++ == 6)\n\t\t\tstart();\n\t}\n\tvar target = \"data/name.php\";\n\tok( $.get(url(target), success), \"get\" );\n\tok( $.getIfModified(url(target), success), \"getIfModified\" );\n\tok( $.post(url(target), success), \"post\" );\n\tok( $.getScript(url(\"data/test.js\"), success), \"script\" );\n\tok( $.getJSON(url(\"data/json.php\"), success), \"json\" );\n\tok( $.ajax({url: url(target), success: success}), \"generic\" );\n});\n\ntest(\"synchronous request\", function() {\n\tok( /^{ \"data\"/.test( $.ajax({url: url(\"data/json.php\"), async: false}).responseText ), \"check returned text\" );\n});\n\ntest(\"synchronous request with callbacks\", function() {\n\texpect(2);\n\tvar result;\n\t$.ajax({url: url(\"data/json.php\"), async: false, success: function(data) { ok(true, \"sucess callback executed\"); result = data; } });\n\tok( /^{ \"data\"/.test( result ), \"check returned text\" );\n});\n\ntest(\"load(String, Object, Function) - simple: inject text into DOM\", function() {\n\texpect(2);\n\tstop();\n\t$('#first').load(url(\"data/name.php\"), function() {\n\t\tok( /^ERROR/.test($('#first').text()), 'Check if content was injected into the DOM' );\n\t\tstart();\n\t});\n});\n\ntest(\"load(String, Object, Function) - inject without callback\", function() {\n\texpect(1);\n\tstop(true); // check if load can be called with only url\n\t$('#first').load(\"data/name.php\");\n});\n\ntest(\"load(String, Object, Function) - check scripts\", function() {\n\texpect(7);\n\tstop();\n\twindow.testFoo = undefined;\n\twindow.foobar = null;\n\tvar verifyEvaluation = function() {\n\t  ok( foobar == \"bar\", 'Check if script src was evaluated after load' );\n\t  ok( $('#ap').html() == 'bar', 'Check if script evaluation has modified DOM');\n\t  start();\n\t};\n\t$('#first').load(url('data/test.php'), function() {\n\t  ok( $('#first').html().match(/^html text/), 'Check content after loading html' );\n\t  ok( $('#foo').html() == 'foo', 'Check if script evaluation has modified DOM');\n\t  ok( testFoo == \"foo\", 'Check if script was evaluated after load' );\n\t  setTimeout(verifyEvaluation, 600);\n\t});\n});\n\ntest(\"load(String, Object, Function) - check file with only a script tag\", function() {\n\texpect(3);\n\tstop();\n\ttestFoo = undefined;\n\t$('#first').load(url('data/test2.php'), function() {\n\t  ok( $('#foo').html() == 'foo', 'Check if script evaluation has modified DOM');\n\t  ok( testFoo == \"foo\", 'Check if script was evaluated after load' );\n\t  start();\n\t});\n});\n\ntest(\"test global handlers - success\", function() {\n\texpect(8);"}]},
{"id":"8d08b5f36f5e2a6aa72bcb8c07a7ca44b26f70fc","instances":[{"path":"./jquery-data/1.1.3.1/src/ajax/ajaxTest.js","lines":[1,379],"code":"module(\"ajax\");\n\nif ( location.protocol != \"file:\" ) {\n\ntest(\"serialize()\", function() {\n\texpect(1);\n\tvar data = $(':input').not('button').serialize();\n\t// ignore button, IE takes text content as value, not relevant for this test\n\tok( data == 'action=Test&text2=Test&radio1=on&radio2=on&check=on&=on&hidden=&foo%5Bbar%5D=&name=name&=foobar&select1=&select2=3&select3=1', 'Check form serialization as query string' );\n});\n\ntest(\"param\", function() {\n\texpect(4);\n\tvar params = {foo:\"bar\", baz:42, quux:\"All your base are belong to us\"};\n\tok( $.param(params) == \"foo=bar&baz=42&quux=All%20your%20base%20are%20belong%20to%20us\", \"simple\" );\n\t\n\tparams = {someName: [1, 2, 3], regularThing: \"blah\" };\n\tok( $.param(params) == \"someName=1&someName=2&someName=3&regularThing=blah\", \"with array\" );\n\t\n\tparams = {\"foo[]\":[\"baz\", 42, \"All your base are belong to us\"]};\n\tok( $.param(params) == \"foo%5B%5D=baz&foo%5B%5D=42&foo%5B%5D=All%20your%20base%20are%20belong%20to%20us\", \"more array\" );\n\t\n\tparams = {\"foo[bar]\":\"baz\", \"foo[beep]\":42, \"foo[quux]\":\"All your base are belong to us\"};\n\tok( $.param(params) == \"foo%5Bbar%5D=baz&foo%5Bbeep%5D=42&foo%5Bquux%5D=All%20your%20base%20are%20belong%20to%20us\", \"even more arrays\" );\n});\n\ntest(\"pass-through request object\", function() {\n\texpect(7);\n\tstop(true);\n\tvar count = 0;\n\tvar success = function() {\n\t\tif(count++ == 6)\n\t\t\tstart();\n\t}\n\tvar target = \"data/name.php\";\n\tok( $.get(url(target), success), \"get\" );\n\tok( $.getIfModified(url(target), success), \"getIfModified\" );\n\tok( $.post(url(target), success), \"post\" );\n\tok( $.getScript(url(\"data/test.js\"), success), \"script\" );\n\tok( $.getJSON(url(\"data/json.php\"), success), \"json\" );\n\tok( $.ajax({url: url(target), success: success}), \"generic\" );\n});\n\ntest(\"synchronous request\", function() {\n\tok( /^{ \"data\"/.test( $.ajax({url: url(\"data/json.php\"), async: false}).responseText ), \"check returned text\" );\n});\n\ntest(\"synchronous request with callbacks\", function() {\n\texpect(2);\n\tvar result;\n\t$.ajax({url: url(\"data/json.php\"), async: false, success: function(data) { ok(true, \"sucess callback executed\"); result = data; } });\n\tok( /^{ \"data\"/.test( result ), \"check returned text\" );\n});\n\ntest(\"load(String, Object, Function) - simple: inject text into DOM\", function() {\n\texpect(2);\n\tstop();\n\t$('#first').load(url(\"data/name.php\"), function() {\n\t\tok( /^ERROR/.test($('#first').text()), 'Check if content was injected into the DOM' );\n\t\tstart();\n\t});\n});\n\ntest(\"load(String, Object, Function) - inject without callback\", function() {\n\texpect(1);\n\tstop(true); // check if load can be called with only url\n\t$('#first').load(\"data/name.php\");\n});\n\ntest(\"load(String, Object, Function) - check scripts\", function() {\n\texpect(7);\n\tstop();\n\twindow.testFoo = undefined;\n\twindow.foobar = null;\n\tvar verifyEvaluation = function() {\n\t  ok( foobar == \"bar\", 'Check if script src was evaluated after load' );\n\t  ok( $('#ap').html() == 'bar', 'Check if script evaluation has modified DOM');\n\t  start();\n\t};\n\t$('#first').load(url('data/test.php'), function() {\n\t  ok( $('#first').html().match(/^html text/), 'Check content after loading html' );\n\t  ok( $('#foo').html() == 'foo', 'Check if script evaluation has modified DOM');\n\t  ok( testFoo == \"foo\", 'Check if script was evaluated after load' );\n\t  setTimeout(verifyEvaluation, 600);\n\t});\n});\n\ntest(\"load(String, Object, Function) - check file with only a script tag\", function() {\n\texpect(3);\n\tstop();\n\ttestFoo = undefined;\n\t$('#first').load(url('data/test2.php'), function() {\n\t  ok( $('#foo').html() == 'foo', 'Check if script evaluation has modified DOM');\n\t  ok( testFoo == \"foo\", 'Check if script was evaluated after load' );\n\t  start();\n\t});\n});\n\ntest(\"test global handlers - success\", function() {\n\texpect(8);"},{"path":"./jquery-data/1.1.2/src/ajax/ajaxTest.js","lines":[1,379],"code":"module(\"ajax\");\n\nif ( location.protocol != \"file:\" ) {\n\ntest(\"serialize()\", function() {\n\texpect(1);\n\tvar data = $(':input').not('button').serialize();\n\t// ignore button, IE takes text content as value, not relevant for this test\n\tok( data == 'action=Test&text2=Test&radio1=on&radio2=on&check=on&=on&hidden=&foo%5Bbar%5D=&name=name&=foobar&select1=&select2=3&select3=1', 'Check form serialization as query string' );\n});\n\ntest(\"param\", function() {\n\texpect(4);\n\tvar params = {foo:\"bar\", baz:42, quux:\"All your base are belong to us\"};\n\tok( $.param(params) == \"foo=bar&baz=42&quux=All%20your%20base%20are%20belong%20to%20us\", \"simple\" );\n\t\n\tparams = {someName: [1, 2, 3], regularThing: \"blah\" };\n\tok( $.param(params) == \"someName=1&someName=2&someName=3&regularThing=blah\", \"with array\" );\n\t\n\tparams = {\"foo[]\":[\"baz\", 42, \"All your base are belong to us\"]};\n\tok( $.param(params) == \"foo%5B%5D=baz&foo%5B%5D=42&foo%5B%5D=All%20your%20base%20are%20belong%20to%20us\", \"more array\" );\n\t\n\tparams = {\"foo[bar]\":\"baz\", \"foo[beep]\":42, \"foo[quux]\":\"All your base are belong to us\"};\n\tok( $.param(params) == \"foo%5Bbar%5D=baz&foo%5Bbeep%5D=42&foo%5Bquux%5D=All%20your%20base%20are%20belong%20to%20us\", \"even more arrays\" );\n});\n\ntest(\"pass-through request object\", function() {\n\texpect(7);\n\tstop(true);\n\tvar count = 0;\n\tvar success = function() {\n\t\tif(count++ == 6)\n\t\t\tstart();\n\t}\n\tvar target = \"data/name.php\";\n\tok( $.get(url(target), success), \"get\" );\n\tok( $.getIfModified(url(target), success), \"getIfModified\" );\n\tok( $.post(url(target), success), \"post\" );\n\tok( $.getScript(url(\"data/test.js\"), success), \"script\" );\n\tok( $.getJSON(url(\"data/json.php\"), success), \"json\" );\n\tok( $.ajax({url: url(target), success: success}), \"generic\" );\n});\n\ntest(\"synchronous request\", function() {\n\tok( /^{ \"data\"/.test( $.ajax({url: url(\"data/json.php\"), async: false}).responseText ), \"check returned text\" );\n});\n\ntest(\"synchronous request with callbacks\", function() {\n\texpect(2);\n\tvar result;\n\t$.ajax({url: url(\"data/json.php\"), async: false, success: function(data) { ok(true, \"sucess callback executed\"); result = data; } });\n\tok( /^{ \"data\"/.test( result ), \"check returned text\" );\n});\n\ntest(\"load(String, Object, Function) - simple: inject text into DOM\", function() {\n\texpect(2);\n\tstop();\n\t$('#first').load(url(\"data/name.php\"), function() {\n\t\tok( /^ERROR/.test($('#first').text()), 'Check if content was injected into the DOM' );\n\t\tstart();\n\t});\n});\n\ntest(\"load(String, Object, Function) - inject without callback\", function() {\n\texpect(1);\n\tstop(true); // check if load can be called with only url\n\t$('#first').load(\"data/name.php\");\n});\n\ntest(\"load(String, Object, Function) - check scripts\", function() {\n\texpect(7);\n\tstop();\n\twindow.testFoo = undefined;\n\twindow.foobar = null;\n\tvar verifyEvaluation = function() {\n\t  ok( foobar == \"bar\", 'Check if script src was evaluated after load' );\n\t  ok( $('#ap').html() == 'bar', 'Check if script evaluation has modified DOM');\n\t  start();\n\t};\n\t$('#first').load(url('data/test.php'), function() {\n\t  ok( $('#first').html().match(/^html text/), 'Check content after loading html' );\n\t  ok( $('#foo').html() == 'foo', 'Check if script evaluation has modified DOM');\n\t  ok( testFoo == \"foo\", 'Check if script was evaluated after load' );\n\t  setTimeout(verifyEvaluation, 600);\n\t});\n});\n\ntest(\"load(String, Object, Function) - check file with only a script tag\", function() {\n\texpect(3);\n\tstop();\n\ttestFoo = undefined;\n\t$('#first').load(url('data/test2.php'), function() {\n\t  ok( $('#foo').html() == 'foo', 'Check if script evaluation has modified DOM');\n\t  ok( testFoo == \"foo\", 'Check if script was evaluated after load' );\n\t  start();\n\t});\n});\n\ntest(\"test global handlers - success\", function() {\n\texpect(8);"}]},
{"id":"1296b439ba886ced32bd14b14a85a4c367fa96c6","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[458,465],"code":"test(\"prepend(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\n\texpect(5);\n\tvar defaultText = 'Try them out:'\n\tvar result = $('#first').prepend('<b>buga</b>');\n\tok( result.text() == 'buga' + defaultText, 'Check if text prepending works' );\n\tok( $('#select3').prepend('<option value=\"prependTest\">Prepend Test</option>').find('option:first-child').attr('value') == 'prependTest', 'Prepending html options to select element');\n\t\n\treset();"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[275,282],"code":"test(\"prepend(String|Element|Array&lt;Element&gt;|jQuery)\", function() {\r\n\texpect(5);\r\n\tvar defaultText = 'Try them out:'\r\n\tvar result = $('#first').prepend('<b>buga</b>');\r\n\tok( result.text() == 'buga' + defaultText, 'Check if text prepending works' );\r\n\tok( $('#select3').prepend('<option value=\"prependTest\">Prepend Test</option>').find('option:first-child').attr('value') == 'prependTest', 'Prepending html options to select element');\r\n\t\r\n\treset();\r"}]},
{"id":"a7304ca6aeb2f1d1ae84901350247a12dd979626","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[653,662],"code":"test(\"$.extend(Object, Object)\", function() {\n\texpect(2);\n\tvar settings = { xnumber1: 5, xnumber2: 7, xstring1: \"peter\", xstring2: \"pan\" },\n\t\toptions =     { xnumber2: 1, xstring2: \"x\", xxx: \"newstring\" },\n\t\toptionsCopy = { xnumber2: 1, xstring2: \"x\", xxx: \"newstring\" },\n\t\tmerged = { xnumber1: 5, xnumber2: 1, xstring1: \"peter\", xstring2: \"x\", xxx: \"newstring\" };\n\tjQuery.extend(settings, options);\n\tisObj( settings, merged, \"Check if extended: settings must be extended\" );\n\tisObj( options, optionsCopy, \"Check if not modified: options must not be modified\" );\n});"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[463,472],"code":"test(\"$.extend(Object, Object)\", function() {\r\n\texpect(2);\r\n\tvar settings = { xnumber1: 5, xnumber2: 7, xstring1: \"peter\", xstring2: \"pan\" },\r\n\t\toptions =     { xnumber2: 1, xstring2: \"x\", xxx: \"newstring\" },\r\n\t\toptionsCopy = { xnumber2: 1, xstring2: \"x\", xxx: \"newstring\" },\r\n\t\tmerged = { xnumber1: 5, xnumber2: 1, xstring1: \"peter\", xstring2: \"x\", xxx: \"newstring\" };\r\n\tjQuery.extend(settings, options);\r\n\tisSet( settings, merged, \"Check if extended: settings must be extended\" );\r\n\tisSet ( options, optionsCopy, \"Check if not modified: options must not be modified\" );\r\n});\r"}]},
{"id":"4508f928c32edb0ec5fbd710e88c5e6489038da9","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[661,674],"code":"\tisObj( options, optionsCopy, \"Check if not modified: options must not be modified\" );\n});\n\ntest(\"$.extend(Object, Object, Object, Object)\", function() {\n\texpect(4);\n\tvar defaults = { xnumber1: 5, xnumber2: 7, xstring1: \"peter\", xstring2: \"pan\" },\n\t\tdefaultsCopy = { xnumber1: 5, xnumber2: 7, xstring1: \"peter\", xstring2: \"pan\" },\n\t\toptions1 =     { xnumber2: 1, xstring2: \"x\" },\n\t\toptions1Copy = { xnumber2: 1, xstring2: \"x\" },\n\t\toptions2 =     { xstring2: \"xx\", xxx: \"newstringx\" },\n\t\toptions2Copy = { xstring2: \"xx\", xxx: \"newstringx\" },\n\t\tmerged = { xnumber1: 5, xnumber2: 1, xstring1: \"peter\", xstring2: \"xx\", xxx: \"newstringx\" };\n\tvar settings = jQuery.extend({}, defaults, options1, options2);\n\tisObj( settings, merged, \"Check if extended: settings must be extended\" );"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[471,484],"code":"\tisSet ( options, optionsCopy, \"Check if not modified: options must not be modified\" );\r\n});\r\n\r\ntest(\"$.extend(Object, Object, Object, Object)\", function() {\r\n\texpect(4);\r\n\tvar defaults = { xnumber1: 5, xnumber2: 7, xstring1: \"peter\", xstring2: \"pan\" },\r\n\t\tdefaultsCopy = { xnumber1: 5, xnumber2: 7, xstring1: \"peter\", xstring2: \"pan\" },\r\n\t\toptions1 =     { xnumber2: 1, xstring2: \"x\" },\r\n\t\toptions1Copy = { xnumber2: 1, xstring2: \"x\" },\r\n\t\toptions2 =     { xstring2: \"xx\", xxx: \"newstringx\" },\r\n\t\toptions2Copy = { xstring2: \"xx\", xxx: \"newstringx\" },\r\n\t\tmerged = { xnumber1: 5, xnumber2: 1, xstring1: \"peter\", xstring2: \"xx\", xxx: \"newstringx\" };\r\n\tvar settings = jQuery.extend({}, defaults, options1, options2);\r\n\tisSet( settings, merged, \"Check if extended: settings must be extended\" );\r"}]},
{"id":"502b8a9904d79a5226454d2addc77a6193184e5f","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[728,773],"code":"\tisSet( $(\"#foo\").siblings(\"form, b\").get(), q(\"form\", \"lengthtest\", \"floatTest\"), \"Check for multiple filters\" );\n});\n\ntest(\"children([String])\", function() {\n\texpect(3);\n\tisSet( $(\"#foo\").children().get(), q(\"sndp\", \"en\", \"sap\"), \"Check for children\" );\n\tisSet( $(\"#foo\").children(\"[code]\").get(), q(\"sndp\", \"sap\"), \"Check for filtered children\" );\n\tisSet( $(\"#foo\").children(\"#en, #sap\").get(), q(\"en\", \"sap\"), \"Check for multiple filters\" );\n});\n\ntest(\"parent[s]([String])\", function() {\n\texpect(8);\n\tok( $(\"#groups\").parent()[0].id == \"ap\", \"Simple parent check\" );\n\tok( $(\"#groups\").parent(\"p\")[0].id == \"ap\", \"Filtered parent check\" );\n\tok( $(\"#groups\").parent(\"div\").length == 0, \"Filtered parent check, no match\" );\n\tok( $(\"#groups\").parent(\"div, p\")[0].id == \"ap\", \"Check for multiple filters\" );\n\t\n\tok( $(\"#groups\").parents()[0].id == \"ap\", \"Simple parents check\" );\n\tok( $(\"#groups\").parents(\"p\")[0].id == \"ap\", \"Filtered parents check\" );\n\tok( $(\"#groups\").parents(\"div\")[0].id == \"main\", \"Filtered parents check2\" );\n\tisSet( $(\"#groups\").parents(\"p, div\").get(), q(\"ap\", \"main\"), \"Check for multiple filters\" );\n});\n\ntest(\"next/prev([String])\", function() {\n\texpect(8);\n\tok( $(\"#ap\").next()[0].id == \"foo\", \"Simple next check\" );\n\tok( $(\"#ap\").next(\"div\")[0].id == \"foo\", \"Filtered next check\" );\n\tok( $(\"#ap\").next(\"p\").length == 0, \"Filtered next check, no match\" );\n\tok( $(\"#ap\").next(\"div, p\")[0].id == \"foo\", \"Multiple filters\" );\n\t\n\tok( $(\"#foo\").prev()[0].id == \"ap\", \"Simple prev check\" );\n\tok( $(\"#foo\").prev(\"p\")[0].id == \"ap\", \"Filtered prev check\" );\n\tok( $(\"#foo\").prev(\"div\").length == 0, \"Filtered prev check, no match\" );\n\tok( $(\"#foo\").prev(\"p, div\")[0].id == \"ap\", \"Multiple filters\" );\n});\n\ntest(\"show()\", function() {\n\texpect(1);\n\tvar pass = true, div = $(\"div\");\n\tdiv.show().each(function(){\n\t  if ( this.style.display == \"none\" ) pass = false;\n\t});\n\tok( pass, \"Show\" );\n});\n\ntest(\"addClass(String)\", function() {"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[536,581],"code":"\tisSet( $(\"#foo\").siblings(\"form, b\").get(), q(\"form\", \"floatTest\"), \"Check for multiple filters\" );\r\n});\r\n\r\ntest(\"children([String])\", function() {\r\n\texpect(3);\r\n\tisSet( $(\"#foo\").children().get(), q(\"sndp\", \"en\", \"sap\"), \"Check for children\" );\r\n\tisSet( $(\"#foo\").children(\"[code]\").get(), q(\"sndp\", \"sap\"), \"Check for filtered children\" );\r\n\tisSet( $(\"#foo\").children(\"#en, #sap\").get(), q(\"en\", \"sap\"), \"Check for multiple filters\" );\r\n});\r\n\r\ntest(\"parent[s]([String])\", function() {\r\n\texpect(8);\r\n\tok( $(\"#groups\").parent()[0].id == \"ap\", \"Simple parent check\" );\r\n\tok( $(\"#groups\").parent(\"p\")[0].id == \"ap\", \"Filtered parent check\" );\r\n\tok( $(\"#groups\").parent(\"div\").length == 0, \"Filtered parent check, no match\" );\r\n\tok( $(\"#groups\").parent(\"div, p\")[0].id == \"ap\", \"Check for multiple filters\" );\r\n\t\r\n\tok( $(\"#groups\").parents()[0].id == \"ap\", \"Simple parents check\" );\r\n\tok( $(\"#groups\").parents(\"p\")[0].id == \"ap\", \"Filtered parents check\" );\r\n\tok( $(\"#groups\").parents(\"div\")[0].id == \"main\", \"Filtered parents check2\" );\r\n\tisSet( $(\"#groups\").parents(\"p, div\").get(), q(\"ap\", \"main\"), \"Check for multiple filters\" );\r\n});\r\n\r\ntest(\"next/prev([String])\", function() {\r\n\texpect(8);\r\n\tok( $(\"#ap\").next()[0].id == \"foo\", \"Simple next check\" );\r\n\tok( $(\"#ap\").next(\"div\")[0].id == \"foo\", \"Filtered next check\" );\r\n\tok( $(\"#ap\").next(\"p\").length == 0, \"Filtered next check, no match\" );\r\n\tok( $(\"#ap\").next(\"div, p\")[0].id == \"foo\", \"Multiple filters\" );\r\n\t\r\n\tok( $(\"#foo\").prev()[0].id == \"ap\", \"Simple prev check\" );\r\n\tok( $(\"#foo\").prev(\"p\")[0].id == \"ap\", \"Filtered prev check\" );\r\n\tok( $(\"#foo\").prev(\"div\").length == 0, \"Filtered prev check, no match\" );\r\n\tok( $(\"#foo\").prev(\"p, div\")[0].id == \"ap\", \"Multiple filters\" );\r\n});\r\n\r\ntest(\"show()\", function() {\r\n\texpect(1);\r\n\tvar pass = true, div = $(\"div\");\r\n\tdiv.show().each(function(){\r\n\t  if ( this.style.display == \"none\" ) pass = false;\r\n\t});\r\n\tok( pass, \"Show\" );\r\n});\r\n\r\ntest(\"addClass(String)\", function() {\r"}]},
{"id":"502b8a9904d79a5226454d2addc77a6193184e5f","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[728,773],"code":"\tisSet( $(\"#foo\").siblings(\"form, b\").get(), q(\"form\", \"lengthtest\", \"floatTest\"), \"Check for multiple filters\" );\n});\n\ntest(\"children([String])\", function() {\n\texpect(3);\n\tisSet( $(\"#foo\").children().get(), q(\"sndp\", \"en\", \"sap\"), \"Check for children\" );\n\tisSet( $(\"#foo\").children(\"[code]\").get(), q(\"sndp\", \"sap\"), \"Check for filtered children\" );\n\tisSet( $(\"#foo\").children(\"#en, #sap\").get(), q(\"en\", \"sap\"), \"Check for multiple filters\" );\n});\n\ntest(\"parent[s]([String])\", function() {\n\texpect(8);\n\tok( $(\"#groups\").parent()[0].id == \"ap\", \"Simple parent check\" );\n\tok( $(\"#groups\").parent(\"p\")[0].id == \"ap\", \"Filtered parent check\" );\n\tok( $(\"#groups\").parent(\"div\").length == 0, \"Filtered parent check, no match\" );\n\tok( $(\"#groups\").parent(\"div, p\")[0].id == \"ap\", \"Check for multiple filters\" );\n\t\n\tok( $(\"#groups\").parents()[0].id == \"ap\", \"Simple parents check\" );\n\tok( $(\"#groups\").parents(\"p\")[0].id == \"ap\", \"Filtered parents check\" );\n\tok( $(\"#groups\").parents(\"div\")[0].id == \"main\", \"Filtered parents check2\" );\n\tisSet( $(\"#groups\").parents(\"p, div\").get(), q(\"ap\", \"main\"), \"Check for multiple filters\" );\n});\n\ntest(\"next/prev([String])\", function() {\n\texpect(8);\n\tok( $(\"#ap\").next()[0].id == \"foo\", \"Simple next check\" );\n\tok( $(\"#ap\").next(\"div\")[0].id == \"foo\", \"Filtered next check\" );\n\tok( $(\"#ap\").next(\"p\").length == 0, \"Filtered next check, no match\" );\n\tok( $(\"#ap\").next(\"div, p\")[0].id == \"foo\", \"Multiple filters\" );\n\t\n\tok( $(\"#foo\").prev()[0].id == \"ap\", \"Simple prev check\" );\n\tok( $(\"#foo\").prev(\"p\")[0].id == \"ap\", \"Filtered prev check\" );\n\tok( $(\"#foo\").prev(\"div\").length == 0, \"Filtered prev check, no match\" );\n\tok( $(\"#foo\").prev(\"p, div\")[0].id == \"ap\", \"Multiple filters\" );\n});\n\ntest(\"show()\", function() {\n\texpect(1);\n\tvar pass = true, div = $(\"div\");\n\tdiv.show().each(function(){\n\t  if ( this.style.display == \"none\" ) pass = false;\n\t});\n\tok( pass, \"Show\" );\n});\n\ntest(\"addClass(String)\", function() {"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[536,581],"code":"\tisSet( $(\"#foo\").siblings(\"form, b\").get(), q(\"form\", \"floatTest\"), \"Check for multiple filters\" );\r\n});\r\n\r\ntest(\"children([String])\", function() {\r\n\texpect(3);\r\n\tisSet( $(\"#foo\").children().get(), q(\"sndp\", \"en\", \"sap\"), \"Check for children\" );\r\n\tisSet( $(\"#foo\").children(\"[code]\").get(), q(\"sndp\", \"sap\"), \"Check for filtered children\" );\r\n\tisSet( $(\"#foo\").children(\"#en, #sap\").get(), q(\"en\", \"sap\"), \"Check for multiple filters\" );\r\n});\r\n\r\ntest(\"parent[s]([String])\", function() {\r\n\texpect(8);\r\n\tok( $(\"#groups\").parent()[0].id == \"ap\", \"Simple parent check\" );\r\n\tok( $(\"#groups\").parent(\"p\")[0].id == \"ap\", \"Filtered parent check\" );\r\n\tok( $(\"#groups\").parent(\"div\").length == 0, \"Filtered parent check, no match\" );\r\n\tok( $(\"#groups\").parent(\"div, p\")[0].id == \"ap\", \"Check for multiple filters\" );\r\n\t\r\n\tok( $(\"#groups\").parents()[0].id == \"ap\", \"Simple parents check\" );\r\n\tok( $(\"#groups\").parents(\"p\")[0].id == \"ap\", \"Filtered parents check\" );\r\n\tok( $(\"#groups\").parents(\"div\")[0].id == \"main\", \"Filtered parents check2\" );\r\n\tisSet( $(\"#groups\").parents(\"p, div\").get(), q(\"ap\", \"main\"), \"Check for multiple filters\" );\r\n});\r\n\r\ntest(\"next/prev([String])\", function() {\r\n\texpect(8);\r\n\tok( $(\"#ap\").next()[0].id == \"foo\", \"Simple next check\" );\r\n\tok( $(\"#ap\").next(\"div\")[0].id == \"foo\", \"Filtered next check\" );\r\n\tok( $(\"#ap\").next(\"p\").length == 0, \"Filtered next check, no match\" );\r\n\tok( $(\"#ap\").next(\"div, p\")[0].id == \"foo\", \"Multiple filters\" );\r\n\t\r\n\tok( $(\"#foo\").prev()[0].id == \"ap\", \"Simple prev check\" );\r\n\tok( $(\"#foo\").prev(\"p\")[0].id == \"ap\", \"Filtered prev check\" );\r\n\tok( $(\"#foo\").prev(\"div\").length == 0, \"Filtered prev check, no match\" );\r\n\tok( $(\"#foo\").prev(\"p, div\")[0].id == \"ap\", \"Multiple filters\" );\r\n});\r\n\r\ntest(\"show()\", function() {\r\n\texpect(1);\r\n\tvar pass = true, div = $(\"div\");\r\n\tdiv.show().each(function(){\r\n\t  if ( this.style.display == \"none\" ) pass = false;\r\n\t});\r\n\tok( pass, \"Show\" );\r\n});\r\n\r\ntest(\"addClass(String)\", function() {\r"}]},
{"id":"d1ce0fd4a9908989edc98e2e327bbe430a9a20be","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[777,781],"code":"var pass = true;\nfor ( var i = 0; i < div.size(); i++ ) {\n if ( div.get(i).className.indexOf(\"test\") == -1 ) pass = false;\n}\nok( pass, \"Add Class\" );"},{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[787,791],"code":"\tpass = true;\nfor ( var i = 0; i < div.size(); i++ ) {\n\tif ( div.get(i).className.indexOf(\"test\") != -1 ) pass = false;\n}\nok( pass, \"Remove Class\" );"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[584,588],"code":"var pass = true;\r\nfor ( var i = 0; i < div.size(); i++ ) {\r\n if ( div.get(i).className.indexOf(\"test\") == -1 ) pass = false;\r\n}\r\nok( pass, \"Add Class\" );\r"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[594,598],"code":"\tpass = true;\r\nfor ( var i = 0; i < div.size(); i++ ) {\r\n\tif ( div.get(i).className.indexOf(\"test\") != -1 ) pass = false;\r\n}\r\nok( pass, \"Remove Class\" );\r"}]},
{"id":"a3f10712ad7c7b914d0320dec87f351ec8118527","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[677,702],"code":"\tisObj( options2, options2Copy, \"Check if not modified: options2 must not be modified\" );\n});\n\ntest(\"val()\", function() {\n\texpect(2);\n\tok( $(\"#text1\").val() == \"Test\", \"Check for value of input element\" );\n\tok( !$(\"#text1\").val() == \"\", \"Check for value of input element\" );\n});\n\ntest(\"val(String)\", function() {\n\texpect(2);\n\tdocument.getElementById('text1').value = \"bla\";\n\tok( $(\"#text1\").val() == \"bla\", \"Check for modified value of input element\" );\n\t$(\"#text1\").val('test');\n\tok ( document.getElementById('text1').value == \"test\", \"Check for modified (via val(String)) value of input element\" );\n});\n\ntest(\"html(String)\", function() {\n\texpect(1);\n\tvar div = $(\"div\");\n\tdiv.html(\"<b>test</b>\");\n\tvar pass = true;\n\tfor ( var i = 0; i < div.size(); i++ ) {\n\t  if ( div.get(i).childNodes.length == 0 ) pass = false;\n\t}\n\tok( pass, \"Set HTML\" );"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[487,513],"code":"\tisSet ( options2, options2Copy, \"Check if not modified: options2 must not be modified\" );\r\n});\r\n\r\ntest(\"val()\", function() {\r\n\texpect(2);\r\n\tok( $(\"#text1\").val() == \"Test\", \"Check for value of input element\" );\r\n\tok( !$(\"#text1\").val() == \"\", \"Check for value of input element\" );\r\n});\r\n\r\ntest(\"val(String)\", function() {\r\n\texpect(2);\r\n\tdocument.getElementById('text1').value = \"bla\";\r\n\tok( $(\"#text1\").val() == \"bla\", \"Check for modified value of input element\" );\r\n\t$(\"#text1\").val('test');\r\n\tok ( document.getElementById('text1').value == \"test\", \"Check for modified (via val(String)) value of input element\" );\r\n});\r\n\r\ntest(\"html(String)\", function() {\r\n\texpect(1);\r\n\tvar div = $(\"div\");\r\n\tdiv.html(\"<b>test</b>\");\r\n\tvar pass = true;\r\n\tfor ( var i = 0; i < div.size(); i++ ) {\r\n\t  if ( div.get(i).childNodes.length == 0 ) pass = false;\r\n\t}\r\n\tok( pass, \"Set HTML\" );\r\n});\r"}]},
{"id":"7bf698ff0b72b495a0f539809b027bdf988269b8","instances":[{"path":"./jquery-data/1.1.3.1/src/ajax/ajax.js","lines":[1,53],"code":"jQuery.fn.extend({\n\n\t/**\n\t * Load HTML from a remote file and inject it into the DOM, only if it's\n\t * been modified by the server.\n\t *\n\t * @example $(\"#feeds\").loadIfModified(\"feeds.html\");\n\t * @before <div id=\"feeds\"></div>\n\t * @result <div id=\"feeds\"><b>45</b> feeds found.</div>\n\t *\n\t * @name loadIfModified\n\t * @type jQuery\n\t * @param String url The URL of the HTML file to load.\n\t * @param Map params (optional) Key/value pairs that will be sent to the server.\n\t * @param Function callback (optional) A function to be executed whenever the data is loaded (parameters: responseText, status and response itself).\n\t * @cat Ajax\n\t */\n\tloadIfModified: function( url, params, callback ) {\n\t\tthis.load( url, params, callback, 1 );\n\t},\n\n\t/**\n\t * Load HTML from a remote file and inject it into the DOM.\n\t *\n\t * Note: Avoid to use this to load scripts, instead use $.getScript.\n\t * IE strips script tags when there aren't any other characters in front of it.\n\t *\n\t * @example $(\"#feeds\").load(\"feeds.html\");\n\t * @before <div id=\"feeds\"></div>\n\t * @result <div id=\"feeds\"><b>45</b> feeds found.</div>\n\t *\n \t * @example $(\"#feeds\").load(\"feeds.html\",\n \t *   {limit: 25},\n \t *   function() { alert(\"The last 25 entries in the feed have been loaded\"); }\n \t * );\n\t * @desc Same as above, but with an additional parameter\n\t * and a callback that is executed when the data was loaded.\n\t *\n\t * @name load\n\t * @type jQuery\n\t * @param String url The URL of the HTML file to load.\n\t * @param Object params (optional) A set of key/value pairs that will be sent as data to the server.\n\t * @param Function callback (optional) A function to be executed whenever the data is loaded (parameters: responseText, status and response itself).\n\t * @cat Ajax\n\t */\n\tload: function( url, params, callback, ifModified ) {\n\t\tif ( jQuery.isFunction( url ) )\n\t\t\treturn this.bind(\"load\", url);\n\n\t\tcallback = callback || function(){};\n\n\t\t// Default to a GET request\n\t\tvar type = \"GET\";"},{"path":"./jquery-data/1.1.2/src/ajax/ajax.js","lines":[1,53],"code":"jQuery.fn.extend({\n\n\t/**\n\t * Load HTML from a remote file and inject it into the DOM, only if it's\n\t * been modified by the server.\n\t *\n\t * @example $(\"#feeds\").loadIfModified(\"feeds.html\");\n\t * @before <div id=\"feeds\"></div>\n\t * @result <div id=\"feeds\"><b>45</b> feeds found.</div>\n\t *\n\t * @name loadIfModified\n\t * @type jQuery\n\t * @param String url The URL of the HTML file to load.\n\t * @param Map params (optional) Key/value pairs that will be sent to the server.\n\t * @param Function callback (optional) A function to be executed whenever the data is loaded (parameters: responseText, status and response itself).\n\t * @cat Ajax\n\t */\n\tloadIfModified: function( url, params, callback ) {\n\t\tthis.load( url, params, callback, 1 );\n\t},\n\n\t/**\n\t * Load HTML from a remote file and inject it into the DOM.\n\t *\n\t * Note: Avoid to use this to load scripts, instead use $.getScript.\n\t * IE strips script tags when there aren't any other characters in front of it.\n\t *\n\t * @example $(\"#feeds\").load(\"feeds.html\");\n\t * @before <div id=\"feeds\"></div>\n\t * @result <div id=\"feeds\"><b>45</b> feeds found.</div>\n\t *\n \t * @example $(\"#feeds\").load(\"feeds.html\",\n \t *   {limit: 25},\n \t *   function() { alert(\"The last 25 entries in the feed have been loaded\"); }\n \t * );\n\t * @desc Same as above, but with an additional parameter\n\t * and a callback that is executed when the data was loaded.\n\t *\n\t * @name load\n\t * @type jQuery\n\t * @param String url The URL of the HTML file to load.\n\t * @param Object params (optional) A set of key/value pairs that will be sent as data to the server.\n\t * @param Function callback (optional) A function to be executed whenever the data is loaded (parameters: responseText, status and response itself).\n\t * @cat Ajax\n\t */\n\tload: function( url, params, callback, ifModified ) {\n\t\tif ( jQuery.isFunction( url ) )\n\t\t\treturn this.bind(\"load\", url);\n\n\t\tcallback = callback || function(){};\n\n\t\t// Default to a GET request\n\t\tvar type = \"GET\";"}]},
{"id":"b0e7acaa821fe9b472fc90283b93aae91720c3da","instances":[{"path":"./jquery-data/1.1.3.1/src/ajax/ajax.js","lines":[22,135],"code":"\t/**\n\t * Load HTML from a remote file and inject it into the DOM.\n\t *\n\t * Note: Avoid to use this to load scripts, instead use $.getScript.\n\t * IE strips script tags when there aren't any other characters in front of it.\n\t *\n\t * @example $(\"#feeds\").load(\"feeds.html\");\n\t * @before <div id=\"feeds\"></div>\n\t * @result <div id=\"feeds\"><b>45</b> feeds found.</div>\n\t *\n \t * @example $(\"#feeds\").load(\"feeds.html\",\n \t *   {limit: 25},\n \t *   function() { alert(\"The last 25 entries in the feed have been loaded\"); }\n \t * );\n\t * @desc Same as above, but with an additional parameter\n\t * and a callback that is executed when the data was loaded.\n\t *\n\t * @name load\n\t * @type jQuery\n\t * @param String url The URL of the HTML file to load.\n\t * @param Object params (optional) A set of key/value pairs that will be sent as data to the server.\n\t * @param Function callback (optional) A function to be executed whenever the data is loaded (parameters: responseText, status and response itself).\n\t * @cat Ajax\n\t */\n\tload: function( url, params, callback, ifModified ) {\n\t\tif ( jQuery.isFunction( url ) )\n\t\t\treturn this.bind(\"load\", url);\n\n\t\tcallback = callback || function(){};\n\n\t\t// Default to a GET request\n\t\tvar type = \"GET\";\n\n\t\t// If the second parameter was provided\n\t\tif ( params )\n\t\t\t// If it's a function\n\t\t\tif ( jQuery.isFunction( params ) ) {\n\t\t\t\t// We assume that it's the callback\n\t\t\t\tcallback = params;\n\t\t\t\tparams = null;\n\n\t\t\t// Otherwise, build a param string\n\t\t\t} else {\n\t\t\t\tparams = jQuery.param( params );\n\t\t\t\ttype = \"POST\";\n\t\t\t}\n\n\t\tvar self = this;\n\n\t\t// Request the remote document\n\t\tjQuery.ajax({\n\t\t\turl: url,\n\t\t\ttype: type,\n\t\t\tdata: params,\n\t\t\tifModified: ifModified,\n\t\t\tcomplete: function(res, status){\n\t\t\t\tif ( status == \"success\" || !ifModified && status == \"notmodified\" )\n\t\t\t\t\t// Inject the HTML into all the matched elements\n\t\t\t\t\tself.attr(\"innerHTML\", res.responseText)\n\t\t\t\t\t  // Execute all the scripts inside of the newly-injected HTML\n\t\t\t\t\t  .evalScripts()\n\t\t\t\t\t  // Execute callback\n\t\t\t\t\t  .each( callback, [res.responseText, status, res] );\n\t\t\t\telse\n\t\t\t\t\tcallback.apply( self, [res.responseText, status, res] );\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t},\n\n\t/**\n\t * Serializes a set of input elements into a string of data.\n\t * This will serialize all given elements.\n\t *\n\t * A serialization similar to the form submit of a browser is\n\t * provided by the [http://www.malsup.com/jquery/form/ Form Plugin].\n\t * It also takes multiple-selects \n\t * into account, while this method recognizes only a single option.\n\t *\n\t * @example $(\"input[@type=text]\").serialize();\n\t * @before <input type='text' name='name' value='John'/>\n\t * <input type='text' name='location' value='Boston'/>\n\t * @after name=John&amp;location=Boston\n\t * @desc Serialize a selection of input elements to a string\n\t *\n\t * @name serialize\n\t * @type String\n\t * @cat Ajax\n\t */\n\tserialize: function() {\n\t\treturn jQuery.param( this );\n\t},\n\n\t/**\n\t * Evaluate all script tags inside this jQuery. If they have a src attribute,\n\t * the script is loaded, otherwise it's content is evaluated.\n\t *\n\t * @name evalScripts\n\t * @type jQuery\n\t * @private"},{"path":"./jquery-data/1.1.2/src/ajax/ajax.js","lines":[22,135],"code":"\t/**\n\t * Load HTML from a remote file and inject it into the DOM.\n\t *\n\t * Note: Avoid to use this to load scripts, instead use $.getScript.\n\t * IE strips script tags when there aren't any other characters in front of it.\n\t *\n\t * @example $(\"#feeds\").load(\"feeds.html\");\n\t * @before <div id=\"feeds\"></div>\n\t * @result <div id=\"feeds\"><b>45</b> feeds found.</div>\n\t *\n \t * @example $(\"#feeds\").load(\"feeds.html\",\n \t *   {limit: 25},\n \t *   function() { alert(\"The last 25 entries in the feed have been loaded\"); }\n \t * );\n\t * @desc Same as above, but with an additional parameter\n\t * and a callback that is executed when the data was loaded.\n\t *\n\t * @name load\n\t * @type jQuery\n\t * @param String url The URL of the HTML file to load.\n\t * @param Object params (optional) A set of key/value pairs that will be sent as data to the server.\n\t * @param Function callback (optional) A function to be executed whenever the data is loaded (parameters: responseText, status and response itself).\n\t * @cat Ajax\n\t */\n\tload: function( url, params, callback, ifModified ) {\n\t\tif ( jQuery.isFunction( url ) )\n\t\t\treturn this.bind(\"load\", url);\n\n\t\tcallback = callback || function(){};\n\n\t\t// Default to a GET request\n\t\tvar type = \"GET\";\n\n\t\t// If the second parameter was provided\n\t\tif ( params )\n\t\t\t// If it's a function\n\t\t\tif ( jQuery.isFunction( params ) ) {\n\t\t\t\t// We assume that it's the callback\n\t\t\t\tcallback = params;\n\t\t\t\tparams = null;\n\n\t\t\t// Otherwise, build a param string\n\t\t\t} else {\n\t\t\t\tparams = jQuery.param( params );\n\t\t\t\ttype = \"POST\";\n\t\t\t}\n\n\t\tvar self = this;\n\n\t\t// Request the remote document\n\t\tjQuery.ajax({\n\t\t\turl: url,\n\t\t\ttype: type,\n\t\t\tdata: params,\n\t\t\tifModified: ifModified,\n\t\t\tcomplete: function(res, status){\n\t\t\t\tif ( status == \"success\" || !ifModified && status == \"notmodified\" )\n\t\t\t\t\t// Inject the HTML into all the matched elements\n\t\t\t\t\tself.attr(\"innerHTML\", res.responseText)\n\t\t\t\t\t  // Execute all the scripts inside of the newly-injected HTML\n\t\t\t\t\t  .evalScripts()\n\t\t\t\t\t  // Execute callback\n\t\t\t\t\t  .each( callback, [res.responseText, status, res] );\n\t\t\t\telse\n\t\t\t\t\tcallback.apply( self, [res.responseText, status, res] );\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t},\n\n\t/**\n\t * Serializes a set of input elements into a string of data.\n\t * This will serialize all given elements.\n\t *\n\t * A serialization similar to the form submit of a browser is\n\t * provided by the [http://www.malsup.com/jquery/form/ Form Plugin].\n\t * It also takes multiple-selects \n\t * into account, while this method recognizes only a single option.\n\t *\n\t * @example $(\"input[@type=text]\").serialize();\n\t * @before <input type='text' name='name' value='John'/>\n\t * <input type='text' name='location' value='Boston'/>\n\t * @after name=John&amp;location=Boston\n\t * @desc Serialize a selection of input elements to a string\n\t *\n\t * @name serialize\n\t * @type String\n\t * @cat Ajax\n\t */\n\tserialize: function() {\n\t\treturn jQuery.param( this );\n\t},\n\n\t/**\n\t * Evaluate all script tags inside this jQuery. If they have a src attribute,\n\t * the script is loaded, otherwise it's content is evaluated.\n\t *\n\t * @name evalScripts\n\t * @type jQuery\n\t * @private"}]},
{"id":"a1ca281450d0960618f94c51e511f572a4f28662","instances":[{"path":"./jquery-data/1.1.3.1/src/ajax/ajax.js","lines":[236,284],"code":"jQuery.each( \"ajaxStart,ajaxStop,ajaxComplete,ajaxError,ajaxSuccess,ajaxSend\".split(\",\"), function(i,o){\n\tjQuery.fn[o] = function(f){\n\t\treturn this.bind(o, f);\n\t};\n});\n\njQuery.extend({\n\n\t/**\n\t * Load a remote page using an HTTP GET request.\n\t *\n\t * This is an easy way to send a simple GET request to a server\n\t * without having to use the more complex $.ajax function. It\n\t * allows a single callback function to be specified that will\n\t * be executed when the request is complete (and only if the response\n\t * has a successful response code). If you need to have both error\n\t * and success callbacks, you may want to use $.ajax.\n\t *\n\t * @example $.get(\"test.cgi\");\n\t *\n\t * @example $.get(\"test.cgi\", { name: \"John\", time: \"2pm\" } );\n\t *\n\t * @example $.get(\"test.cgi\", function(data){\n\t *   alert(\"Data Loaded: \" + data);\n\t * });\n\t *\n\t * @example $.get(\"test.cgi\",\n\t *   { name: \"John\", time: \"2pm\" },\n\t *   function(data){\n\t *     alert(\"Data Loaded: \" + data);\n\t *   }\n\t * );\n\t *\n\t * @name $.get\n\t * @type XMLHttpRequest\n\t * @param String url The URL of the page to load.\n\t * @param Map params (optional) Key/value pairs that will be sent to the server.\n\t * @param Function callback (optional) A function to be executed whenever the data is loaded successfully.\n\t * @cat Ajax\n\t */\n\tget: function( url, data, callback, type, ifModified ) {\n\t\t// shift arguments if data argument was ommited\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\tcallback = data;\n\t\t\tdata = null;\n\t\t}\n\t\t\n\t\treturn jQuery.ajax({\n\t\t\ttype: \"GET\","},{"path":"./jquery-data/1.1.2/src/ajax/ajax.js","lines":[242,290],"code":"jQuery.each( \"ajaxStart,ajaxStop,ajaxComplete,ajaxError,ajaxSuccess,ajaxSend\".split(\",\"), function(i,o){\n\tjQuery.fn[o] = function(f){\n\t\treturn this.bind(o, f);\n\t};\n});\n\njQuery.extend({\n\n\t/**\n\t * Load a remote page using an HTTP GET request.\n\t *\n\t * This is an easy way to send a simple GET request to a server\n\t * without having to use the more complex $.ajax function. It\n\t * allows a single callback function to be specified that will\n\t * be executed when the request is complete (and only if the response\n\t * has a successful response code). If you need to have both error\n\t * and success callbacks, you may want to use $.ajax.\n\t *\n\t * @example $.get(\"test.cgi\");\n\t *\n\t * @example $.get(\"test.cgi\", { name: \"John\", time: \"2pm\" } );\n\t *\n\t * @example $.get(\"test.cgi\", function(data){\n\t *   alert(\"Data Loaded: \" + data);\n\t * });\n\t *\n\t * @example $.get(\"test.cgi\",\n\t *   { name: \"John\", time: \"2pm\" },\n\t *   function(data){\n\t *     alert(\"Data Loaded: \" + data);\n\t *   }\n\t * );\n\t *\n\t * @name $.get\n\t * @type XMLHttpRequest\n\t * @param String url The URL of the page to load.\n\t * @param Map params (optional) Key/value pairs that will be sent to the server.\n\t * @param Function callback (optional) A function to be executed whenever the data is loaded successfully.\n\t * @cat Ajax\n\t */\n\tget: function( url, data, callback, type, ifModified ) {\n\t\t// shift arguments if data argument was ommited\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\tcallback = data;\n\t\t\tdata = null;\n\t\t}\n\t\t\n\t\treturn jQuery.ajax({\n\t\t\turl: url,"}]},
{"id":"5b1eae73177addcfb18712bc50fb5d8f96e44e12","instances":[{"path":"./jquery-data/1.1.3.1/src/ajax/ajax.js","lines":[244,433],"code":"/**\n * Load a remote page using an HTTP GET request.\n *\n * This is an easy way to send a simple GET request to a server\n * without having to use the more complex $.ajax function. It\n * allows a single callback function to be specified that will\n * be executed when the request is complete (and only if the response\n * has a successful response code). If you need to have both error\n * and success callbacks, you may want to use $.ajax.\n *\n * @example $.get(\"test.cgi\");\n *\n * @example $.get(\"test.cgi\", { name: \"John\", time: \"2pm\" } );\n *\n * @example $.get(\"test.cgi\", function(data){\n *   alert(\"Data Loaded: \" + data);\n * });\n *\n * @example $.get(\"test.cgi\",\n *   { name: \"John\", time: \"2pm\" },\n *   function(data){\n *     alert(\"Data Loaded: \" + data);\n *   }\n * );\n *\n * @name $.get\n * @type XMLHttpRequest\n * @param String url The URL of the page to load.\n * @param Map params (optional) Key/value pairs that will be sent to the server.\n * @param Function callback (optional) A function to be executed whenever the data is loaded successfully.\n * @cat Ajax\n */\nget: function( url, data, callback, type, ifModified ) {\n\t// shift arguments if data argument was ommited\n\tif ( jQuery.isFunction( data ) ) {\n\t\tcallback = data;\n\t\tdata = null;\n\t}\n\t\n\treturn jQuery.ajax({\n\t\ttype: \"GET\",\n\t\turl: url,\n\t\tdata: data,\n\t\tsuccess: callback,\n\t\tdataType: type,\n\t\tifModified: ifModified\n\t});\n},\n\n/**\n * Load a remote page using an HTTP GET request, only if it hasn't\n * been modified since it was last retrieved.\n *\n * @example $.getIfModified(\"test.html\");\n *\n * @example $.getIfModified(\"test.html\", { name: \"John\", time: \"2pm\" } );\n *\n * @example $.getIfModified(\"test.cgi\", function(data){\n *   alert(\"Data Loaded: \" + data);\n * });\n *\n * @example $.getifModified(\"test.cgi\",\n *   { name: \"John\", time: \"2pm\" },\n *   function(data){\n *     alert(\"Data Loaded: \" + data);\n *   }\n * );\n *\n * @name $.getIfModified\n * @type XMLHttpRequest\n * @param String url The URL of the page to load.\n * @param Map params (optional) Key/value pairs that will be sent to the server.\n * @param Function callback (optional) A function to be executed whenever the data is loaded successfully.\n * @cat Ajax\n */\ngetIfModified: function( url, data, callback, type ) {\n\treturn jQuery.get(url, data, callback, type, 1);\n},\n\n/**\n * Loads, and executes, a remote JavaScript file using an HTTP GET request.\n *\n * Warning: Safari <= 2.0.x is unable to evaluate scripts in a global\n * context synchronously. If you load functions via getScript, make sure\n * to call them after a delay.\n *\n * @example $.getScript(\"test.js\");\n *\n * @example $.getScript(\"test.js\", function(){\n *   alert(\"Script loaded and executed.\");\n * });\n *\n * @name $.getScript\n * @type XMLHttpRequest\n * @param String url The URL of the page to load.\n * @param Function callback (optional) A function to be executed whenever the data is loaded successfully.\n * @cat Ajax\n */\ngetScript: function( url, callback ) {\n\treturn jQuery.get(url, null, callback, \"script\");"},{"path":"./jquery-data/1.1.2/src/ajax/ajax.js","lines":[250,441],"code":"/**\n * Load a remote page using an HTTP GET request.\n *\n * This is an easy way to send a simple GET request to a server\n * without having to use the more complex $.ajax function. It\n * allows a single callback function to be specified that will\n * be executed when the request is complete (and only if the response\n * has a successful response code). If you need to have both error\n * and success callbacks, you may want to use $.ajax.\n *\n * @example $.get(\"test.cgi\");\n *\n * @example $.get(\"test.cgi\", { name: \"John\", time: \"2pm\" } );\n *\n * @example $.get(\"test.cgi\", function(data){\n *   alert(\"Data Loaded: \" + data);\n * });\n *\n * @example $.get(\"test.cgi\",\n *   { name: \"John\", time: \"2pm\" },\n *   function(data){\n *     alert(\"Data Loaded: \" + data);\n *   }\n * );\n *\n * @name $.get\n * @type XMLHttpRequest\n * @param String url The URL of the page to load.\n * @param Map params (optional) Key/value pairs that will be sent to the server.\n * @param Function callback (optional) A function to be executed whenever the data is loaded successfully.\n * @cat Ajax\n */\nget: function( url, data, callback, type, ifModified ) {\n\t// shift arguments if data argument was ommited\n\tif ( jQuery.isFunction( data ) ) {\n\t\tcallback = data;\n\t\tdata = null;\n\t}\n\t\n\treturn jQuery.ajax({\n\t\turl: url,\n\t\tdata: data,\n\t\tsuccess: callback,\n\t\tdataType: type,\n\t\tifModified: ifModified\n\t});\n},\n\n/**\n * Load a remote page using an HTTP GET request, only if it hasn't\n * been modified since it was last retrieved.\n *\n * @example $.getIfModified(\"test.html\");\n *\n * @example $.getIfModified(\"test.html\", { name: \"John\", time: \"2pm\" } );\n *\n * @example $.getIfModified(\"test.cgi\", function(data){\n *   alert(\"Data Loaded: \" + data);\n * });\n *\n * @example $.getifModified(\"test.cgi\",\n *   { name: \"John\", time: \"2pm\" },\n *   function(data){\n *     alert(\"Data Loaded: \" + data);\n *   }\n * );\n *\n * @name $.getIfModified\n * @type XMLHttpRequest\n * @param String url The URL of the page to load.\n * @param Map params (optional) Key/value pairs that will be sent to the server.\n * @param Function callback (optional) A function to be executed whenever the data is loaded successfully.\n * @cat Ajax\n */\ngetIfModified: function( url, data, callback, type ) {\n\treturn jQuery.get(url, data, callback, type, 1);\n},\n\n/**\n * Loads, and executes, a remote JavaScript file using an HTTP GET request.\n *\n * Warning: Safari <= 2.0.x is unable to evaluate scripts in a global\n * context synchronously. If you load functions via getScript, make sure\n * to call them after a delay.\n *\n * @example $.getScript(\"test.js\");\n *\n * @example $.getScript(\"test.js\", function(){\n *   alert(\"Script loaded and executed.\");\n * });\n *\n * @name $.getScript\n * @type XMLHttpRequest\n * @param String url The URL of the page to load.\n * @param Function callback (optional) A function to be executed whenever the data is loaded successfully.\n * @cat Ajax\n */\ngetScript: function( url, callback ) {\n\treturn jQuery.get(url, null, callback, \"script\");\n},"}]},
{"id":"713d38ea8411a1fceec072ac25af91db1a2eeac8","instances":[{"path":"./jquery-data/1.1.3.1/src/ajax/ajax.js","lines":[411,618],"code":"/**\n * Set the timeout in milliseconds of all AJAX requests to a specific amount of time.\n * This will make all future AJAX requests timeout after a specified amount\n * of time.\n *\n * Set to null or 0 to disable timeouts (default).\n *\n * You can manually abort requests with the XMLHttpRequest's (returned by\n * all ajax functions) abort() method.\n *\n * Deprecated. Use $.ajaxSetup instead.\n *\n * @example $.ajaxTimeout( 5000 );\n * @desc Make all AJAX requests timeout after 5 seconds.\n *\n * @name $.ajaxTimeout\n * @type undefined\n * @param Number time How long before an AJAX request times out, in milliseconds.\n * @cat Ajax\n */\najaxTimeout: function( timeout ) {\n\tjQuery.ajaxSettings.timeout = timeout;\n},\n\n/**\n * Setup global settings for AJAX requests.\n *\n * See $.ajax for a description of all available options.\n *\n * @example $.ajaxSetup( {\n *   url: \"/xmlhttp/\",\n *   global: false,\n *   type: \"POST\"\n * } );\n * $.ajax({ data: myData });\n * @desc Sets the defaults for AJAX requests to the url \"/xmlhttp/\",\n * disables global handlers and uses POST instead of GET. The following\n * AJAX requests then sends some data without having to set anything else.\n *\n * @name $.ajaxSetup\n * @type undefined\n * @param Map settings Key/value pairs to use for all AJAX requests\n * @cat Ajax\n */\najaxSetup: function( settings ) {\n\tjQuery.extend( jQuery.ajaxSettings, settings );\n},\n\najaxSettings: {\n\tglobal: true,\n\ttype: \"GET\",\n\ttimeout: 0,\n\tcontentType: \"application/x-www-form-urlencoded\",\n\tprocessData: true,\n\tasync: true,\n\tdata: null\n},\n\n// Last-Modified header cache for next request\nlastModified: {},\n\n/**\n * Load a remote page using an HTTP request.\n *\n * This is jQuery's low-level AJAX implementation. See $.get, $.post etc. for\n * higher-level abstractions that are often easier to understand and use,\n * but don't offer as much functionality (such as error callbacks).\n *\n * $.ajax() returns the XMLHttpRequest that it creates. In most cases you won't\n * need that object to manipulate directly, but it is available if you need to\n * abort the request manually.\n *\n * '''Note:''' If you specify the dataType option described below, make sure\n * the server sends the correct MIME type in the response (eg. xml as \"text/xml\").\n * Sending the wrong MIME type can lead to unexpected problems in your script.\n * See [[Specifying the Data Type for AJAX Requests]] for more information.\n *\n * Supported datatypes are (see dataType option):\n *\n * \"xml\": Returns a XML document that can be processed via jQuery.\n *\n * \"html\": Returns HTML as plain text, included script tags are evaluated.\n *\n * \"script\": Evaluates the response as Javascript and returns it as plain text.\n *\n * \"json\": Evaluates the response as JSON and returns a Javascript Object\n *\n * $.ajax() takes one argument, an object of key/value pairs, that are\n * used to initalize and handle the request. These are all the key/values that can\n * be used:\n *\n * (String) url - The URL to request.\n *\n * (String) type - The type of request to make (\"POST\" or \"GET\"), default is \"GET\".\n *\n * (String) dataType - The type of data that you're expecting back from\n * the server. No default: If the server sends xml, the responseXML, otherwise\n * the responseText is passed to the success callback.\n *\n * (Boolean) ifModified - Allow the request to be successful only if the"},{"path":"./jquery-data/1.1.2/src/ajax/ajax.js","lines":[419,626],"code":"/**\n * Set the timeout of all AJAX requests to a specific amount of time.\n * This will make all future AJAX requests timeout after a specified amount\n * of time.\n *\n * Set to null or 0 to disable timeouts (default).\n *\n * You can manually abort requests with the XMLHttpRequest's (returned by\n * all ajax functions) abort() method.\n *\n * Deprecated. Use $.ajaxSetup instead.\n *\n * @example $.ajaxTimeout( 5000 );\n * @desc Make all AJAX requests timeout after 5 seconds.\n *\n * @name $.ajaxTimeout\n * @type undefined\n * @param Number time How long before an AJAX request times out.\n * @cat Ajax\n */\najaxTimeout: function( timeout ) {\n\tjQuery.ajaxSettings.timeout = timeout;\n},\n\n/**\n * Setup global settings for AJAX requests.\n *\n * See $.ajax for a description of all available options.\n *\n * @example $.ajaxSetup( {\n *   url: \"/xmlhttp/\",\n *   global: false,\n *   type: \"POST\"\n * } );\n * $.ajax({ data: myData });\n * @desc Sets the defaults for AJAX requests to the url \"/xmlhttp/\",\n * disables global handlers and uses POST instead of GET. The following\n * AJAX requests then sends some data without having to set anything else.\n *\n * @name $.ajaxSetup\n * @type undefined\n * @param Map settings Key/value pairs to use for all AJAX requests\n * @cat Ajax\n */\najaxSetup: function( settings ) {\n\tjQuery.extend( jQuery.ajaxSettings, settings );\n},\n\najaxSettings: {\n\tglobal: true,\n\ttype: \"GET\",\n\ttimeout: 0,\n\tcontentType: \"application/x-www-form-urlencoded\",\n\tprocessData: true,\n\tasync: true,\n\tdata: null\n},\n\n// Last-Modified header cache for next request\nlastModified: {},\n\n/**\n * Load a remote page using an HTTP request.\n *\n * This is jQuery's low-level AJAX implementation. See $.get, $.post etc. for\n * higher-level abstractions that are often easier to understand and use,\n * but don't offer as much functionality (such as error callbacks).\n *\n * $.ajax() returns the XMLHttpRequest that it creates. In most cases you won't\n * need that object to manipulate directly, but it is available if you need to\n * abort the request manually.\n *\n * '''Note:''' If you specify the dataType option described below, make sure\n * the server sends the correct MIME type in the response (eg. xml as \"text/xml\").\n * Sending the wrong MIME type can lead to unexpected problems in your script.\n * See [[Specifying the Data Type for AJAX Requests]] for more information.\n *\n * Supported datatypes are (see dataType option):\n *\n * \"xml\": Returns a XML document that can be processed via jQuery.\n *\n * \"html\": Returns HTML as plain text, included script tags are evaluated.\n *\n * \"script\": Evaluates the response as Javascript and returns it as plain text.\n *\n * \"json\": Evaluates the response as JSON and returns a Javascript Object\n *\n * $.ajax() takes one argument, an object of key/value pairs, that are\n * used to initalize and handle the request. These are all the key/values that can\n * be used:\n *\n * (String) url - The URL to request.\n *\n * (String) type - The type of request to make (\"POST\" or \"GET\"), default is \"GET\".\n *\n * (String) dataType - The type of data that you're expecting back from\n * the server. No default: If the server sends xml, the responseXML, otherwise\n * the responseText is passed to the success callback.\n *\n * (Boolean) ifModified - Allow the request to be successful only if the"}]},
{"id":"023b85f2eb11a255abf2900a8a3b32bf644da166","instances":[{"path":"./jquery-data/1.1.3.1/src/ajax/ajax.js","lines":[638,707],"code":"if( s.beforeSend )\n\ts.beforeSend(xml);\n\t\nif ( s.global )\n    jQuery.event.trigger(\"ajaxSend\", [xml, s]);\n\n// Wait for a response to come back\nvar onreadystatechange = function(isTimeout){\n\t// The transfer is complete and the data is available, or the request timed out\n\tif ( xml && (xml.readyState == 4 || isTimeout == \"timeout\") ) {\n\t\trequestDone = true;\n\t\t\n\t\t// clear poll interval\n\t\tif (ival) {\n\t\t\tclearInterval(ival);\n\t\t\tival = null;\n\t\t}\n\t\t\n\t\tvar status;\n\t\ttry {\n\t\t\tstatus = jQuery.httpSuccess( xml ) && isTimeout != \"timeout\" ?\n\t\t\t\ts.ifModified && jQuery.httpNotModified( xml, s.url ) ? \"notmodified\" : \"success\" : \"error\";\n\t\t\t// Make sure that the request was successful or notmodified\n\t\t\tif ( status != \"error\" ) {\n\t\t\t\t// Cache Last-Modified header, if ifModified mode.\n\t\t\t\tvar modRes;\n\t\t\t\ttry {\n\t\t\t\t\tmodRes = xml.getResponseHeader(\"Last-Modified\");\n\t\t\t\t} catch(e) {} // swallow exception thrown by FF if header is not available\n\t\n\t\t\t\tif ( s.ifModified && modRes )\n\t\t\t\t\tjQuery.lastModified[s.url] = modRes;\n\t\n\t\t\t\t// process the data (runs the xml through httpData regardless of callback)\n\t\t\t\tvar data = jQuery.httpData( xml, s.dataType );\n\t\n\t\t\t\t// If a local callback was specified, fire it and pass it the data\n\t\t\t\tif ( s.success )\n\t\t\t\t\ts.success( data, status );\n\t\n\t\t\t\t// Fire the global callback\n\t\t\t\tif( s.global )\n\t\t\t\t\tjQuery.event.trigger( \"ajaxSuccess\", [xml, s] );\n\t\t\t} else\n\t\t\t\tjQuery.handleError(s, xml, status);\n\t\t} catch(e) {\n\t\t\tstatus = \"error\";\n\t\t\tjQuery.handleError(s, xml, status, e);\n\t\t}\n\n\t\t// The request was completed\n\t\tif( s.global )\n\t\t\tjQuery.event.trigger( \"ajaxComplete\", [xml, s] );\n\n\t\t// Handle the global AJAX counter\n\t\tif ( s.global && ! --jQuery.active )\n\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\n\t\t// Process result\n\t\tif ( s.complete )\n\t\t\ts.complete(xml, status);\n\n\t\t// Stop memory leaks\n\t\tif(s.async)\n\t\t\txml = null;\n\t}\n};\n\n// don't attach the handler to the request, just poll it instead\nvar ival = setInterval(onreadystatechange, 13); "},{"path":"./jquery-data/1.1.2/src/ajax/ajax.js","lines":[649,718],"code":"if( s.beforeSend )\n\ts.beforeSend(xml);\n\t\nif ( s.global )\n    jQuery.event.trigger(\"ajaxSend\", [xml, s]);\n\n// Wait for a response to come back\nvar onreadystatechange = function(isTimeout){\n\t// The transfer is complete and the data is available, or the request timed out\n\tif ( xml && (xml.readyState == 4 || isTimeout == \"timeout\") ) {\n\t\trequestDone = true;\n\t\t\n\t\t// clear poll interval\n\t\tif (ival) {\n\t\t\tclearInterval(ival);\n\t\t\tival = null;\n\t\t}\n\t\t\n\t\tvar status;\n\t\ttry {\n\t\t\tstatus = jQuery.httpSuccess( xml ) && isTimeout != \"timeout\" ?\n\t\t\t\ts.ifModified && jQuery.httpNotModified( xml, s.url ) ? \"notmodified\" : \"success\" : \"error\";\n\t\t\t// Make sure that the request was successful or notmodified\n\t\t\tif ( status != \"error\" ) {\n\t\t\t\t// Cache Last-Modified header, if ifModified mode.\n\t\t\t\tvar modRes;\n\t\t\t\ttry {\n\t\t\t\t\tmodRes = xml.getResponseHeader(\"Last-Modified\");\n\t\t\t\t} catch(e) {} // swallow exception thrown by FF if header is not available\n\t\n\t\t\t\tif ( s.ifModified && modRes )\n\t\t\t\t\tjQuery.lastModified[s.url] = modRes;\n\t\n\t\t\t\t// process the data (runs the xml through httpData regardless of callback)\n\t\t\t\tvar data = jQuery.httpData( xml, s.dataType );\n\t\n\t\t\t\t// If a local callback was specified, fire it and pass it the data\n\t\t\t\tif ( s.success )\n\t\t\t\t\ts.success( data, status );\n\t\n\t\t\t\t// Fire the global callback\n\t\t\t\tif( s.global )\n\t\t\t\t\tjQuery.event.trigger( \"ajaxSuccess\", [xml, s] );\n\t\t\t} else\n\t\t\t\tjQuery.handleError(s, xml, status);\n\t\t} catch(e) {\n\t\t\tstatus = \"error\";\n\t\t\tjQuery.handleError(s, xml, status, e);\n\t\t}\n\n\t\t// The request was completed\n\t\tif( s.global )\n\t\t\tjQuery.event.trigger( \"ajaxComplete\", [xml, s] );\n\n\t\t// Handle the global AJAX counter\n\t\tif ( s.global && ! --jQuery.active )\n\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\n\t\t// Process result\n\t\tif ( s.complete )\n\t\t\ts.complete(xml, status);\n\n\t\t// Stop memory leaks\n\t\tif(s.async)\n\t\t\txml = null;\n\t}\n};\n\n// don't attach the handler to the request, just poll it instead\nvar ival = setInterval(onreadystatechange, 13); "}]},
{"id":"a151f8fcb1b04507b57907ff4c4bab81333c52dd","instances":[{"path":"./jquery-data/1.1.3.1/src/ajax/ajax.js","lines":[472,788],"code":"/**\n * Load a remote page using an HTTP request.\n *\n * This is jQuery's low-level AJAX implementation. See $.get, $.post etc. for\n * higher-level abstractions that are often easier to understand and use,\n * but don't offer as much functionality (such as error callbacks).\n *\n * $.ajax() returns the XMLHttpRequest that it creates. In most cases you won't\n * need that object to manipulate directly, but it is available if you need to\n * abort the request manually.\n *\n * '''Note:''' If you specify the dataType option described below, make sure\n * the server sends the correct MIME type in the response (eg. xml as \"text/xml\").\n * Sending the wrong MIME type can lead to unexpected problems in your script.\n * See [[Specifying the Data Type for AJAX Requests]] for more information.\n *\n * Supported datatypes are (see dataType option):\n *\n * \"xml\": Returns a XML document that can be processed via jQuery.\n *\n * \"html\": Returns HTML as plain text, included script tags are evaluated.\n *\n * \"script\": Evaluates the response as Javascript and returns it as plain text.\n *\n * \"json\": Evaluates the response as JSON and returns a Javascript Object\n *\n * $.ajax() takes one argument, an object of key/value pairs, that are\n * used to initalize and handle the request. These are all the key/values that can\n * be used:\n *\n * (String) url - The URL to request.\n *\n * (String) type - The type of request to make (\"POST\" or \"GET\"), default is \"GET\".\n *\n * (String) dataType - The type of data that you're expecting back from\n * the server. No default: If the server sends xml, the responseXML, otherwise\n * the responseText is passed to the success callback.\n *\n * (Boolean) ifModified - Allow the request to be successful only if the\n * response has changed since the last request. This is done by checking the\n * Last-Modified header. Default value is false, ignoring the header.\n *\n * (Number) timeout - Local timeout in milliseconds to override global timeout, eg. to give a\n * single request a longer timeout while all others timeout after 1 second.\n * See $.ajaxTimeout() for global timeouts.\n *\n * (Boolean) global - Whether to trigger global AJAX event handlers for\n * this request, default is true. Set to false to prevent that global handlers\n * like ajaxStart or ajaxStop are triggered.\n *\n * (Function) error - A function to be called if the request fails. The\n * function gets passed tree arguments: The XMLHttpRequest object, a\n * string describing the type of error that occurred and an optional\n * exception object, if one occured.\n *\n * (Function) success - A function to be called if the request succeeds. The\n * function gets passed one argument: The data returned from the server,\n * formatted according to the 'dataType' parameter.\n *\n * (Function) complete - A function to be called when the request finishes. The\n * function gets passed two arguments: The XMLHttpRequest object and a\n * string describing the type of success of the request.\n *\n\t * (Object|String) data - Data to be sent to the server. Converted to a query\n * string, if not already a string. Is appended to the url for GET-requests.\n * See processData option to prevent this automatic processing.\n *\n * (String) contentType - When sending data to the server, use this content-type.\n * Default is \"application/x-www-form-urlencoded\", which is fine for most cases.\n *\n * (Boolean) processData - By default, data passed in to the data option as an object\n * other as string will be processed and transformed into a query string, fitting to\n * the default content-type \"application/x-www-form-urlencoded\". If you want to send\n * DOMDocuments, set this option to false.\n *\n * (Boolean) async - By default, all requests are sent asynchronous (set to true).\n * If you need synchronous requests, set this option to false.\n *\n * (Function) beforeSend - A pre-callback to set custom headers etc., the\n * XMLHttpRequest is passed as the only argument.\n *\n * @example $.ajax({\n *   type: \"GET\",\n *   url: \"test.js\",\n *   dataType: \"script\"\n * })\n * @desc Load and execute a JavaScript file.\n *\n * @example $.ajax({\n *   type: \"POST\",\n *   url: \"some.php\",\n *   data: \"name=John&location=Boston\",\n *   success: function(msg){\n *     alert( \"Data Saved: \" + msg );\n *   }\n * });\n * @desc Save some data to the server and notify the user once its complete.\n *\n * @example var html = $.ajax({\n *  url: \"some.php\","},{"path":"./jquery-data/1.1.2/src/ajax/ajax.js","lines":[480,799],"code":"/**\n * Load a remote page using an HTTP request.\n *\n * This is jQuery's low-level AJAX implementation. See $.get, $.post etc. for\n * higher-level abstractions that are often easier to understand and use,\n * but don't offer as much functionality (such as error callbacks).\n *\n * $.ajax() returns the XMLHttpRequest that it creates. In most cases you won't\n * need that object to manipulate directly, but it is available if you need to\n * abort the request manually.\n *\n * '''Note:''' If you specify the dataType option described below, make sure\n * the server sends the correct MIME type in the response (eg. xml as \"text/xml\").\n * Sending the wrong MIME type can lead to unexpected problems in your script.\n * See [[Specifying the Data Type for AJAX Requests]] for more information.\n *\n * Supported datatypes are (see dataType option):\n *\n * \"xml\": Returns a XML document that can be processed via jQuery.\n *\n * \"html\": Returns HTML as plain text, included script tags are evaluated.\n *\n * \"script\": Evaluates the response as Javascript and returns it as plain text.\n *\n * \"json\": Evaluates the response as JSON and returns a Javascript Object\n *\n * $.ajax() takes one argument, an object of key/value pairs, that are\n * used to initalize and handle the request. These are all the key/values that can\n * be used:\n *\n * (String) url - The URL to request.\n *\n * (String) type - The type of request to make (\"POST\" or \"GET\"), default is \"GET\".\n *\n * (String) dataType - The type of data that you're expecting back from\n * the server. No default: If the server sends xml, the responseXML, otherwise\n * the responseText is passed to the success callback.\n *\n * (Boolean) ifModified - Allow the request to be successful only if the\n * response has changed since the last request. This is done by checking the\n * Last-Modified header. Default value is false, ignoring the header.\n *\n * (Number) timeout - Local timeout to override global timeout, eg. to give a\n * single request a longer timeout while all others timeout after 1 second.\n * See $.ajaxTimeout() for global timeouts.\n *\n * (Boolean) global - Whether to trigger global AJAX event handlers for\n * this request, default is true. Set to false to prevent that global handlers\n * like ajaxStart or ajaxStop are triggered.\n *\n * (Function) error - A function to be called if the request fails. The\n * function gets passed tree arguments: The XMLHttpRequest object, a\n * string describing the type of error that occurred and an optional\n * exception object, if one occured.\n *\n * (Function) success - A function to be called if the request succeeds. The\n * function gets passed one argument: The data returned from the server,\n * formatted according to the 'dataType' parameter.\n *\n * (Function) complete - A function to be called when the request finishes. The\n * function gets passed two arguments: The XMLHttpRequest object and a\n * string describing the type of success of the request.\n *\n\t * (Object|String) data - Data to be sent to the server. Converted to a query\n * string, if not already a string. Is appended to the url for GET-requests.\n * See processData option to prevent this automatic processing.\n *\n * (String) contentType - When sending data to the server, use this content-type.\n * Default is \"application/x-www-form-urlencoded\", which is fine for most cases.\n *\n * (Boolean) processData - By default, data passed in to the data option as an object\n * other as string will be processed and transformed into a query string, fitting to\n * the default content-type \"application/x-www-form-urlencoded\". If you want to send\n * DOMDocuments, set this option to false.\n *\n * (Boolean) async - By default, all requests are sent asynchronous (set to true).\n * If you need synchronous requests, set this option to false.\n *\n * (Function) beforeSend - A pre-callback to set custom headers etc., the\n * XMLHttpRequest is passed as the only argument.\n *\n * @example $.ajax({\n *   type: \"GET\",\n *   url: \"test.js\",\n *   dataType: \"script\"\n * })\n * @desc Load and execute a JavaScript file.\n *\n * @example $.ajax({\n *   type: \"POST\",\n *   url: \"some.php\",\n *   data: \"name=John&location=Boston\",\n *   success: function(msg){\n *     alert( \"Data Saved: \" + msg );\n *   }\n * });\n * @desc Save some data to the server and notify the user once its complete.\n *\n * @example var html = $.ajax({\n *  url: \"some.php\","}]},
{"id":"8f9071a7a9e06ba30f260ec9fdfb1240fcfbf89f","instances":[{"path":"./jquery-data/1.1.3.1/src/ajax/ajax.js","lines":[771,820],"code":"/* Get the data out of an XMLHttpRequest.\n * Return parsed XML if content-type header is \"xml\" and type is \"xml\" or omitted,\n * otherwise return plain text.\n * (String) data - The type of data that you're expecting back,\n * (e.g. \"xml\", \"html\", \"script\")\n */\nhttpData: function( r, type ) {\n\tvar ct = r.getResponseHeader(\"content-type\");\n\tvar data = !type && ct && ct.indexOf(\"xml\") >= 0;\n\tdata = type == \"xml\" || data ? r.responseXML : r.responseText;\n\n\t// If the type is \"script\", eval it in global context\n\tif ( type == \"script\" )\n\t\tjQuery.globalEval( data );\n\n\t// Get the JavaScript object, if JSON is used.\n\tif ( type == \"json\" )\n\t\tdata = eval(\"(\" + data + \")\");\n\n\t// evaluate scripts within html\n\tif ( type == \"html\" )\n\t\tjQuery(\"<div>\").html(data).evalScripts();\n\n\treturn data;\n},\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\nparam: function( a ) {\n\tvar s = [];\n\n\t// If an array was passed in, assume that it is an array\n\t// of form elements\n\tif ( a.constructor == Array || a.jquery )\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function(){\n\t\t\ts.push( encodeURIComponent(this.name) + \"=\" + encodeURIComponent( this.value ) );\n\t\t});\n\n\t// Otherwise, assume that it's an object of key/value pairs\n\telse\n\t\t// Serialize the key/values\n\t\tfor ( var j in a )\n\t\t\t// If the value is an array then the key names need to be repeated\n\t\t\tif ( a[j] && a[j].constructor == Array )\n\t\t\t\tjQuery.each( a[j], function(){\n\t\t\t\t\ts.push( encodeURIComponent(j) + \"=\" + encodeURIComponent( this ) );\n\t\t\t\t});\n\t\t\telse\n\t\t\t\ts.push( encodeURIComponent(j) + \"=\" + encodeURIComponent( a[j] ) );"},{"path":"./jquery-data/1.1.2/src/ajax/ajax.js","lines":[782,831],"code":"/* Get the data out of an XMLHttpRequest.\n * Return parsed XML if content-type header is \"xml\" and type is \"xml\" or omitted,\n * otherwise return plain text.\n * (String) data - The type of data that you're expecting back,\n * (e.g. \"xml\", \"html\", \"script\")\n */\nhttpData: function( r, type ) {\n\tvar ct = r.getResponseHeader(\"content-type\");\n\tvar data = !type && ct && ct.indexOf(\"xml\") >= 0;\n\tdata = type == \"xml\" || data ? r.responseXML : r.responseText;\n\n\t// If the type is \"script\", eval it in global context\n\tif ( type == \"script\" )\n\t\tjQuery.globalEval( data );\n\n\t// Get the JavaScript object, if JSON is used.\n\tif ( type == \"json\" )\n\t\teval( \"data = \" + data );\n\n\t// evaluate scripts within html\n\tif ( type == \"html\" )\n\t\tjQuery(\"<div>\").html(data).evalScripts();\n\n\treturn data;\n},\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\nparam: function( a ) {\n\tvar s = [];\n\n\t// If an array was passed in, assume that it is an array\n\t// of form elements\n\tif ( a.constructor == Array || a.jquery )\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function(){\n\t\t\ts.push( encodeURIComponent(this.name) + \"=\" + encodeURIComponent( this.value ) );\n\t\t});\n\n\t// Otherwise, assume that it's an object of key/value pairs\n\telse\n\t\t// Serialize the key/values\n\t\tfor ( var j in a )\n\t\t\t// If the value is an array then the key names need to be repeated\n\t\t\tif ( a[j] && a[j].constructor == Array )\n\t\t\t\tjQuery.each( a[j], function(){\n\t\t\t\t\ts.push( encodeURIComponent(j) + \"=\" + encodeURIComponent( this ) );\n\t\t\t\t});\n\t\t\telse\n\t\t\t\ts.push( encodeURIComponent(j) + \"=\" + encodeURIComponent( a[j] ) );"}]},
{"id":"e1c0d3ba564fdcdc1d3e9fcd203d05067471b4e3","instances":[{"path":"./jquery-data/1.1.3.1/src/ajax/ajax.js","lines":[797,836],"code":"// Serialize an array of form elements or a set of\n// key/values into a query string\nparam: function( a ) {\n\tvar s = [];\n\n\t// If an array was passed in, assume that it is an array\n\t// of form elements\n\tif ( a.constructor == Array || a.jquery )\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function(){\n\t\t\ts.push( encodeURIComponent(this.name) + \"=\" + encodeURIComponent( this.value ) );\n\t\t});\n\n\t// Otherwise, assume that it's an object of key/value pairs\n\telse\n\t\t// Serialize the key/values\n\t\tfor ( var j in a )\n\t\t\t// If the value is an array then the key names need to be repeated\n\t\t\tif ( a[j] && a[j].constructor == Array )\n\t\t\t\tjQuery.each( a[j], function(){\n\t\t\t\t\ts.push( encodeURIComponent(j) + \"=\" + encodeURIComponent( this ) );\n\t\t\t\t});\n\t\t\telse\n\t\t\t\ts.push( encodeURIComponent(j) + \"=\" + encodeURIComponent( a[j] ) );\n\n\t// Return the resulting serialization\n\treturn s.join(\"&\");\n},\n\n// evalulates a script in global context\n// not reliable for safari\nglobalEval: function( data ) {\n\tif ( window.execScript )\n\t\twindow.execScript( data );\n\telse if ( jQuery.browser.safari )\n\t\t// safari doesn't provide a synchronous global eval\n\t\twindow.setTimeout( data, 0 );\n\telse\n\t\teval.call( window, data );\n}"},{"path":"./jquery-data/1.1.2/src/ajax/ajax.js","lines":[808,847],"code":"// Serialize an array of form elements or a set of\n// key/values into a query string\nparam: function( a ) {\n\tvar s = [];\n\n\t// If an array was passed in, assume that it is an array\n\t// of form elements\n\tif ( a.constructor == Array || a.jquery )\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function(){\n\t\t\ts.push( encodeURIComponent(this.name) + \"=\" + encodeURIComponent( this.value ) );\n\t\t});\n\n\t// Otherwise, assume that it's an object of key/value pairs\n\telse\n\t\t// Serialize the key/values\n\t\tfor ( var j in a )\n\t\t\t// If the value is an array then the key names need to be repeated\n\t\t\tif ( a[j] && a[j].constructor == Array )\n\t\t\t\tjQuery.each( a[j], function(){\n\t\t\t\t\ts.push( encodeURIComponent(j) + \"=\" + encodeURIComponent( this ) );\n\t\t\t\t});\n\t\t\telse\n\t\t\t\ts.push( encodeURIComponent(j) + \"=\" + encodeURIComponent( a[j] ) );\n\n\t// Return the resulting serialization\n\treturn s.join(\"&\");\n},\n\n// evalulates a script in global context\n// not reliable for safari\nglobalEval: function( data ) {\n\tif ( window.execScript )\n\t\twindow.execScript( data );\n\telse if ( jQuery.browser.safari )\n\t\t// safari doesn't provide a synchronous global eval\n\t\twindow.setTimeout( data, 0 );\n\telse\n\t\teval.call( window, data );\n}"}]},
{"id":"2eb5668c6c581abd5d6bea7771b62ad3caf499bc","instances":[{"path":"./jquery-data/1.1.3.1/src/event/event.js","lines":[1,17],"code":"/*\n * A number of helper functions used for managing events.\n * Many of the ideas behind this code orignated from \n * Dean Edwards' addEvent library.\n */\njQuery.event = {\n\n\t// Bind an event to an element\n\t// Original by Dean Edwards\n\tadd: function(element, type, handler, data) {\n\t\t// For whatever reason, IE has trouble passing the window object\n\t\t// around, causing it to be cloned in the process\n\t\tif ( jQuery.browser.msie && element.setInterval != undefined )\n\t\t\telement = window;\n\t\t\n\t\t// Make sure that the function being executed has a unique ID\n\t\tif ( !handler.guid )"},{"path":"./jquery-data/1.1.2/src/event/event.js","lines":[1,17],"code":"/*\n * A number of helper functions used for managing events.\n * Many of the ideas behind this code orignated from \n * Dean Edwards' addEvent library.\n */\njQuery.event = {\n\n\t// Bind an event to an element\n\t// Original by Dean Edwards\n\tadd: function(element, type, handler, data) {\n\t\t// For whatever reason, IE has trouble passing the window object\n\t\t// around, causing it to be cloned in the process\n\t\tif ( jQuery.browser.msie && element.setInterval != undefined )\n\t\t\telement = window;\n\n\t\t// if data is passed, bind to handler\n\t\tif( data ) "}]},
{"id":"55fa8c57c96261dacd3aafea2520cc24d1c0e22d","instances":[{"path":"./jquery-data/1.1.3.1/src/event/event.js","lines":[85,145],"code":"// Detach an event or set of events from an element\nremove: function(element, type, handler) {\n\tvar events = element.$events, ret, index;\n\n\tif ( events ) {\n\t\t// type is actually an event object here\n\t\tif ( type && type.type ) {\n\t\t\thandler = type.handler;\n\t\t\ttype = type.type;\n\t\t}\n\t\t\n\t\tif ( !type ) {\n\t\t\tfor ( type in events )\n\t\t\t\tthis.remove( element, type );\n\n\t\t} else if ( events[type] ) {\n\t\t\t// remove the given handler for the given type\n\t\t\tif ( handler )\n\t\t\t\tdelete events[type][handler.guid];\n\t\t\t\n\t\t\t// remove all handlers for the given type\n\t\t\telse\n\t\t\t\tfor ( handler in element.$events[type] )\n\t\t\t\t\tdelete events[type][handler];\n\n\t\t\t// remove generic event handler if no more handlers exist\n\t\t\tfor ( ret in events[type] ) break;\n\t\t\tif ( !ret ) {\n\t\t\t\tif (element.removeEventListener)\n\t\t\t\t\telement.removeEventListener(type, element.$handle, false);\n\t\t\t\telse\n\t\t\t\t\telement.detachEvent(\"on\" + type, element.$handle);\n\t\t\t\tret = null;\n\t\t\t\tdelete events[type];\n\t\t\t\t\n\t\t\t\t// Remove element from the global event type cache\n\t\t\t\twhile ( this.global[type] && ( (index = jQuery.inArray(element, this.global[type])) >= 0 ) )\n\t\t\t\t\tdelete this.global[type][index];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if it's no longer used\n\t\tfor ( ret in events ) break;\n\t\tif ( !ret )\n\t\t\telement.$handle = element.$events = null;\n\t}\n},\n\ntrigger: function(type, data, element) {\n\t// Clone the incoming data, if any\n\tdata = jQuery.makeArray(data || []);\n\n\t// Handle a global trigger\n\tif ( !element )\n\t\tjQuery.each( this.global[type] || [], function(){\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t});\n\n\t// Handle triggering a single element\n\telse {\n\t\tvar val, ret, fn = jQuery.isFunction( element[ type ] || null );"},{"path":"./jquery-data/1.1.2/src/event/event.js","lines":[56,102],"code":"// Detach an event or set of events from an element\nremove: function(element, type, handler) {\n\tif (element.$events) {\n\t\tvar i,j,k;\n\t\tif ( type && type.type ) { // type is actually an event object here\n\t\t\thandler = type.handler;\n\t\t\ttype    = type.type;\n\t\t}\n\t\t\n\t\tif (type && element.$events[type])\n\t\t\t// remove the given handler for the given type\n\t\t\tif ( handler )\n\t\t\t\tdelete element.$events[type][handler.guid];\n\t\t\t\t\n\t\t\t// remove all handlers for the given type\n\t\t\telse\n\t\t\t\tfor ( i in element.$events[type] )\n\t\t\t\t\tdelete element.$events[type][i];\n\t\t\t\t\t\n\t\t// remove all handlers\t\t\n\t\telse\n\t\t\tfor ( j in element.$events )\n\t\t\t\tthis.remove( element, j );\n\t\t\n\t\t// remove event handler if no more handlers exist\n\t\tfor ( k in element.$events[type] )\n\t\t\tif (k) {\n\t\t\t\tk = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\tif (!k) element[\"on\" + type] = null;\n\t}\n},\n\ntrigger: function(type, data, element) {\n\t// Clone the incoming data, if any\n\tdata = jQuery.makeArray(data || []);\n\n\t// Handle a global trigger\n\tif ( !element )\n\t\tjQuery.each( this.global[type] || [], function(){\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t});\n\n\t// Handle triggering a single element\n\telse {\n\t\tvar handler = element[\"on\" + type ], val,"}]},
{"id":"2533dc8127fc7bfa2d021e1d9a59ee3eeef78d56","instances":[{"path":"./jquery-data/1.1.3.1/src/event/event.js","lines":[168,182],"code":"var c = this.$events && this.$events[event.type], args = [].slice.call( arguments, 1 );\nargs.unshift( event );\n\nfor ( var j in c ) {\n\t// Pass in a reference to the handler function itself\n\t// So that we can later remove it\n\targs[0].handler = c[j];\n\targs[0].data = c[j].data;\n\n\tif ( c[j].apply( this, args ) === false ) {\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\t\tval = false;\n\t}\n}"},{"path":"./jquery-data/1.1.2/src/event/event.js","lines":[134,148],"code":"var args = [].slice.call( arguments, 1 );\nargs.unshift( event );\n\nfor ( var j in c ) {\n\t// Pass in a reference to the handler function itself\n\t// So that we can later remove it\n\targs[0].handler = c[j];\n\targs[0].data = c[j].data;\n\n\tif ( c[j].apply( this, args ) === false ) {\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\t\treturnValue = false;\n\t}\n}"}]},
{"id":"27bc25f4c16c2eedb19d02ed1df57d966756f935","instances":[{"path":"./jquery-data/1.1.3.1/src/event/event.js","lines":[253,338],"code":"/**\n * Binds a handler to a particular event (like click) for each matched element.\n * The event handler is passed an event object that you can use to prevent\n * default behaviour. To stop both default action and event bubbling, your handler\n * has to return false.\n *\n * In most cases, you can define your event handlers as anonymous functions\n * (see first example). In cases where that is not possible, you can pass additional\n * data as the second parameter (and the handler function as the third), see \n * second example.\n *\n * Calling bind with an event type of \"unload\" will automatically\n * use the one method instead of bind to prevent memory leaks.\n *\n * @example $(\"p\").bind(\"click\", function(){\n *   alert( $(this).text() );\n * });\n * @before <p>Hello</p>\n * @result alert(\"Hello\")\n *\n * @example function handler(event) {\n *   alert(event.data.foo);\n * }\n * $(\"p\").bind(\"click\", {foo: \"bar\"}, handler)\n * @result alert(\"bar\")\n * @desc Pass some additional data to the event handler.\n *\n * @example $(\"form\").bind(\"submit\", function() { return false; })\n * @desc Cancel a default action and prevent it from bubbling by returning false\n * from your function.\n *\n * @example $(\"form\").bind(\"submit\", function(event){\n *   event.preventDefault();\n * });\n * @desc Cancel only the default action by using the preventDefault method.\n *\n *\n * @example $(\"form\").bind(\"submit\", function(event){\n *   event.stopPropagation();\n * });\n * @desc Stop only an event from bubbling by using the stopPropagation method.\n *\n * @name bind\n * @type jQuery\n * @param String type An event type\n * @param Object data (optional) Additional data passed to the event handler as event.data\n * @param Function fn A function to bind to the event on each of the set of matched elements\n * @cat Events\n */\nbind: function( type, data, fn ) {\n\treturn type == \"unload\" ? this.one(type, data, fn) : this.each(function(){\n\t\tjQuery.event.add( this, type, fn || data, fn && data );\n\t});\n},\n\n/**\n * Binds a handler to a particular event (like click) for each matched element.\n * The handler is executed only once for each element. Otherwise, the same rules\n * as described in bind() apply.\n * The event handler is passed an event object that you can use to prevent\n * default behaviour. To stop both default action and event bubbling, your handler\n * has to return false.\n *\n * In most cases, you can define your event handlers as anonymous functions\n * (see first example). In cases where that is not possible, you can pass additional\n * data as the second paramter (and the handler function as the third), see \n * second example.\n *\n * @example $(\"p\").one(\"click\", function(){\n *   alert( $(this).text() );\n * });\n * @before <p>Hello</p>\n * @result alert(\"Hello\")\n *\n * @name one\n * @type jQuery\n * @param String type An event type\n * @param Object data (optional) Additional data passed to the event handler as event.data\n * @param Function fn A function to bind to the event on each of the set of matched elements\n * @cat Events\n */\none: function( type, data, fn ) {\n\treturn this.each(function(){\n\t\tjQuery.event.add( this, type, function(event) {\n\t\t\tjQuery(this).unbind(event);\n\t\t\treturn (fn || data).apply( this, arguments);"},{"path":"./jquery-data/1.1.2/src/event/event.js","lines":[205,287],"code":"/**\n * Binds a handler to a particular event (like click) for each matched element.\n * The event handler is passed an event object that you can use to prevent\n * default behaviour. To stop both default action and event bubbling, your handler\n * has to return false.\n *\n * In most cases, you can define your event handlers as anonymous functions\n * (see first example). In cases where that is not possible, you can pass additional\n * data as the second parameter (and the handler function as the third), see \n * second example.\n *\n * @example $(\"p\").bind(\"click\", function(){\n *   alert( $(this).text() );\n * });\n * @before <p>Hello</p>\n * @result alert(\"Hello\")\n *\n * @example function handler(event) {\n *   alert(event.data.foo);\n * }\n * $(\"p\").bind(\"click\", {foo: \"bar\"}, handler)\n * @result alert(\"bar\")\n * @desc Pass some additional data to the event handler.\n *\n * @example $(\"form\").bind(\"submit\", function() { return false; })\n * @desc Cancel a default action and prevent it from bubbling by returning false\n * from your function.\n *\n * @example $(\"form\").bind(\"submit\", function(event){\n *   event.preventDefault();\n * });\n * @desc Cancel only the default action by using the preventDefault method.\n *\n *\n * @example $(\"form\").bind(\"submit\", function(event){\n *   event.stopPropagation();\n * });\n * @desc Stop only an event from bubbling by using the stopPropagation method.\n *\n * @name bind\n * @type jQuery\n * @param String type An event type\n * @param Object data (optional) Additional data passed to the event handler as event.data\n * @param Function fn A function to bind to the event on each of the set of matched elements\n * @cat Events\n */\nbind: function( type, data, fn ) {\n\treturn this.each(function(){\n\t\tjQuery.event.add( this, type, fn || data, data );\n\t});\n},\n\n/**\n * Binds a handler to a particular event (like click) for each matched element.\n * The handler is executed only once for each element. Otherwise, the same rules\n * as described in bind() apply.\n The event handler is passed an event object that you can use to prevent\n * default behaviour. To stop both default action and event bubbling, your handler\n * has to return false.\n *\n * In most cases, you can define your event handlers as anonymous functions\n * (see first example). In cases where that is not possible, you can pass additional\n * data as the second paramter (and the handler function as the third), see \n * second example.\n *\n * @example $(\"p\").one(\"click\", function(){\n *   alert( $(this).text() );\n * });\n * @before <p>Hello</p>\n * @result alert(\"Hello\")\n *\n * @name one\n * @type jQuery\n * @param String type An event type\n * @param Object data (optional) Additional data passed to the event handler as event.data\n * @param Function fn A function to bind to the event on each of the set of matched elements\n * @cat Events\n */\none: function( type, data, fn ) {\n\treturn this.each(function(){\n\t\tjQuery.event.add( this, type, function(event) {\n\t\t\tjQuery(this).unbind(event);\n\t\t\treturn (fn || data).apply( this, arguments);"}]},
{"id":"ee8f0905f32c94e4e151dbf41dfdfde04f66b203","instances":[{"path":"./jquery-data/1.1.3.1/src/event/event.js","lines":[498,576],"code":"\t/**\n\t * Bind a function to be executed whenever the DOM is ready to be\n\t * traversed and manipulated. This is probably the most important \n\t * function included in the event module, as it can greatly improve\n\t * the response times of your web applications.\n\t *\n\t * In a nutshell, this is a solid replacement for using window.onload, \n\t * and attaching a function to that. By using this method, your bound function \n\t * will be called the instant the DOM is ready to be read and manipulated, \n\t * which is when what 99.99% of all JavaScript code needs to run.\n\t *\n\t * There is one argument passed to the ready event handler: A reference to\n\t * the jQuery function. You can name that argument whatever you like, and\n\t * can therefore stick with the $ alias without risk of naming collisions.\n\t * \n\t * Please ensure you have no code in your &lt;body&gt; onload event handler, \n\t * otherwise $(document).ready() may not fire.\n\t *\n\t * You can have as many $(document).ready events on your page as you like.\n\t * The functions are then executed in the order they were added.\n\t *\n\t * @example $(document).ready(function(){ Your code here... });\n\t *\n\t * @example jQuery(function($) {\n\t *   // Your code using failsafe $ alias here...\n\t * });\n\t * @desc Uses both the [[Core#.24.28_fn_.29|shortcut]] for $(document).ready() and the argument\n\t * to write failsafe jQuery code using the $ alias, without relying on the\n\t * global alias.\n\t *\n\t * @name ready\n\t * @type jQuery\n\t * @param Function fn The function to be executed when the DOM is ready.\n\t * @cat Events\n\t * @see $.noConflict()\n\t * @see $(Function)\n\t */\n\tready: function(f) {\n\t\t// If the DOM is already ready\n\t\tif ( jQuery.isReady )\n\t\t\t// Execute the function immediately\n\t\t\tf.apply( document, [jQuery] );\n\t\t\t\n\t\t// Otherwise, remember the function for later\n\t\telse\n\t\t\t// Add the function to the wait list\n\t\t\tjQuery.readyList.push( function() { return f.apply(this, [jQuery]) } );\n\t\n\t\treturn this;\n\t}\n});\n\njQuery.extend({\n\t/*\n\t * All the code that makes DOM Ready work nicely.\n\t */\n\tisReady: false,\n\treadyList: [],\n\t\n\t// Handle when the DOM is ready\n\tready: function() {\n\t\t// Make sure that the DOM is not already loaded\n\t\tif ( !jQuery.isReady ) {\n\t\t\t// Remember that the DOM is ready\n\t\t\tjQuery.isReady = true;\n\t\t\t\n\t\t\t// If there are functions bound, to execute\n\t\t\tif ( jQuery.readyList ) {\n\t\t\t\t// Execute all of them\n\t\t\t\tjQuery.each( jQuery.readyList, function(){\n\t\t\t\t\tthis.apply( document );\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// Reset the list of functions\n\t\t\t\tjQuery.readyList = null;\n\t\t\t}\n\t\t\t// Remove event listener to avoid memory leak\n\t\t\tif ( jQuery.browser.mozilla || jQuery.browser.opera )\n\t\t\t\tdocument.removeEventListener( \"DOMContentLoaded\", jQuery.ready, false );"},{"path":"./jquery-data/1.1.2/src/event/event.js","lines":[447,526],"code":"\t/**\n\t * Bind a function to be executed whenever the DOM is ready to be\n\t * traversed and manipulated. This is probably the most important \n\t * function included in the event module, as it can greatly improve\n\t * the response times of your web applications.\n\t *\n\t * In a nutshell, this is a solid replacement for using window.onload, \n\t * and attaching a function to that. By using this method, your bound function \n\t * will be called the instant the DOM is ready to be read and manipulated, \n\t * which is when what 99.99% of all JavaScript code needs to run.\n\t *\n\t * There is one argument passed to the ready event handler: A reference to\n\t * the jQuery function. You can name that argument whatever you like, and\n\t * can therefore stick with the $ alias without risk of naming collisions.\n\t * \n\t * Please ensure you have no code in your &lt;body&gt; onload event handler, \n\t * otherwise $(document).ready() may not fire.\n\t *\n\t * You can have as many $(document).ready events on your page as you like.\n\t * The functions are then executed in the order they were added.\n\t *\n\t * @example $(document).ready(function(){ Your code here... });\n\t *\n\t * @example jQuery(function($) {\n\t *   // Your code using failsafe $ alias here...\n\t * });\n\t * @desc Uses both the [[Core#.24.28_fn_.29|shortcut]] for $(document).ready() and the argument\n\t * to write failsafe jQuery code using the $ alias, without relying on the\n\t * global alias.\n\t *\n\t * @name ready\n\t * @type jQuery\n\t * @param Function fn The function to be executed when the DOM is ready.\n\t * @cat Events\n\t * @see $.noConflict()\n\t * @see $(Function)\n\t */\n\tready: function(f) {\n\t\t// If the DOM is already ready\n\t\tif ( jQuery.isReady )\n\t\t\t// Execute the function immediately\n\t\t\tf.apply( document, [jQuery] );\n\t\t\t\n\t\t// Otherwise, remember the function for later\n\t\telse {\n\t\t\t// Add the function to the wait list\n\t\t\tjQuery.readyList.push( function() { return f.apply(this, [jQuery]) } );\n\t\t}\n\t\n\t\treturn this;\n\t}\n});\n\njQuery.extend({\n\t/*\n\t * All the code that makes DOM Ready work nicely.\n\t */\n\tisReady: false,\n\treadyList: [],\n\t\n\t// Handle when the DOM is ready\n\tready: function() {\n\t\t// Make sure that the DOM is not already loaded\n\t\tif ( !jQuery.isReady ) {\n\t\t\t// Remember that the DOM is ready\n\t\t\tjQuery.isReady = true;\n\t\t\t\n\t\t\t// If there are functions bound, to execute\n\t\t\tif ( jQuery.readyList ) {\n\t\t\t\t// Execute all of them\n\t\t\t\tjQuery.each( jQuery.readyList, function(){\n\t\t\t\t\tthis.apply( document );\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// Reset the list of functions\n\t\t\t\tjQuery.readyList = null;\n\t\t\t}\n\t\t\t// Remove event lisenter to avoid memory leak\n\t\t\tif ( jQuery.browser.mozilla || jQuery.browser.opera )\n\t\t\t\tdocument.removeEventListener( \"DOMContentLoaded\", jQuery.ready, false );"}]},
{"id":"64eb965bb559426ce2fed9276b3acf417a6e19a5","instances":[{"path":"./jquery-data/1.1.3.1/src/event/event.js","lines":[557,952],"code":"\t// Handle when the DOM is ready\n\tready: function() {\n\t\t// Make sure that the DOM is not already loaded\n\t\tif ( !jQuery.isReady ) {\n\t\t\t// Remember that the DOM is ready\n\t\t\tjQuery.isReady = true;\n\t\t\t\n\t\t\t// If there are functions bound, to execute\n\t\t\tif ( jQuery.readyList ) {\n\t\t\t\t// Execute all of them\n\t\t\t\tjQuery.each( jQuery.readyList, function(){\n\t\t\t\t\tthis.apply( document );\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// Reset the list of functions\n\t\t\t\tjQuery.readyList = null;\n\t\t\t}\n\t\t\t// Remove event listener to avoid memory leak\n\t\t\tif ( jQuery.browser.mozilla || jQuery.browser.opera )\n\t\t\t\tdocument.removeEventListener( \"DOMContentLoaded\", jQuery.ready, false );\n\t\t\t\n\t\t\t// Remove script element used by IE hack\n\t\t\tif( !window.frames.length ) // don't remove if frames are present (#1187)\n\t\t\t\tjQuery(window).load(function(){ jQuery(\"#__ie_init\").remove(); });\n\t\t}\n\t}\n});\n\nnew function(){\n\n\t/**\n\t * Bind a function to the scroll event of each matched element.\n\t *\n\t * @example $(\"p\").scroll( function() { alert(\"Hello\"); } );\n\t * @before <p>Hello</p>\n\t * @result <p onscroll=\"alert('Hello');\">Hello</p>\n\t *\n\t * @name scroll\n\t * @type jQuery\n\t * @param Function fn A function to bind to the scroll event on each of the matched elements.\n\t * @cat Events\n\t */\n\n\t/**\n\t * Bind a function to the submit event of each matched element.\n\t *\n\t * @example $(\"#myform\").submit( function() {\n\t *   return $(\"input\", this).val().length > 0;\n\t * } );\n\t * @before <form id=\"myform\"><input /></form>\n\t * @desc Prevents the form submission when the input has no value entered.\n\t *\n\t * @name submit\n\t * @type jQuery\n\t * @param Function fn A function to bind to the submit event on each of the matched elements.\n\t * @cat Events\n\t */\n\n\t/**\n\t * Trigger the submit event of each matched element. This causes all of the functions\n\t * that have been bound to that submit event to be executed, and calls the browser's\n\t * default submit action on the matching element(s). This default action can be prevented\n\t * by returning false from one of the functions bound to the submit event.\n\t *\n\t * Note: This does not execute the submit method of the form element! If you need to\n\t * submit the form via code, you have to use the DOM method, eg. $(\"form\")[0].submit();\n\t *\n\t * @example $(\"form\").submit();\n\t * @desc Triggers all submit events registered to the matched form(s), and submits them.\n\t *\n\t * @name submit\n\t * @type jQuery\n\t * @cat Events\n\t */\n\n\t/**\n\t * Bind a function to the focus event of each matched element.\n\t *\n\t * @example $(\"p\").focus( function() { alert(\"Hello\"); } );\n\t * @before <p>Hello</p>\n\t * @result <p onfocus=\"alert('Hello');\">Hello</p>\n\t *\n\t * @name focus\n\t * @type jQuery\n\t * @param Function fn A function to bind to the focus event on each of the matched elements.\n\t * @cat Events\n\t */\n\n\t/**\n\t * Trigger the focus event of each matched element. This causes all of the functions\n\t * that have been bound to thet focus event to be executed.\n\t *\n\t * Note: This does not execute the focus method of the underlying elements! If you need to\n\t * focus an element via code, you have to use the DOM method, eg. $(\"#myinput\")[0].focus();\n\t *\n\t * @example $(\"p\").focus();\n\t * @before <p onfocus=\"alert('Hello');\">Hello</p>\n\t * @result alert('Hello');\n\t *\n\t * @name focus"},{"path":"./jquery-data/1.1.2/src/event/event.js","lines":[507,898],"code":"\t// Handle when the DOM is ready\n\tready: function() {\n\t\t// Make sure that the DOM is not already loaded\n\t\tif ( !jQuery.isReady ) {\n\t\t\t// Remember that the DOM is ready\n\t\t\tjQuery.isReady = true;\n\t\t\t\n\t\t\t// If there are functions bound, to execute\n\t\t\tif ( jQuery.readyList ) {\n\t\t\t\t// Execute all of them\n\t\t\t\tjQuery.each( jQuery.readyList, function(){\n\t\t\t\t\tthis.apply( document );\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// Reset the list of functions\n\t\t\t\tjQuery.readyList = null;\n\t\t\t}\n\t\t\t// Remove event lisenter to avoid memory leak\n\t\t\tif ( jQuery.browser.mozilla || jQuery.browser.opera )\n\t\t\t\tdocument.removeEventListener( \"DOMContentLoaded\", jQuery.ready, false );\n\t\t}\n\t}\n});\n\nnew function(){\n\n\t/**\n\t * Bind a function to the scroll event of each matched element.\n\t *\n\t * @example $(\"p\").scroll( function() { alert(\"Hello\"); } );\n\t * @before <p>Hello</p>\n\t * @result <p onscroll=\"alert('Hello');\">Hello</p>\n\t *\n\t * @name scroll\n\t * @type jQuery\n\t * @param Function fn A function to bind to the scroll event on each of the matched elements.\n\t * @cat Events\n\t */\n\n\t/**\n\t * Bind a function to the submit event of each matched element.\n\t *\n\t * @example $(\"#myform\").submit( function() {\n\t *   return $(\"input\", this).val().length > 0;\n\t * } );\n\t * @before <form id=\"myform\"><input /></form>\n\t * @desc Prevents the form submission when the input has no value entered.\n\t *\n\t * @name submit\n\t * @type jQuery\n\t * @param Function fn A function to bind to the submit event on each of the matched elements.\n\t * @cat Events\n\t */\n\n\t/**\n\t * Trigger the submit event of each matched element. This causes all of the functions\n\t * that have been bound to that submit event to be executed, and calls the browser's\n\t * default submit action on the matching element(s). This default action can be prevented\n\t * by returning false from one of the functions bound to the submit event.\n\t *\n\t * Note: This does not execute the submit method of the form element! If you need to\n\t * submit the form via code, you have to use the DOM method, eg. $(\"form\")[0].submit();\n\t *\n\t * @example $(\"form\").submit();\n\t * @desc Triggers all submit events registered to the matched form(s), and submits them.\n\t *\n\t * @name submit\n\t * @type jQuery\n\t * @cat Events\n\t */\n\n\t/**\n\t * Bind a function to the focus event of each matched element.\n\t *\n\t * @example $(\"p\").focus( function() { alert(\"Hello\"); } );\n\t * @before <p>Hello</p>\n\t * @result <p onfocus=\"alert('Hello');\">Hello</p>\n\t *\n\t * @name focus\n\t * @type jQuery\n\t * @param Function fn A function to bind to the focus event on each of the matched elements.\n\t * @cat Events\n\t */\n\n\t/**\n\t * Trigger the focus event of each matched element. This causes all of the functions\n\t * that have been bound to thet focus event to be executed.\n\t *\n\t * Note: This does not execute the focus method of the underlying elements! If you need to\n\t * focus an element via code, you have to use the DOM method, eg. $(\"#myinput\")[0].focus();\n\t *\n\t * @example $(\"p\").focus();\n\t * @before <p onfocus=\"alert('Hello');\">Hello</p>\n\t * @result alert('Hello');\n\t *\n\t * @name focus\n\t * @type jQuery\n\t * @cat Events\n\t */\n"}]},
{"id":"dbbfc1f03d8fc9a21755559eefc979716770d97e","instances":[{"path":"./jquery-data/1.1.3.1/src/event/event.js","lines":[958,994],"code":"\t\t\t\tjQuery.ready();\n\t\t\t};\n\t\n\t\t// Clear from memory\n\t\tscript = null;\n\t\n\t// If Safari  is used\n\t} else if ( jQuery.browser.safari )\n\t\t// Continually check to see if the document.readyState is valid\n\t\tjQuery.safariTimer = setInterval(function(){\n\t\t\t// loaded and complete are both valid states\n\t\t\tif ( document.readyState == \"loaded\" || \n\t\t\t\tdocument.readyState == \"complete\" ) {\n\t\n\t\t\t\t// If either one are found, remove the timer\n\t\t\t\tclearInterval( jQuery.safariTimer );\n\t\t\t\tjQuery.safariTimer = null;\n\t\n\t\t\t\t// and execute any waiting functions\n\t\t\t\tjQuery.ready();\n\t\t\t}\n\t\t}, 10); \n\n\t// A fallback to window.onload, that will always work\n\tjQuery.event.add( window, \"load\", jQuery.ready );\n\t\n};\n\n// Clean up after IE to avoid memory leaks\nif (jQuery.browser.msie)\n\tjQuery(window).one(\"unload\", function() {\n\t\tvar global = jQuery.event.global;\n\t\tfor ( var type in global ) {\n\t\t\tvar els = global[type], i = els.length;\n\t\t\tif ( i && type != 'unload' )\n\t\t\t\tdo\n\t\t\t\t\tels[i-1] && jQuery.event.remove(els[i-1], type);"},{"path":"./jquery-data/1.1.2/src/event/event.js","lines":[905,941],"code":"\t\t\t\tjQuery.ready();\n\t\t\t};\n\t\n\t\t// Clear from memory\n\t\tscript = null;\n\t\n\t// If Safari  is used\n\t} else if ( jQuery.browser.safari )\n\t\t// Continually check to see if the document.readyState is valid\n\t\tjQuery.safariTimer = setInterval(function(){\n\t\t\t// loaded and complete are both valid states\n\t\t\tif ( document.readyState == \"loaded\" || \n\t\t\t\tdocument.readyState == \"complete\" ) {\n\t\n\t\t\t\t// If either one are found, remove the timer\n\t\t\t\tclearInterval( jQuery.safariTimer );\n\t\t\t\tjQuery.safariTimer = null;\n\t\n\t\t\t\t// and execute any waiting functions\n\t\t\t\tjQuery.ready();\n\t\t\t}\n\t\t}, 10); \n\n\t// A fallback to window.onload, that will always work\n\tjQuery.event.add( window, \"load\", jQuery.ready );\n\t\n};\n\n// Clean up after IE to avoid memory leaks\nif (jQuery.browser.msie)\n\tjQuery(window).one(\"unload\", function() {\n\t\tvar global = jQuery.event.global;\n\t\tfor ( var type in global ) {\n\t\t\tvar els = global[type], i = els.length;\n\t\t\tif ( i && type != 'unload' )\n\t\t\t\tdo\n\t\t\t\t\tjQuery.event.remove(els[i-1], type);"}]},
{"id":"9e81cb3e5cb116ae8063b52f7cc6d64e8ff842c5","instances":[{"path":"./jquery-data/1.1.3.1/src/event/eventTest.js","lines":[15,21],"code":"var handler = function(event, data) {\n\tok( event.data, \"check passed data exists\" );\n\tok( event.data.foo == \"bar\", \"Check value of passed data\" );\n\tok( data, \"Check trigger data\" );\n\tok( data.bar == \"foo\", \"Check value of trigger data\" );\n};\n$(\"#firstp\").bind(\"click\", {foo: \"bar\"}, handler).trigger(\"click\", [{bar: \"foo\"}]).unbind(handler);"},{"path":"./jquery-data/1.1.2/src/event/eventTest.js","lines":[55,61],"code":"var handler = function(event, data) {\n\tok( event.data, \"check passed data exists\" );\n\tok( event.data.foo == \"bar\", \"Check value of passed data\" );\n\tok( data, \"Check trigger data\" );\n\tok( data.bar == \"foo\", \"Check value of trigger data\" );\n}\n$(\"#firstp\").bind(\"click\", {foo: \"bar\"}, handler).trigger(\"click\", [{bar: \"foo\"}]);"}]},
{"id":"365353645b219528e70e7f95a989d2ed03ab595e","instances":[{"path":"./jquery-data/1.1.3.1/src/event/eventTest.js","lines":[59,61],"code":"$('<li><a href=\"#\">Change location</a></li>').prependTo('#firstUL').find('a').bind('click', function() {\n    var close = $('spanx', this); // same with $(this).find('span');\n    ok( close.length == 0, \"Context element does not exist, length must be zero\" );"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[694,696],"code":"$('<li><a href=\"#\">Change location</a></li>').prependTo('#firstUL').find('a').bind('click', function() {\r\n    var close = $('spanx', this); // same with $(this).find('span');\r\n    ok( close.length == 0, \"Element does not exist, length must be zero\" );\r"}]},
{"id":"576d335daf940e6808c0046d29af3b85e67aed69","instances":[{"path":"./jquery-data/1.1.3.1/src/event/eventTest.js","lines":[96,106],"code":"test(\"trigger(event, [data]\", function() {\n\texpect(3);\n\tvar handler = function(event, a, b, c) {\n\t\tok( a == 1, \"check passed data\" );\n\t\tok( b == \"2\", \"check passed data\" );\n\t\tok( c == \"abc\", \"check passed data\" );\n\t};\n\t$(\"#firstp\").bind(\"click\", handler).trigger(\"click\", [1, \"2\", \"abc\"]);\n});\n\ntest(\"toggle(Function, Function)\", function() {"},{"path":"./jquery-data/1.1.2/src/event/eventTest.js","lines":[34,44],"code":"test(\"trigger(event, [data]\", function() {\n\texpect(3);\n\tvar handler = function(event, a, b, c) {\n\t\tok( a == 1, \"check passed data\" );\n\t\tok( b == \"2\", \"check passed data\" );\n\t\tok( c == \"abc\", \"check passed data\" );\n\t}\n\t$(\"#firstp\").bind(\"click\", handler).trigger(\"click\", [1, \"2\", \"abc\"]);\n});\n\ntest(\"bind() with data\", function() {"}]},
{"id":"15a23af0df4bb6148804c5f457bd9126207ac461","instances":[{"path":"./jquery-data/1.1.3.1/src/event/eventTest.js","lines":[108,112],"code":"var count = 0,\n\tfn1 = function(e) { count++; },\n\tfn2 = function(e) { count--; },\n\tpreventDefault = function(e) { e.preventDefault() },\n\tlink = $('#mark');"},{"path":"./jquery-data/1.1.2/src/event/eventTest.js","lines":[5,9],"code":"var count = 0,\n\tfn1 = function(e) { count++; },\n\tfn2 = function(e) { count--; },\n\tpreventDefault = function(e) { e.preventDefault() },\n\tlink = $('#mark');"}]},
{"id":"6325e746123541fc5566212b3a8efca95ecf4937","instances":[{"path":"./jquery-data/1.1.3.1/src/fx/fx.js","lines":[41,45],"code":"this.filter(\":hidden\").each(function(){\n\tthis.style.display = this.oldblock ? this.oldblock : \"\";\n\tif ( jQuery.css(this,\"display\") == \"none\" )\n\t\tthis.style.display = \"block\";\n}).end();"},{"path":"./jquery-data/1.1.2/src/fx/fx.js","lines":[42,46],"code":"hidden.each(function(){\n\tthis.style.display = this.oldblock ? this.oldblock : \"\";\n\tif ( jQuery.css(this,\"display\") == \"none\" )\n\t\tthis.style.display = \"block\";\n});"}]},
{"id":"2cbc3489774dd7adf6f2be09be02ba40de4e1eca","instances":[{"path":"./jquery-data/1.1.3.1/src/fx/fx.js","lines":[86,91],"code":"this.filter(\":visible\").each(function(){\n\tthis.oldblock = this.oldblock || jQuery.css(this,\"display\");\n\tif ( this.oldblock == \"none\" )\n\t\tthis.oldblock = \"block\";\n\tthis.style.display = \"none\";\n}).end();"},{"path":"./jquery-data/1.1.2/src/fx/fx.js","lines":[89,94],"code":"visible.each(function(){\n\tthis.oldblock = this.oldblock || jQuery.css(this,\"display\");\n\tif ( this.oldblock == \"none\" )\n\t\tthis.oldblock = \"block\";\n\tthis.style.display = \"none\";\n});"}]},
{"id":"74ca0c1bc7d3867101a60bdf37d97442f35ea2db","instances":[{"path":"./jquery-data/1.1.3.1/src/fx/fx.js","lines":[276,379],"code":"\t/**\n\t * A function for making your own, custom animations. The key aspect of\n\t * this function is the object of style properties that will be animated,\n\t * and to what end. Each key within the object represents a style property\n\t * that will also be animated (for example: \"height\", \"top\", or \"opacity\").\n\t *\n\t * Note that properties should be specified using camel case\n\t * eg. marginLeft instead of margin-left.\n\t *\n\t * The value associated with the key represents to what end the property\n\t * will be animated. If a number is provided as the value, then the style\n\t * property will be transitioned from its current state to that new number.\n\t * Otherwise if the string \"hide\", \"show\", or \"toggle\" is provided, a default\n\t * animation will be constructed for that property.\n\t *\n\t * @example $(\"p\").animate({\n\t *   height: 'toggle', opacity: 'toggle'\n\t * }, \"slow\");\n\t *\n\t * @example $(\"p\").animate({\n\t *   left: 50, opacity: 'show'\n\t * }, 500);\n\t *\n\t * @example $(\"p\").animate({\n\t *   opacity: 'show'\n\t * }, \"slow\", \"easein\");\n\t * @desc An example of using an 'easing' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function (Only \"swing\" and \"linear\" are provided by default, with jQuery).\n\t *\n\t * @name animate\n\t * @type jQuery\n\t * @param Hash params A set of style attributes that you wish to animate, and to what end.\n\t * @param String|Number speed (optional) A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @param String easing (optional) The name of the easing effect that you want to use (e.g. \"swing\" or \"linear\"). Defaults to \"swing\".\n\t * @param Function callback (optional) A function to be executed whenever the animation completes.\n\t * @cat Effects\n\t */\n\tanimate: function( prop, speed, easing, callback ) {\n\t\treturn this.queue(function(){\n\t\t\tvar hidden = jQuery(this).is(\":hidden\"),\n\t\t\t\topt = jQuery.speed(speed, easing, callback),\n\t\t\t\tself = this;\n\t\t\t\n\t\t\tfor ( var p in prop ) {\n\t\t\t\tif ( prop[p] == \"hide\" && hidden || prop[p] == \"show\" && !hidden )\n\t\t\t\t\treturn jQuery.isFunction(opt.complete) && opt.complete.apply(this);\n\n\t\t\t\tif ( p == \"height\" || p == \"width\" ) {\n\t\t\t\t\t// Store display property\n\t\t\t\t\topt.display = jQuery.css(this, \"display\");\n\n\t\t\t\t\t// Make sure that nothing sneaks out\n\t\t\t\t\topt.overflow = this.style.overflow;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( opt.overflow != null )\n\t\t\t\tthis.style.overflow = \"hidden\";\n\n\t\t\tthis.curAnim = jQuery.extend({}, prop);\n\t\t\t\n\t\t\tjQuery.each( prop, function(name, val){\n\t\t\t\tvar e = new jQuery.fx( self, opt, name );\n\t\t\t\tif ( val.constructor == Number )\n\t\t\t\t\te.custom( e.cur(), val );\n\t\t\t\telse\n\t\t\t\t\te[ val == \"toggle\" ? hidden ? \"show\" : \"hide\" : val ]( prop );\n\t\t\t});\n\t\t});\n\t},\n\t\n\t/**\n\t *\n\t * @private\n\t */\n\tqueue: function(type,fn){\n\t\tif ( !fn ) {\n\t\t\tfn = type;\n\t\t\ttype = \"fx\";\n\t\t}\n\t\n\t\treturn this.each(function(){\n\t\t\tif ( !this.queue )\n\t\t\t\tthis.queue = {};\n\t\n\t\t\tif ( !this.queue[type] )\n\t\t\t\tthis.queue[type] = [];\n\t\n\t\t\tthis.queue[type].push( fn );\n\t\t\n\t\t\tif ( this.queue[type].length == 1 )\n\t\t\t\tfn.apply(this);\n\t\t});\n\t}\n\n});\n\njQuery.extend({\n\t\n\tspeed: function(speed, easing, fn) {\n\t\tvar opt = speed && speed.constructor == Object ? speed : {"},{"path":"./jquery-data/1.1.2/src/fx/fx.js","lines":[281,367],"code":"\t/**\n\t * A function for making your own, custom animations. The key aspect of\n\t * this function is the object of style properties that will be animated,\n\t * and to what end. Each key within the object represents a style property\n\t * that will also be animated (for example: \"height\", \"top\", or \"opacity\").\n\t *\n\t * Note that properties should be specified using camel case\n\t * eg. marginLeft instead of margin-left.\n\t *\n\t * The value associated with the key represents to what end the property\n\t * will be animated. If a number is provided as the value, then the style\n\t * property will be transitioned from its current state to that new number.\n\t * Otherwise if the string \"hide\", \"show\", or \"toggle\" is provided, a default\n\t * animation will be constructed for that property.\n\t *\n\t * @example $(\"p\").animate({\n\t *   height: 'toggle', opacity: 'toggle'\n\t * }, \"slow\");\n\t *\n\t * @example $(\"p\").animate({\n\t *   left: 50, opacity: 'show'\n\t * }, 500);\n\t *\n\t * @example $(\"p\").animate({\n\t *   opacity: 'show'\n\t * }, \"slow\", \"easein\");\n\t * @desc An example of using an 'easing' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function (Only 'linear' is provided by default, with jQuery).\n\t *\n\t * @name animate\n\t * @type jQuery\n\t * @param Hash params A set of style attributes that you wish to animate, and to what end.\n\t * @param String|Number speed (optional) A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @param String easing (optional) The name of the easing effect that you want to use (Plugin Required).\n\t * @param Function callback (optional) A function to be executed whenever the animation completes.\n\t * @cat Effects\n\t */\n\tanimate: function( prop, speed, easing, callback ) {\n\t\treturn this.queue(function(){\n\t\t\n\t\t\tthis.curAnim = jQuery.extend({}, prop);\n\t\t\tvar opt = jQuery.speed(speed, easing, callback);\n\t\t\t\n\t\t\tfor ( var p in prop ) {\n\t\t\t\tvar e = new jQuery.fx( this, opt, p );\n\t\t\t\tif ( prop[p].constructor == Number )\n\t\t\t\t\te.custom( e.cur(), prop[p] );\n\t\t\t\telse\n\t\t\t\t\te[ prop[p] ]( prop );\n\t\t\t}\n\t\t\t\n\t\t});\n\t},\n\t\n\t/**\n\t *\n\t * @private\n\t */\n\tqueue: function(type,fn){\n\t\tif ( !fn ) {\n\t\t\tfn = type;\n\t\t\ttype = \"fx\";\n\t\t}\n\t\n\t\treturn this.each(function(){\n\t\t\tif ( !this.queue )\n\t\t\t\tthis.queue = {};\n\t\n\t\t\tif ( !this.queue[type] )\n\t\t\t\tthis.queue[type] = [];\n\t\n\t\t\tthis.queue[type].push( fn );\n\t\t\n\t\t\tif ( this.queue[type].length == 1 )\n\t\t\t\tfn.apply(this);\n\t\t});\n\t}\n\n});\n\njQuery.extend({\n\t\n\tspeed: function(speed, easing, fn) {\n\t\tvar opt = speed && speed.constructor == Object ? speed : {\n\t\t\tcomplete: fn || !fn && easing || \n\t\t\t\tjQuery.isFunction( speed ) && speed,\n\t\t\tduration: speed,\n\t\t\teasing: fn && easing || easing && easing.constructor != Function && easing"}]},
{"id":"d1735825c42836b1925002c725bb2cf111ba5b1c","instances":[{"path":"./jquery-data/1.1.3.1/src/fx/fx.js","lines":[382,398],"code":"\topt.duration = (opt.duration && opt.duration.constructor == Number ? \n\t\topt.duration : \n\t\t{ slow: 600, fast: 200 }[opt.duration]) || 400;\n\n\t// Queueing\n\topt.old = opt.complete;\n\topt.complete = function(){\n\t\tjQuery.dequeue(this, \"fx\");\n\t\tif ( jQuery.isFunction( opt.old ) )\n\t\t\topt.old.apply( this );\n\t};\n\n\treturn opt;\n},\n\neasing: {\n\tlinear: function( p, n, firstNum, diff ) {"},{"path":"./jquery-data/1.1.2/src/fx/fx.js","lines":[370,387],"code":"\topt.duration = (opt.duration && opt.duration.constructor == Number ? \n\t\topt.duration : \n\t\t{ slow: 600, fast: 200 }[opt.duration]) || 400;\n\n\t// Queueing\n\topt.old = opt.complete;\n\topt.complete = function(){\n\t\tjQuery.dequeue(this, \"fx\");\n\t\tif ( jQuery.isFunction( opt.old ) )\n\t\t\topt.old.apply( this );\n\t};\n\n\treturn opt;\n},\n\neasing: {},\n\nqueue: {},"}]},
{"id":"845a0b913360757a1914575d9259b2ade57777ce","instances":[{"path":"./jquery-data/1.1.3.1/src/fx/fx.js","lines":[406,416],"code":"queue: {},\n\ndequeue: function(elem,type){\n\ttype = type || \"fx\";\n\n\tif ( elem.queue && elem.queue[type] ) {\n\t\t// Remove self\n\t\telem.queue[type].shift();\n\n\t\t// Get next function\n\t\tvar f = elem.queue[type][0];"},{"path":"./jquery-data/1.1.2/src/fx/fx.js","lines":[387,397],"code":"queue: {},\n\ndequeue: function(elem,type){\n\ttype = type || \"fx\";\n\n\tif ( elem.queue && elem.queue[type] ) {\n\t\t// Remove self\n\t\telem.queue[type].shift();\n\n\t\t// Get next function\n\t\tvar f = elem.queue[type][0];"}]},
{"id":"2d9412cd446a5dbb29567c20d8647139893ede2d","instances":[{"path":"./jquery-data/1.1.3.1/src/fx/fx.js","lines":[437,443],"code":"// Simple function for setting a style value\nz.a = function(){\n\tif ( options.step )\n\t\toptions.step.apply( elem, [ z.now ] );\n\n\tif ( prop == \"opacity\" )\n\t\tjQuery.attr(y, \"opacity\", z.now); // Let attr handle opacity"},{"path":"./jquery-data/1.1.2/src/fx/fx.js","lines":[422,428],"code":"// Simple function for setting a style value\nz.a = function(){\n\tif ( options.step )\n\t\toptions.step.apply( elem, [ z.now ] );\n\n\tif ( prop == \"opacity\" )\n\t\tjQuery.attr(y, \"opacity\", z.now); // Let attr handle opacity"}]},
{"id":"92dc1615927158858ae226218bd54fd971e95c26","instances":[{"path":"./jquery-data/1.1.3.1/src/fx/fx.js","lines":[445,467],"code":"\t\ty[prop] = parseInt(z.now) + \"px\";\n\t\ty.display = \"block\"; // Set display property to block for animation\n\t}\n};\n\n// Figure out the maximum number to run to\nz.max = function(){\n\treturn parseFloat( jQuery.css(elem,prop) );\n};\n\n// Get the current size\nz.cur = function(){\n\tvar r = parseFloat( jQuery.curCSS(elem, prop) );\n\treturn r && r > -10000 ? r : z.max();\n};\n\n// Start an animation from one number to another\nz.custom = function(from,to){\n\tz.startTime = (new Date()).getTime();\n\tz.now = from;\n\tz.a();\n\n\tjQuery.timers.push(function(){"},{"path":"./jquery-data/1.1.2/src/fx/fx.js","lines":[430,452],"code":"\t\ty[prop] = parseInt(z.now) + \"px\";\n\t\n\ty.display = \"block\"; // Set display property to block for animation\n};\n\n// Figure out the maximum number to run to\nz.max = function(){\n\treturn parseFloat( jQuery.css(elem,prop) );\n};\n\n// Get the current size\nz.cur = function(){\n\tvar r = parseFloat( jQuery.curCSS(elem, prop) );\n\treturn r && r > -10000 ? r : z.max();\n};\n\n// Start an animation from one number to another\nz.custom = function(from,to){\n\tz.startTime = (new Date()).getTime();\n\tz.now = from;\n\tz.a();\n\n\tz.timer = setInterval(function(){"}]},
{"id":"f242648701f748b00d9bfdaf42b246a071205748","instances":[{"path":"./jquery-data/1.1.3.1/src/fx/fx.js","lines":[486,492],"code":"z.show = function(){\n\tif ( !elem.orig ) elem.orig = {};\n\n\t// Remember where we started, so that we can go back to it later\n\telem.orig[prop] = jQuery.attr( elem.style, prop );\n\n\toptions.show = true;"},{"path":"./jquery-data/1.1.3.1/src/fx/fx.js","lines":[507,513],"code":"z.hide = function(){\n\tif ( !elem.orig ) elem.orig = {};\n\n\t// Remember where we started, so that we can go back to it later\n\telem.orig[prop] = jQuery.attr( elem.style, prop );\n\n\toptions.hide = true;"}]},
{"id":"7122c8dc809cf587fd415406c0cd80e82a2864b3","instances":[{"path":"./jquery-data/1.1.3.1/src/fx/fxTest.js","lines":[3,8],"code":"test(\"animate(Hash, Object, Function)\", function() {\n\texpect(1);\n\tstop();\n\tvar hash = {opacity: 'show'};\n\tvar hashCopy = $.extend({}, hash);\n\t$('#foo').animate(hash, 0, function() {"},{"path":"./jquery-data/1.1.2/src/fx/fxTest.js","lines":[3,8],"code":"test(\"animate(Hash, Object, Function) - assert that animate doesn't modify its arguments\", function() {\n\texpect(1);\n\tstop();\n\tvar hash = {opacity: 'show'};\n\tvar hashCopy = $.extend({}, hash);\n\t$('#foo').animate(hash, 'fast', function() {"}]},
{"id":"a94edb27a2707a578f938120433f4632aa0089c9","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[1,14],"code":"module(\"core\");\n\ntest(\"Basic requirements\", function() {\n\texpect(7);\n\tok( Array.prototype.push, \"Array.push()\" );\n\tok( Function.prototype.apply, \"Function.apply()\" );\n\tok( document.getElementById, \"getElementById\" );\n\tok( document.getElementsByTagName, \"getElementsByTagName\" );\n\tok( RegExp, \"RegExp\" );\n\tok( jQuery, \"jQuery\" );\n\tok( $, \"$()\" );\n});\n\ntest(\"$()\", function() {"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[1,14],"code":"module(\"core\");\r\n\r\ntest(\"Basic requirements\", function() {\r\n\texpect(7);\r\n\tok( Array.prototype.push, \"Array.push()\" );\r\n\tok( Function.prototype.apply, \"Function.apply()\" );\r\n\tok( document.getElementById, \"getElementById\" );\r\n\tok( document.getElementsByTagName, \"getElementsByTagName\" );\r\n\tok( RegExp, \"RegExp\" );\r\n\tok( jQuery, \"jQuery\" );\r\n\tok( $, \"$()\" );\r\n});\r\n\r\ntest(\"$()\", function() {\r"}]},
{"id":"790d1fa0b1bd7fb7fb2a768c3af5e6fe19da509b","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[144,182],"code":"\tisSet( $(\"#sndp\").add(\"#en\").add(\"#sap\").get(), q(\"sndp\", \"en\", \"sap\"), \"Check elements from document\" );\n\tisSet( $(\"#sndp\").add( $(\"#en\")[0] ).add( $(\"#sap\") ).get(), q(\"sndp\", \"en\", \"sap\"), \"Check elements from document\" );\n\tok( $([]).add($(\"#form\")[0].elements).length > 13, \"Check elements from array\" );\n\t\n\tvar x = $([]).add($(\"<p id='x1'>xxx</p>\")).add($(\"<p id='x2'>xxx</p>\"));\n\tok( x[0].id == \"x1\", \"Check on-the-fly element1\" );\n\tok( x[1].id == \"x2\", \"Check on-the-fly element2\" );\n\t\n\tvar x = $([]).add(\"<p id='x1'>xxx</p>\").add(\"<p id='x2'>xxx</p>\");\n\tok( x[0].id == \"x1\", \"Check on-the-fly element1\" );\n\tok( x[1].id == \"x2\", \"Check on-the-fly element2\" );\n});\n\ntest(\"each(Function)\", function() {\n\texpect(1);\n\tvar div = $(\"div\");\n\tdiv.each(function(){this.foo = 'zoo';});\n\tvar pass = true;\n\tfor ( var i = 0; i < div.size(); i++ ) {\n\t  if ( div.get(i).foo != \"zoo\" ) pass = false;\n\t}\n\tok( pass, \"Execute a function, Relative\" );\n});\n\ntest(\"index(Object)\", function() {\n\texpect(8);\n\tok( $([window, document]).index(window) == 0, \"Check for index of elements\" );\n\tok( $([window, document]).index(document) == 1, \"Check for index of elements\" );\n\tvar inputElements = $('#radio1,#radio2,#check1,#check2');\n\tok( inputElements.index(document.getElementById('radio1')) == 0, \"Check for index of elements\" );\n\tok( inputElements.index(document.getElementById('radio2')) == 1, \"Check for index of elements\" );\n\tok( inputElements.index(document.getElementById('check1')) == 2, \"Check for index of elements\" );\n\tok( inputElements.index(document.getElementById('check2')) == 3, \"Check for index of elements\" );\n\tok( inputElements.index(window) == -1, \"Check for not found index\" );\n\tok( inputElements.index(document) == -1, \"Check for not found index\" );\n});\n\ntest(\"attr(String)\", function() {\n\texpect(13);"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[39,77],"code":"\tisSet( $(\"#sndp\").add(\"#en\").add(\"#sap\").get(), q(\"sndp\", \"en\", \"sap\"), \"Check elements from document\" );\r\n\tisSet( $(\"#sndp\").add( $(\"#en\")[0] ).add( $(\"#sap\") ).get(), q(\"sndp\", \"en\", \"sap\"), \"Check elements from document\" );\r\n\tok( $([]).add($(\"#form\")[0].elements).length > 13, \"Check elements from array\" );\r\n\t\r\n\tvar x = $([]).add($(\"<p id='x1'>xxx</p>\")).add($(\"<p id='x2'>xxx</p>\"));\r\n\tok( x[0].id == \"x1\", \"Check on-the-fly element1\" );\r\n\tok( x[1].id == \"x2\", \"Check on-the-fly element2\" );\r\n\t\r\n\tvar x = $([]).add(\"<p id='x1'>xxx</p>\").add(\"<p id='x2'>xxx</p>\");\r\n\tok( x[0].id == \"x1\", \"Check on-the-fly element1\" );\r\n\tok( x[1].id == \"x2\", \"Check on-the-fly element2\" );\r\n});\r\n\r\ntest(\"each(Function)\", function() {\r\n\texpect(1);\r\n\tvar div = $(\"div\");\r\n\tdiv.each(function(){this.foo = 'zoo';});\r\n\tvar pass = true;\r\n\tfor ( var i = 0; i < div.size(); i++ ) {\r\n\t  if ( div.get(i).foo != \"zoo\" ) pass = false;\r\n\t}\r\n\tok( pass, \"Execute a function, Relative\" );\r\n});\r\n\r\ntest(\"index(Object)\", function() {\r\n\texpect(8);\r\n\tok( $([window, document]).index(window) == 0, \"Check for index of elements\" );\r\n\tok( $([window, document]).index(document) == 1, \"Check for index of elements\" );\r\n\tvar inputElements = $('#radio1,#radio2,#check1,#check2');\r\n\tok( inputElements.index(document.getElementById('radio1')) == 0, \"Check for index of elements\" );\r\n\tok( inputElements.index(document.getElementById('radio2')) == 1, \"Check for index of elements\" );\r\n\tok( inputElements.index(document.getElementById('check1')) == 2, \"Check for index of elements\" );\r\n\tok( inputElements.index(document.getElementById('check2')) == 3, \"Check for index of elements\" );\r\n\tok( inputElements.index(window) == -1, \"Check for not found index\" );\r\n\tok( inputElements.index(document) == -1, \"Check for not found index\" );\r\n});\r\n\r\ntest(\"attr(String)\", function() {\r\n\texpect(15);\r"}]},
{"id":"b557d4b27c8b2f476a3d84ba5d7dee3060386e1d","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[203,228],"code":"\t\tstop();\n\t\t$.get(\"data/dashboard.xml\", function(xml) {\n\t\t\tok( $(\"locations\", xml).attr(\"class\") == \"foo\", \"Check class attribute in XML document\" );\n\t\t\tok( $(\"location\", xml).attr(\"for\") == \"bar\", \"Check for attribute in XML document\" );\n\t\t\tstart();\n\t\t});\n\t});\n}\n\ntest(\"attr(String, Function)\", function() {\n\texpect(2);\n\tok( $('#text1').attr('value', function() { return this.id })[0].value == \"text1\", \"Set value from id\" );\n\tok( $('#text1').attr('title', function(i) { return i }).attr('title') == \"0\", \"Set value with an index\");\n});\n\ntest(\"attr(Hash)\", function() {\n\texpect(1);\n\tvar pass = true;\n\t$(\"div\").attr({foo: 'baz', zoo: 'ping'}).each(function(){\n\t  if ( this.getAttribute('foo') != \"baz\" && this.getAttribute('zoo') != \"ping\" ) pass = false;\n\t});\n\tok( pass, \"Set Multiple Attributes\" );\n});\n\ntest(\"attr(String, Object)\", function() {\n\texpect(8);"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[94,118],"code":"\tstop();\r\n\t$.get(\"data/dashboard.xml\", function(xml) {\r\n\t\tok( $(\"locations\", xml).attr(\"class\") == \"foo\", \"Check class attribute in XML document\" );\r\n\t\tok( $(\"location\", xml).attr(\"for\") == \"bar\", \"Check for attribute in XML document\" );\r\n\t\tstart();\r\n\t});\r\n});\r\n\r\ntest(\"attr(String, Function)\", function() {\r\n\texpect(2);\r\n\tok( $('#text1').attr('value', function() { return this.id })[0].value == \"text1\", \"Set value from id\" );\r\n\tok( $('#text1').attr('title', function(i) { return i }).attr('title') == \"0\", \"Set value with an index\");\r\n});\r\n\r\ntest(\"attr(Hash)\", function() {\r\n\texpect(1);\r\n\tvar pass = true;\r\n\t$(\"div\").attr({foo: 'baz', zoo: 'ping'}).each(function(){\r\n\t  if ( this.getAttribute('foo') != \"baz\" && this.getAttribute('zoo') != \"ping\" ) pass = false;\r\n\t});\r\n\tok( pass, \"Set Multiple Attributes\" );\r\n});\r\n\r\ntest(\"attr(String, Object)\", function() {\r\n\texpect(7);\r"}]},
{"id":"66f7002f5d9a97cf258210bb670a37ff868884be","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[229,248],"code":"var div = $(\"div\");\ndiv.attr(\"foo\", \"bar\");\nvar pass = true;\nfor ( var i = 0; i < div.size(); i++ ) {\n  if ( div.get(i).getAttribute('foo') != \"bar\" ) pass = false;\n}\nok( pass, \"Set Attribute\" );\n\nok( $(\"#foo\").attr({\"width\": null}), \"Try to set an attribute to nothing\" );\t\n\n$(\"#name\").attr('name', 'something');\nok( $(\"#name\").attr('name') == 'something', 'Set name attribute' );\n$(\"#check2\").attr('checked', true);\nok( document.getElementById('check2').checked == true, 'Set checked attribute' );\n$(\"#check2\").attr('checked', false);\nok( document.getElementById('check2').checked == false, 'Set checked attribute' );\n$(\"#text1\").attr('readonly', true);\nok( document.getElementById('text1').readOnly == true, 'Set readonly attribute' );\n$(\"#text1\").attr('readonly', false);\nok( document.getElementById('text1').readOnly == false, 'Set readonly attribute' );"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[119,138],"code":"var div = $(\"div\");\r\ndiv.attr(\"foo\", \"bar\");\r\nvar pass = true;\r\nfor ( var i = 0; i < div.size(); i++ ) {\r\n  if ( div.get(i).getAttribute('foo') != \"bar\" ) pass = false;\r\n}\r\nok( pass, \"Set Attribute\" );\r\n\r\nok( $(\"#foo\").attr({\"width\": null}), \"Try to set an attribute to nothing\" );\t\r\n\r\n$(\"#name\").attr('name', 'something');\r\nok( $(\"#name\").attr('name') == 'something', 'Set name attribute' );\r\n$(\"#check2\").attr('checked', true);\r\nok( document.getElementById('check2').checked == true, 'Set checked attribute' );\r\n$(\"#check2\").attr('checked', false);\r\nok( document.getElementById('check2').checked == false, 'Set checked attribute' );\r\n$(\"#text1\").attr('readonly', true);\r\nok( document.getElementById('text1').readOnly == true, 'Set readonly attribute' );\r\n$(\"#text1\").attr('readonly', false);\r\nok( document.getElementById('text1').readOnly == false, 'Set readonly attribute' );\r"}]},
{"id":"007b343cff82c6f698c2f964b8a8562a357b7747","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[253,270],"code":"if ( location.protocol != \"file:\" ) {\n\ttest(\"attr(String, Object)x\", function() {\n\t\texpect(2);\n\t\tstop();\n\t\t$.get('data/dashboard.xml', function(xml) { \n\t  \tvar titles = [];\n\t  \t$('tab', xml).each(function() {\n\t    \ttitles.push($(this).attr('title'));\n\t  \t});\n\t  \tok( titles[0] == 'Location', 'attr() in XML context: Check first title' );\n\t  \tok( titles[1] == 'Users', 'attr() in XML context: Check second title' );\n\t  \tstart();\n\t\t});\n\t});\n}\n\ntest(\"css(String|Hash)\", function() {\n\texpect(19);"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[141,158],"code":"if ( location.protocol != \"file:\" ) {\r\n\ttest(\"attr(String, Object)x\", function() {\r\n\t\texpect(2);\r\n\t\tstop();\r\n\t\t$.get('data/dashboard.xml', function(xml) { \r\n\t  \tvar titles = [];\r\n\t  \t$('tab', xml).each(function() {\r\n\t    \ttitles.push($(this).attr('title'));\r\n\t  \t});\r\n\t  \tok( titles[0] == 'Location', 'attr() in XML context: Check first title' );\r\n\t  \tok( titles[1] == 'Users', 'attr() in XML context: Check second title' );\r\n\t  \tstart();\r\n\t\t});\r\n\t});\r\n}\r\n\r\ntest(\"css(String|Hash)\", function() {\r\n\texpect(8);\r"}]},
{"id":"181c109251b65b6a93a7383ced81666117a5f2db","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[610,647],"code":"\tok( 'Yahoo' == $('#foo').find('.blogTest').text(), 'Check for find' );\n});\n\ntest(\"clone()\", function() {\n\texpect(3);\n\tok( 'This is a normal link: Yahoo' == $('#en').text(), 'Assert text for #en' );\n\tvar clone = $('#yahoo').clone();\n\tok( 'Try them out:Yahoo' == $('#first').append(clone).text(), 'Check for clone' );\n\tok( 'This is a normal link: Yahoo' == $('#en').text(), 'Reassert text for #en' );\n});\n\ntest(\"is(String)\", function() {\n\texpect(26);\n\tok( $('#form').is('form'), 'Check for element: A form must be a form' );\n\tok( !$('#form').is('div'), 'Check for element: A form is not a div' );\n\tok( $('#mark').is('.blog'), 'Check for class: Expected class \"blog\"' );\n\tok( !$('#mark').is('.link'), 'Check for class: Did not expect class \"link\"' );\n\tok( $('#simon').is('.blog.link'), 'Check for multiple classes: Expected classes \"blog\" and \"link\"' );\n\tok( !$('#simon').is('.blogTest'), 'Check for multiple classes: Expected classes \"blog\" and \"link\", but not \"blogTest\"' );\n\tok( $('#en').is('[@lang=\"en\"]'), 'Check for attribute: Expected attribute lang to be \"en\"' );\n\tok( !$('#en').is('[@lang=\"de\"]'), 'Check for attribute: Expected attribute lang to be \"en\", not \"de\"' );\n\tok( $('#text1').is('[@type=\"text\"]'), 'Check for attribute: Expected attribute type to be \"text\"' );\n\tok( !$('#text1').is('[@type=\"radio\"]'), 'Check for attribute: Expected attribute type to be \"text\", not \"radio\"' );\n\tok( $('#text2').is(':disabled'), 'Check for pseudoclass: Expected to be disabled' );\n\tok( !$('#text1').is(':disabled'), 'Check for pseudoclass: Expected not disabled' );\n\tok( $('#radio2').is(':checked'), 'Check for pseudoclass: Expected to be checked' );\n\tok( !$('#radio1').is(':checked'), 'Check for pseudoclass: Expected not checked' );\n\tok( $('#foo').is('[p]'), 'Check for child: Expected a child \"p\" element' );\n\tok( !$('#foo').is('[ul]'), 'Check for child: Did not expect \"ul\" element' );\n\tok( $('#foo').is('[p][a][code]'), 'Check for childs: Expected \"p\", \"a\" and \"code\" child elements' );\n\tok( !$('#foo').is('[p][a][code][ol]'), 'Check for childs: Expected \"p\", \"a\" and \"code\" child elements, but no \"ol\"' );\n\tok( !$('#foo').is(0), 'Expected false for an invalid expression - 0' );\n\tok( !$('#foo').is(null), 'Expected false for an invalid expression - null' );\n\tok( !$('#foo').is(''), 'Expected false for an invalid expression - \"\"' );\n\tok( !$('#foo').is(undefined), 'Expected false for an invalid expression - undefined' );\n\t\n\t// test is() with comma-seperated expressions\n\tok( $('#en').is('[@lang=\"en\"],[@lang=\"de\"]'), 'Comma-seperated; Check for lang attribute: Expect en or de' );"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[420,457],"code":"\tok( 'Yahoo' == $('#foo').find('.blogTest').text(), 'Check for find' );\r\n});\r\n\r\ntest(\"clone()\", function() {\r\n\texpect(3);\r\n\tok( 'This is a normal link: Yahoo' == $('#en').text(), 'Assert text for #en' );\r\n\tvar clone = $('#yahoo').clone();\r\n\tok( 'Try them out:Yahoo' == $('#first').append(clone).text(), 'Check for clone' );\r\n\tok( 'This is a normal link: Yahoo' == $('#en').text(), 'Reassert text for #en' );\r\n});\r\n\r\ntest(\"is(String)\", function() {\r\n\texpect(26);\r\n\tok( $('#form').is('form'), 'Check for element: A form must be a form' );\r\n\tok( !$('#form').is('div'), 'Check for element: A form is not a div' );\r\n\tok( $('#mark').is('.blog'), 'Check for class: Expected class \"blog\"' );\r\n\tok( !$('#mark').is('.link'), 'Check for class: Did not expect class \"link\"' );\r\n\tok( $('#simon').is('.blog.link'), 'Check for multiple classes: Expected classes \"blog\" and \"link\"' );\r\n\tok( !$('#simon').is('.blogTest'), 'Check for multiple classes: Expected classes \"blog\" and \"link\", but not \"blogTest\"' );\r\n\tok( $('#en').is('[@lang=\"en\"]'), 'Check for attribute: Expected attribute lang to be \"en\"' );\r\n\tok( !$('#en').is('[@lang=\"de\"]'), 'Check for attribute: Expected attribute lang to be \"en\", not \"de\"' );\r\n\tok( $('#text1').is('[@type=\"text\"]'), 'Check for attribute: Expected attribute type to be \"text\"' );\r\n\tok( !$('#text1').is('[@type=\"radio\"]'), 'Check for attribute: Expected attribute type to be \"text\", not \"radio\"' );\r\n\tok( $('#text2').is(':disabled'), 'Check for pseudoclass: Expected to be disabled' );\r\n\tok( !$('#text1').is(':disabled'), 'Check for pseudoclass: Expected not disabled' );\r\n\tok( $('#radio2').is(':checked'), 'Check for pseudoclass: Expected to be checked' );\r\n\tok( !$('#radio1').is(':checked'), 'Check for pseudoclass: Expected not checked' );\r\n\tok( $('#foo').is('[p]'), 'Check for child: Expected a child \"p\" element' );\r\n\tok( !$('#foo').is('[ul]'), 'Check for child: Did not expect \"ul\" element' );\r\n\tok( $('#foo').is('[p][a][code]'), 'Check for childs: Expected \"p\", \"a\" and \"code\" child elements' );\r\n\tok( !$('#foo').is('[p][a][code][ol]'), 'Check for childs: Expected \"p\", \"a\" and \"code\" child elements, but no \"ol\"' );\r\n\tok( !$('#foo').is(0), 'Expected false for an invalid expression - 0' );\r\n\tok( !$('#foo').is(null), 'Expected false for an invalid expression - null' );\r\n\tok( !$('#foo').is(''), 'Expected false for an invalid expression - \"\"' );\r\n\tok( !$('#foo').is(undefined), 'Expected false for an invalid expression - undefined' );\r\n\t\r\n\t// test is() with comma-seperated expressions\r\n\tok( $('#en').is('[@lang=\"en\"],[@lang=\"de\"]'), 'Check for lang attribute: Expecte en or de' );\r"}]},
{"id":"f99444a1a4da94472079afb066860545d5c91929","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[708,729],"code":"test(\"filter()\", function() {\n\texpect(4);\n\tisSet( $(\"input\").filter(\":checked\").get(), q(\"radio2\", \"check1\"), \"filter(String)\" );\n\tisSet( $(\"p\").filter(\"#ap, #sndp\").get(), q(\"ap\", \"sndp\"), \"filter('String, String')\" );\n\tisSet( $(\"p\").filter(\"#ap,#sndp\").get(), q(\"ap\", \"sndp\"), \"filter('String,String')\" );\n\tisSet( $(\"p\").filter(function() { return !$(\"a\", this).length }).get(), q(\"sndp\", \"first\"), \"filter(Function)\" );\n});\n\ntest(\"not()\", function() {\n\texpect(3);\n\tok( $(\"#main > p#ap > a\").not(\"#google\").length == 2, \"not('selector')\" );\n\tisSet( $(\"p\").not(\"#ap, #sndp, .result\").get(), q(\"firstp\", \"en\", \"sap\", \"first\"), \"not('selector, selector')\" );\n\tisSet( $(\"p\").not($(\"#ap, #sndp, .result\")).get(), q(\"firstp\", \"en\", \"sap\", \"first\"), \"not(jQuery)\" );\n});\n\ntest(\"siblings([String])\", function() {\n\texpect(4);\n\tisSet( $(\"#en\").siblings().get(), q(\"sndp\", \"sap\"), \"Check for siblings\" );\n\tisSet( $(\"#sndp\").siblings(\"[code]\").get(), q(\"sap\"), \"Check for filtered siblings (has code child element)\" ); \n\tisSet( $(\"#sndp\").siblings(\"[a]\").get(), q(\"en\", \"sap\"), \"Check for filtered siblings (has anchor child element)\" );\n\tisSet( $(\"#foo\").siblings(\"form, b\").get(), q(\"form\", \"lengthtest\", \"floatTest\"), \"Check for multiple filters\" );\n});"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[515,537],"code":"test(\"filter()\", function() {\r\n\texpect(4);\r\n\tisSet( $(\"input\").filter(\":checked\").get(), q(\"radio2\", \"check1\"), \"filter(String)\" );\r\n\tisSet( $(\"p\").filter(\"#ap, #sndp\").get(), q(\"ap\", \"sndp\"), \"filter('String, String')\" );\r\n\tisSet( $(\"p\").filter(\"#ap,#sndp\").get(), q(\"ap\", \"sndp\"), \"filter('String,String')\" );\r\n\tisSet( $(\"p\").filter(function() { return !$(\"a\", this).length }).get(), q(\"sndp\", \"first\"), \"filter(Function)\" );\r\n});\r\n\r\ntest(\"not()\", function() {\r\n\texpect(3);\r\n\tok( $(\"#main > p#ap > a\").not(\"#google\").length == 2, \"not('selector')\" );\r\n\tisSet( $(\"p\").not(\"#ap, #sndp, .result\").get(), q(\"firstp\", \"en\", \"sap\", \"first\"), \"not('selector, selector')\" );\r\n\tisSet( $(\"p\").not($(\"#ap, #sndp, .result\")).get(), q(\"firstp\", \"en\", \"sap\", \"first\"), \"not(jQuery)\" );\r\n});\r\n\r\n\r\ntest(\"siblings([String])\", function() {\r\n\texpect(4);\r\n\tisSet( $(\"#en\").siblings().get(), q(\"sndp\", \"sap\"), \"Check for siblings\" );\r\n\tisSet( $(\"#sndp\").siblings(\"[code]\").get(), q(\"sap\"), \"Check for filtered siblings (has code child element)\" ); \r\n\tisSet( $(\"#sndp\").siblings(\"[a]\").get(), q(\"en\", \"sap\"), \"Check for filtered siblings (has anchor child element)\" );\r\n\tisSet( $(\"#foo\").siblings(\"form, b\").get(), q(\"form\", \"floatTest\"), \"Check for multiple filters\" );\r\n});\r"}]},
{"id":"780403bbc6e7e287eb4a24e9b1d6ffe25bd2df96","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[794,802],"code":"var div = $(\"div\").addClass(\"test\").addClass(\"foo\").addClass(\"bar\");\ndiv.removeClass(\"test\").removeClass(\"bar\").removeClass(\"foo\");\nvar pass = true;\nfor ( var i = 0; i < div.size(); i++ ) {\n if ( div.get(i).className.match(/test|bar|foo/) ) pass = false;\n}\nok( pass, \"Remove multiple classes\" );\n\nreset();"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[603,612],"code":"\tvar div = $(\"div\").addClass(\"test\").addClass(\"foo\").addClass(\"bar\");\r\n\tdiv.removeClass(\"test\").removeClass(\"bar\").removeClass(\"foo\");\r\n\tvar pass = true;\r\n\tfor ( var i = 0; i < div.size(); i++ ) {\r\n\t if ( div.get(i).className.match(/test|bar|foo/) ) pass = false;\r\n\t}\r\n\tok( pass, \"Remove multiple classes\" );\r\n});\r\n\r\ntest(\"toggleClass(String)\", function() {\r"}]},
{"id":"67d04fc504b6d26d5ce2613b394cf30b677f19b9","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[808,821],"code":"test(\"toggleClass(String)\", function() {\n\texpect(3);\n\tvar e = $(\"#firstp\");\n\tok( !e.is(\".test\"), \"Assert class not present\" );\n\te.toggleClass(\"test\");\n\tok( e.is(\".test\"), \"Assert class present\" ); \n\te.toggleClass(\"test\");\n\tok( !e.is(\".test\"), \"Assert class not present\" );\n});\n\ntest(\"removeAttr(String\", function() {\n\texpect(1);\n\tok( $('#mark').removeAttr(\"class\")[0].className == \"\", \"remove class\" );\n});"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[612,624],"code":"test(\"toggleClass(String)\", function() {\r\n\texpect(3);\r\n\tvar e = $(\"#firstp\");\r\n\tok( !e.is(\".test\"), \"Assert class not present\" );\r\n\te.toggleClass(\"test\");\r\n\tok( e.is(\".test\"), \"Assert class present\" ); \r\n\te.toggleClass(\"test\");\r\n\tok( !e.is(\".test\"), \"Assert class not present\" );\r\n});\r\n\r\ntest(\"removeAttr(String\", function() {\r\n\tok( $('#mark').removeAttr(\"class\")[0].className == \"\", \"remove class\" );\r\n});\r"}]},
{"id":"f30bfbf6034071e5ed0462ca1ffb17ffda6ed884","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/coreTest.js","lines":[820,868],"code":"\tok( $('#mark').removeAttr(\"class\")[0].className == \"\", \"remove class\" );\n});\n\ntest(\"text(String)\", function() {\n\texpect(1);\n\tok( $(\"#foo\").text(\"<div><b>Hello</b> cruel world!</div>\")[0].innerHTML == \"&lt;div&gt;&lt;b&gt;Hello&lt;/b&gt; cruel world!&lt;/div&gt;\", \"Check escaped text\" );\n});\n\ntest(\"$.each(Object,Function)\", function() {\n\texpect(8);\n\t$.each( [0,1,2], function(i, n){\n\t\tok( i == n, \"Check array iteration\" );\n\t});\n\t\n\t$.each( [5,6,7], function(i, n){\n\t\tok( i == n - 5, \"Check array iteration\" );\n\t});\n\t \n\t$.each( { name: \"name\", lang: \"lang\" }, function(i, n){\n\t\tok( i == n, \"Check object iteration\" );\n\t});\n});\n\ntest(\"$.prop\", function() {\n\texpect(2);\n\tvar handle = function() { return this.id };\n\tok( $.prop($(\"#ap\")[0], handle) == \"ap\", \"Check with Function argument\" );\n\tok( $.prop($(\"#ap\")[0], \"value\") == \"value\", \"Check with value argument\" );\n});\n\ntest(\"$.className\", function() {\n\texpect(6);\n\tvar x = $(\"<p>Hi</p>\")[0];\n\tvar c = $.className;\n\tc.add(x, \"hi\");\n\tok( x.className == \"hi\", \"Check single added class\" );\n\tc.add(x, \"foo bar\");\n\tok( x.className == \"hi foo bar\", \"Check more added classes\" );\n\tc.remove(x);\n\tok( x.className == \"\", \"Remove all classes\" );\n\tc.add(x, \"hi foo bar\");\n\tc.remove(x, \"foo\");\n\tok( x.className == \"hi bar\", \"Check removal of one class\" );\n\tok( c.has(x, \"hi\"), \"Check has1\" );\n\tok( c.has(x, \"bar\"), \"Check has2\" );\n});\n\ntest(\"remove()\", function() {\n\texpect(4);"},{"path":"./jquery-data/1.1.2/src/jquery/coreTest.js","lines":[623,671],"code":"\tok( $('#mark').removeAttr(\"class\")[0].className == \"\", \"remove class\" );\r\n});\r\n\r\ntest(\"text(String)\", function() {\r\n\texpect(1);\r\n\tok( $(\"#foo\").text(\"<div><b>Hello</b> cruel world!</div>\")[0].innerHTML == \"&lt;div&gt;&lt;b&gt;Hello&lt;/b&gt; cruel world!&lt;/div&gt;\", \"Check escaped text\" );\r\n});\r\n\r\ntest(\"$.each(Object,Function)\", function() {\r\n\texpect(8);\r\n\t$.each( [0,1,2], function(i, n){\r\n\t\tok( i == n, \"Check array iteration\" );\r\n\t});\r\n\t\r\n\t$.each( [5,6,7], function(i, n){\r\n\t\tok( i == n - 5, \"Check array iteration\" );\r\n\t});\r\n\t \r\n\t$.each( { name: \"name\", lang: \"lang\" }, function(i, n){\r\n\t\tok( i == n, \"Check object iteration\" );\r\n\t});\r\n});\r\n\r\ntest(\"$.prop\", function() {\r\n\texpect(2);\r\n\tvar handle = function() { return this.id };\r\n\tok( $.prop($(\"#ap\")[0], handle) == \"ap\", \"Check with Function argument\" );\r\n\tok( $.prop($(\"#ap\")[0], \"value\") == \"value\", \"Check with value argument\" );\r\n});\r\n\r\ntest(\"$.className\", function() {\r\n\texpect(6);\r\n\tvar x = $(\"<p>Hi</p>\")[0];\r\n\tvar c = $.className;\r\n\tc.add(x, \"hi\");\r\n\tok( x.className == \"hi\", \"Check single added class\" );\r\n\tc.add(x, \"foo bar\");\r\n\tok( x.className == \"hi foo bar\", \"Check more added classes\" );\r\n\tc.remove(x);\r\n\tok( x.className == \"\", \"Remove all classes\" );\r\n\tc.add(x, \"hi foo bar\");\r\n\tc.remove(x, \"foo\");\r\n\tok( x.className == \"hi bar\", \"Check removal of one class\" );\r\n\tok( c.has(x, \"hi\"), \"Check has1\" );\r\n\tok( c.has(x, \"bar\"), \"Check has2\" );\r\n});\r\n\r\ntest(\"remove()\", function() {\r\n\t$(\"#ap\").children().remove();\r"}]},
{"id":"bf99ea4064423cefbe3392d59fedd321f6302ece","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[143,182],"code":"/**\n * Initialize a new jQuery object\n *\n * @private\n * @name init\n * @param String|Function|Element|Array<Element>|jQuery a selector\n * @param jQuery|Element|Array<Element> c context\n * @cat Core\n */\ninit: function(a,c) {\n\t// Make sure that a selection was provided\n\ta = a || document;\n\n\t// HANDLE: $(function)\n\t// Shortcut for document ready\n\tif ( jQuery.isFunction(a) )\n\t\treturn new jQuery(document)[ jQuery.fn.ready ? \"ready\" : \"load\" ]( a );\n\n\t// Handle HTML strings\n\tif ( typeof a  == \"string\" ) {\n\t\t// HANDLE: $(html) -> $(array)\n\t\tvar m = /^[^<]*(<(.|\\s)+>)[^>]*$/.exec(a);\n\t\tif ( m )\n\t\t\ta = jQuery.clean( [ m[1] ] );\n\n\t\t// HANDLE: $(expr)\n\t\telse\n\t\t\treturn new jQuery( c ).find( a );\n\t}\n\n\treturn this.setArray(\n\t\t// HANDLE: $(array)\n\t\ta.constructor == Array && a ||\n\n\t\t// HANDLE: $(arraylike)\n\t\t// Watch for when an array-like object is passed as the selector\n\t\t(a.jquery || a.length && a != window && !a.nodeType && a[0] != undefined && a[0].nodeType) && jQuery.makeArray( a ) ||\n\n\t\t// HANDLE: $(*)\n\t\t[ a ] );"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[15,59],"code":"/**\n * Create a new jQuery Object\n *\n * @constructor\n * @private\n * @name jQuery\n * @param String|Function|Element|Array<Element>|jQuery a selector\n * @param jQuery|Element|Array<Element> c context\n * @cat Core\n */\nvar jQuery = function(a,c) {\n\t// If the context is global, return a new object\n\tif ( window == this )\n\t\treturn new jQuery(a,c);\n\n\t// Make sure that a selection was provided\n\ta = a || document;\n\t\n\t// HANDLE: $(function)\n\t// Shortcut for document ready\n\tif ( jQuery.isFunction(a) )\n\t\treturn new jQuery(document)[ jQuery.fn.ready ? \"ready\" : \"load\" ]( a );\n\t\n\t// Handle HTML strings\n\tif ( typeof a  == \"string\" ) {\n\t\t// HANDLE: $(html) -> $(array)\n\t\tvar m = /^[^<]*(<(.|\\s)+>)[^>]*$/.exec(a);\n\t\tif ( m )\n\t\t\ta = jQuery.clean( [ m[1] ] );\n\t\t\n\t\t// HANDLE: $(expr)\n\t\telse\n\t\t\treturn new jQuery( c ).find( a );\n\t}\n\t\n\treturn this.setArray(\n\t\t// HANDLE: $(array)\n\t\ta.constructor == Array && a ||\n\n\t\t// HANDLE: $(arraylike)\n\t\t// Watch for when an array-like object is passed as the selector\n\t\t(a.jquery || a.length && a != window && !a.nodeType && a[0] != undefined && a[0].nodeType) && jQuery.makeArray( a ) ||\n\n\t\t// HANDLE: $(*)\n\t\t[ a ] );"}]},
{"id":"53e90db17d2f651386a6da5bd77badb4885a899e","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[185,630],"code":"/**\n * The current version of jQuery.\n *\n * @private\n * @property\n * @name jquery\n * @type String\n * @cat Core\n */\njquery: \"@VERSION\",\n\n/**\n * The number of elements currently matched. The size function will return the same value.\n *\n * @example $(\"img\").length;\n * @before <img src=\"test1.jpg\"/> <img src=\"test2.jpg\"/>\n * @result 2\n *\n * @property\n * @name length\n * @type Number\n * @cat Core\n */\n\n/**\n * Get the number of elements currently matched. This returns the same\n * number as the 'length' property of the jQuery object.\n *\n * @example $(\"img\").size();\n * @before <img src=\"test1.jpg\"/> <img src=\"test2.jpg\"/>\n * @result 2\n *\n * @name size\n * @type Number\n * @cat Core\n */\nsize: function() {\n\treturn this.length;\n},\n\nlength: 0,\n\n/**\n * Access all matched DOM elements. This serves as a backwards-compatible\n * way of accessing all matched elements (other than the jQuery object\n * itself, which is, in fact, an array of elements).\n *\n * It is useful if you need to operate on the DOM elements themselves instead of using built-in jQuery functions.\n *\n * @example $(\"img\").get();\n * @before <img src=\"test1.jpg\"/> <img src=\"test2.jpg\"/>\n * @result [ <img src=\"test1.jpg\"/> <img src=\"test2.jpg\"/> ]\n * @desc Selects all images in the document and returns the DOM Elements as an Array\n *\n * @name get\n * @type Array<Element>\n * @cat Core\n */\n\n/**\n * Access a single matched DOM element at a specified index in the matched set.\n * This allows you to extract the actual DOM element and operate on it\n * directly without necessarily using jQuery functionality on it.\n *\n * @example $(\"img\").get(0);\n * @before <img src=\"test1.jpg\"/> <img src=\"test2.jpg\"/>\n * @result <img src=\"test1.jpg\"/>\n * @desc Selects all images in the document and returns the first one\n *\n * @name get\n * @type Element\n * @param Number num Access the element in the Nth position.\n * @cat Core\n */\nget: function( num ) {\n\treturn num == undefined ?\n\n\t\t// Return a 'clean' array\n\t\tjQuery.makeArray( this ) :\n\n\t\t// Return just the object\n\t\tthis[num];\n},\n\n/**\n * Set the jQuery object to an array of elements, while maintaining\n * the stack.\n *\n * @example $(\"img\").pushStack([ document.body ]);\n * @result $(\"img\").pushStack() == [ document.body ]\n *\n * @private\n * @name pushStack\n * @type jQuery\n * @param Elements elems An array of elements\n * @cat Core\n */\npushStack: function( a ) {\n\tvar ret = jQuery(a);\n\tret.prevObject = this;"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[172,617],"code":"/**\n * The current version of jQuery.\n *\n * @private\n * @property\n * @name jquery\n * @type String\n * @cat Core\n */\njquery: \"@VERSION\",\n\n/**\n * The number of elements currently matched. The size function will return the same value.\n *\n * @example $(\"img\").length;\n * @before <img src=\"test1.jpg\"/> <img src=\"test2.jpg\"/>\n * @result 2\n *\n * @property\n * @name length\n * @type Number\n * @cat Core\n */\n\n/**\n * Get the number of elements currently matched. This returns the same\n * number as the 'length' property of the jQuery object.\n *\n * @example $(\"img\").size();\n * @before <img src=\"test1.jpg\"/> <img src=\"test2.jpg\"/>\n * @result 2\n *\n * @name size\n * @type Number\n * @cat Core\n */\nsize: function() {\n\treturn this.length;\n},\n\nlength: 0,\n\n/**\n * Access all matched DOM elements. This serves as a backwards-compatible\n * way of accessing all matched elements (other than the jQuery object\n * itself, which is, in fact, an array of elements).\n *\n * It is useful if you need to operate on the DOM elements themselves instead of using built-in jQuery functions.\n *\n * @example $(\"img\").get();\n * @before <img src=\"test1.jpg\"/> <img src=\"test2.jpg\"/>\n * @result [ <img src=\"test1.jpg\"/> <img src=\"test2.jpg\"/> ]\n * @desc Selects all images in the document and returns the DOM Elements as an Array\n *\n * @name get\n * @type Array<Element>\n * @cat Core\n */\n\n/**\n * Access a single matched DOM element at a specified index in the matched set.\n * This allows you to extract the actual DOM element and operate on it\n * directly without necessarily using jQuery functionality on it.\n *\n * @example $(\"img\").get(0);\n * @before <img src=\"test1.jpg\"/> <img src=\"test2.jpg\"/>\n * @result <img src=\"test1.jpg\"/>\n * @desc Selects all images in the document and returns the first one\n *\n * @name get\n * @type Element\n * @param Number num Access the element in the Nth position.\n * @cat Core\n */\nget: function( num ) {\n\treturn num == undefined ?\n\n\t\t// Return a 'clean' array\n\t\tjQuery.makeArray( this ) :\n\n\t\t// Return just the object\n\t\tthis[num];\n},\n\n/**\n * Set the jQuery object to an array of elements, while maintaining\n * the stack.\n *\n * @example $(\"img\").pushStack([ document.body ]);\n * @result $(\"img\").pushStack() == [ document.body ]\n *\n * @private\n * @name pushStack\n * @type jQuery\n * @param Elements elems An array of elements\n * @cat Core\n */\npushStack: function( a ) {\n\tvar ret = jQuery(a);\n\tret.prevObject = this;"}]},
{"id":"24653cd6f8756ceabfbd43b91a498c467ae80e30","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[838,1077],"code":"/**\n * Clone matched DOM Elements and select the clones. \n *\n * This is useful for moving copies of the elements to another\n * location in the DOM.\n *\n * @example $(\"b\").clone().prependTo(\"p\");\n * @before <b>Hello</b><p>, how are you?</p>\n * @result <b>Hello</b><p><b>Hello</b>, how are you?</p>\n * @desc Clones all b elements (and selects the clones) and prepends them to all paragraphs.\n *\n * @name clone\n * @type jQuery\n * @param Boolean deep (Optional) Set to false if you don't want to clone all descendant nodes, in addition to the element itself.\n * @cat DOM/Manipulation\n */\nclone: function(deep) {\n\t// Need to remove events on the element and its descendants\n\tvar $this = this.add(this.find(\"*\"));\n\t$this.each(function() {\n\t\tthis._$events = {};\n\t\tfor (var type in this.$events)\n\t\t\tthis._$events[type] = jQuery.extend({},this.$events[type]);\n\t}).unbind();\n\n\t// Do the clone\n\tvar r = this.pushStack( jQuery.map( this, function(a){\n\t\treturn a.cloneNode( deep != undefined ? deep : true );\n\t}) );\n\n\t// Add the events back to the original and its descendants\n\t$this.each(function() {\n\t\tvar events = this._$events;\n\t\tfor (var type in events)\n\t\t\tfor (var handler in events[type])\n\t\t\t\tjQuery.event.add(this, type, events[type][handler], events[type][handler].data);\n\t\tthis._$events = null;\n\t});\n\n\t// Return the cloned set\n\treturn r;\n},\n\n/**\n * Removes all elements from the set of matched elements that do not\n * match the specified expression(s). This method is used to narrow down\n * the results of a search.\n *\n * Provide a comma-separated list of expressions to apply multiple filters at once.\n *\n * @example $(\"p\").filter(\".selected\")\n * @before <p class=\"selected\">Hello</p><p>How are you?</p>\n * @result [ <p class=\"selected\">Hello</p> ]\n * @desc Selects all paragraphs and removes those without a class \"selected\".\n *\n * @example $(\"p\").filter(\".selected, :first\")\n * @before <p>Hello</p><p>Hello Again</p><p class=\"selected\">And Again</p>\n * @result [ <p>Hello</p>, <p class=\"selected\">And Again</p> ]\n * @desc Selects all paragraphs and removes those without class \"selected\" and being the first one.\n *\n * @name filter\n * @type jQuery\n * @param String expression Expression(s) to search with.\n * @cat DOM/Traversing\n */\n \n/**\n * Removes all elements from the set of matched elements that do not\n * pass the specified filter. This method is used to narrow down\n * the results of a search.\n *\n * @example $(\"p\").filter(function(index) {\n *   return $(\"ol\", this).length == 0;\n * })\n * @before <p><ol><li>Hello</li></ol></p><p>How are you?</p>\n * @result [ <p>How are you?</p> ]\n * @desc Remove all elements that have a child ol element\n *\n * @name filter\n * @type jQuery\n * @param Function filter A function to use for filtering\n * @cat DOM/Traversing\n */\nfilter: function(t) {\n\treturn this.pushStack(\n\t\tjQuery.isFunction( t ) &&\n\t\tjQuery.grep(this, function(el, index){\n\t\t\treturn t.apply(el, [index])\n\t\t}) ||\n\n\t\tjQuery.multiFilter(t,this) );\n},\n\n/**\n * Removes the specified Element from the set of matched elements. This\n * method is used to remove a single Element from a jQuery object.\n *\n * @example $(\"p\").not( $(\"#selected\")[0] )\n * @before <p>Hello</p><p id=\"selected\">Hello Again</p>\n * @result [ <p>Hello</p> ]"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[822,1046],"code":"/**\n * Clone matched DOM Elements and select the clones. \n *\n * This is useful for moving copies of the elements to another\n * location in the DOM.\n *\n * @example $(\"b\").clone().prependTo(\"p\");\n * @before <b>Hello</b><p>, how are you?</p>\n * @result <b>Hello</b><p><b>Hello</b>, how are you?</p>\n * @desc Clones all b elements (and selects the clones) and prepends them to all paragraphs.\n *\n * @name clone\n * @type jQuery\n * @param Boolean deep (Optional) Set to false if you don't want to clone all descendant nodes, in addition to the element itself.\n * @cat DOM/Manipulation\n */\nclone: function(deep) {\n\treturn this.pushStack( jQuery.map( this, function(a){\n\t\tvar a = a.cloneNode( deep != undefined ? deep : true );\n\t\ta.$events = null; // drop $events expando to avoid firing incorrect events\n\t\treturn a;\n\t}) );\n},\n\n/**\n * Removes all elements from the set of matched elements that do not\n * match the specified expression(s). This method is used to narrow down\n * the results of a search.\n *\n * Provide a comma-separated list of expressions to apply multiple filters at once.\n *\n * @example $(\"p\").filter(\".selected\")\n * @before <p class=\"selected\">Hello</p><p>How are you?</p>\n * @result [ <p class=\"selected\">Hello</p> ]\n * @desc Selects all paragraphs and removes those without a class \"selected\".\n *\n * @example $(\"p\").filter(\".selected, :first\")\n * @before <p>Hello</p><p>Hello Again</p><p class=\"selected\">And Again</p>\n * @result [ <p>Hello</p>, <p class=\"selected\">And Again</p> ]\n * @desc Selects all paragraphs and removes those without class \"selected\" and being the first one.\n *\n * @name filter\n * @type jQuery\n * @param String expression Expression(s) to search with.\n * @cat DOM/Traversing\n */\n \n/**\n * Removes all elements from the set of matched elements that do not\n * pass the specified filter. This method is used to narrow down\n * the results of a search.\n *\n * @example $(\"p\").filter(function(index) {\n *   return $(\"ol\", this).length == 0;\n * })\n * @before <p><ol><li>Hello</li></ol></p><p>How are you?</p>\n * @result [ <p>How are you?</p> ]\n * @desc Remove all elements that have a child ol element\n *\n * @name filter\n * @type jQuery\n * @param Function filter A function to use for filtering\n * @cat DOM/Traversing\n */\nfilter: function(t) {\n\treturn this.pushStack(\n\t\tjQuery.isFunction( t ) &&\n\t\tjQuery.grep(this, function(el, index){\n\t\t\treturn t.apply(el, [index])\n\t\t}) ||\n\n\t\tjQuery.multiFilter(t,this) );\n},\n\n/**\n * Removes the specified Element from the set of matched elements. This\n * method is used to remove a single Element from a jQuery object.\n *\n * @example $(\"p\").not( $(\"#selected\")[0] )\n * @before <p>Hello</p><p id=\"selected\">Hello Again</p>\n * @result [ <p>Hello</p> ]\n * @desc Removes the element with the ID \"selected\" from the set of all paragraphs.\n *\n * @name not\n * @type jQuery\n * @param Element el An element to remove from the set\n * @cat DOM/Traversing\n */\n\n/**\n * Removes elements matching the specified expression from the set\n * of matched elements. This method is used to remove one or more\n * elements from a jQuery object.\n *\n * @example $(\"p\").not(\"#selected\")\n * @before <p>Hello</p><p id=\"selected\">Hello Again</p>\n * @result [ <p>Hello</p> ]\n * @desc Removes the element with the ID \"selected\" from the set of all paragraphs.\n *\n * @name not"}]},
{"id":"3b941211e1484c548fb6eb4128c29aae7bc2d691","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[1051,1159],"code":"/**\n * Checks the current selection against an expression and returns true,\n * if at least one element of the selection fits the given expression.\n *\n * Does return false, if no element fits or the expression is not valid.\n *\n * filter(String) is used internally, therefore all rules that apply there\n * apply here, too.\n *\n * @example $(\"input[@type='checkbox']\").parent().is(\"form\")\n * @before <form><input type=\"checkbox\" /></form>\n * @result true\n * @desc Returns true, because the parent of the input is a form element\n * \n * @example $(\"input[@type='checkbox']\").parent().is(\"form\")\n * @before <form><p><input type=\"checkbox\" /></p></form>\n * @result false\n * @desc Returns false, because the parent of the input is a p element\n *\n * @name is\n * @type Boolean\n * @param String expr The expression with which to filter\n * @cat DOM/Traversing\n */\nis: function(expr) {\n\treturn expr ? jQuery.multiFilter(expr,this).length > 0 : false;\n},\n\n/**\n * Get the content of the value attribute of the first matched element.\n *\n * Use caution when relying on this function to check the value of\n * multiple-select elements and checkboxes in a form. While it will\n * still work as intended, it may not accurately represent the value\n * the server will receive because these elements may send an array\n * of values. For more robust handling of field values, see the\n * [http://www.malsup.com/jquery/form/#fields fieldValue function of the Form Plugin].\n *\n * @example $(\"input\").val();\n * @before <input type=\"text\" value=\"some text\"/>\n * @result \"some text\"\n *\n * @name val\n * @type String\n * @cat DOM/Attributes\n */\n\n/**\n * \tSet the value attribute of every matched element.\n *\n * @example $(\"input\").val(\"test\");\n * @before <input type=\"text\" value=\"some text\"/>\n * @result <input type=\"text\" value=\"test\"/>\n *\n * @name val\n * @type jQuery\n * @param String val Set the property to the specified value.\n * @cat DOM/Attributes\n */\nval: function( val ) {\n\treturn val == undefined ?\n\t\t( this.length ? this[0].value : null ) :\n\t\tthis.attr( \"value\", val );\n},\n\n/**\n * Get the html contents of the first matched element.\n * This property is not available on XML documents.\n *\n * @example $(\"div\").html();\n * @before <div><input/></div>\n * @result <input/>\n *\n * @name html\n * @type String\n * @cat DOM/Attributes\n */\n\n/**\n * Set the html contents of every matched element.\n * This property is not available on XML documents.\n *\n * @example $(\"div\").html(\"<b>new stuff</b>\");\n * @before <div><input/></div>\n * @result <div><b>new stuff</b></div>\n *\n * @name html\n * @type jQuery\n * @param String val Set the html contents to the specified value.\n * @cat DOM/Attributes\n */\nhtml: function( val ) {\n\treturn val == undefined ?\n\t\t( this.length ? this[0].innerHTML : null ) :\n\t\tthis.empty().append( val );\n},\n\n/**\n * @private\n * @name domManip"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[1020,1128],"code":"/**\n * Checks the current selection against an expression and returns true,\n * if at least one element of the selection fits the given expression.\n *\n * Does return false, if no element fits or the expression is not valid.\n *\n * filter(String) is used internally, therefore all rules that apply there\n * apply here, too.\n *\n * @example $(\"input[@type='checkbox']\").parent().is(\"form\")\n * @before <form><input type=\"checkbox\" /></form>\n * @result true\n * @desc Returns true, because the parent of the input is a form element\n * \n * @example $(\"input[@type='checkbox']\").parent().is(\"form\")\n * @before <form><p><input type=\"checkbox\" /></p></form>\n * @result false\n * @desc Returns false, because the parent of the input is a p element\n *\n * @name is\n * @type Boolean\n * @param String expr The expression with which to filter\n * @cat DOM/Traversing\n */\nis: function(expr) {\n\treturn expr ? jQuery.filter(expr,this).r.length > 0 : false;\n},\n\n/**\n * Get the content of the value attribute of the first matched element.\n *\n * Use caution when relying on this function to check the value of\n * multiple-select elements and checkboxes in a form. While it will\n * still work as intended, it may not accurately represent the value\n * the server will receive because these elements may send an array\n * of values. For more robust handling of field values, see the\n * [http://www.malsup.com/jquery/form/#fields fieldValue function of the Form Plugin].\n *\n * @example $(\"input\").val();\n * @before <input type=\"text\" value=\"some text\"/>\n * @result \"some text\"\n *\n * @name val\n * @type String\n * @cat DOM/Attributes\n */\n\n/**\n * \tSet the value attribute of every matched element.\n *\n * @example $(\"input\").val(\"test\");\n * @before <input type=\"text\" value=\"some text\"/>\n * @result <input type=\"text\" value=\"test\"/>\n *\n * @name val\n * @type jQuery\n * @param String val Set the property to the specified value.\n * @cat DOM/Attributes\n */\nval: function( val ) {\n\treturn val == undefined ?\n\t\t( this.length ? this[0].value : null ) :\n\t\tthis.attr( \"value\", val );\n},\n\n/**\n * Get the html contents of the first matched element.\n * This property is not available on XML documents.\n *\n * @example $(\"div\").html();\n * @before <div><input/></div>\n * @result <input/>\n *\n * @name html\n * @type String\n * @cat DOM/Attributes\n */\n\n/**\n * Set the html contents of every matched element.\n * This property is not available on XML documents.\n *\n * @example $(\"div\").html(\"<b>new stuff</b>\");\n * @before <div><input/></div>\n * @result <div><b>new stuff</b></div>\n *\n * @name html\n * @type jQuery\n * @param String val Set the html contents to the specified value.\n * @cat DOM/Attributes\n */\nhtml: function( val ) {\n\treturn val == undefined ?\n\t\t( this.length ? this[0].innerHTML : null ) :\n\t\tthis.empty().append( val );\n},\n\n/**\n * @private\n * @name domManip"}]},
{"id":"c0adb3862c493ecc42adfbcc10ba778e397479e1","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[1148,1242],"code":"\t/**\n\t * @private\n\t * @name domManip\n\t * @param Array args\n\t * @param Boolean table Insert TBODY in TABLEs if one is not found.\n\t * @param Number dir If dir<0, process args in reverse order.\n\t * @param Function fn The function doing the DOM manipulation.\n\t * @type jQuery\n\t * @cat Core\n\t */\n\tdomManip: function(args, table, dir, fn){\n\t\tvar clone = this.length > 1, a; \n\n\t\treturn this.each(function(){\n\t\t\tif ( !a ) {\n\t\t\t\ta = jQuery.clean(args, this.ownerDocument);\n\t\t\t\tif ( dir < 0 )\n\t\t\t\t\ta.reverse();\n\t\t\t}\n\n\t\t\tvar obj = this;\n\n\t\t\tif ( table && jQuery.nodeName(this, \"table\") && jQuery.nodeName(a[0], \"tr\") )\n\t\t\t\tobj = this.getElementsByTagName(\"tbody\")[0] || this.appendChild(document.createElement(\"tbody\"));\n\n\t\t\tjQuery.each( a, function(){\n\t\t\t\tfn.apply( obj, [ clone ? this.cloneNode(true) : this ] );\n\t\t\t});\n\n\t\t});\n\t}\n};\n\n/**\n * Extends the jQuery object itself. Can be used to add functions into\n * the jQuery namespace and to [[Plugins/Authoring|add plugin methods]] (plugins).\n * \n * @example jQuery.fn.extend({\n *   check: function() {\n *     return this.each(function() { this.checked = true; });\n *   },\n *   uncheck: function() {\n *     return this.each(function() { this.checked = false; });\n *   }\n * });\n * $(\"input[@type=checkbox]\").check();\n * $(\"input[@type=radio]\").uncheck();\n * @desc Adds two plugin methods.\n *\n * @example jQuery.extend({\n *   min: function(a, b) { return a < b ? a : b; },\n *   max: function(a, b) { return a > b ? a : b; }\n * });\n * @desc Adds two functions into the jQuery namespace\n *\n * @name $.extend\n * @param Object prop The object that will be merged into the jQuery object\n * @type Object\n * @cat Core\n */\n\n/**\n * Extend one object with one or more others, returning the original,\n * modified, object. This is a great utility for simple inheritance.\n * \n * @example var settings = { validate: false, limit: 5, name: \"foo\" };\n * var options = { validate: true, name: \"bar\" };\n * jQuery.extend(settings, options);\n * @result settings == { validate: true, limit: 5, name: \"bar\" }\n * @desc Merge settings and options, modifying settings\n *\n * @example var defaults = { validate: false, limit: 5, name: \"foo\" };\n * var options = { validate: true, name: \"bar\" };\n * var settings = jQuery.extend({}, defaults, options);\n * @result settings == { validate: true, limit: 5, name: \"bar\" }\n * @desc Merge defaults and options, without modifying the defaults\n *\n * @name $.extend\n * @param Object target The object to extend\n * @param Object prop1 The object that will be merged into the first.\n * @param Object propN (optional) More objects to merge into the first\n * @type Object\n * @cat JavaScript\n */\njQuery.extend = jQuery.fn.extend = function() {\n\t// copy reference to target object\n\tvar target = arguments[0], a = 1;\n\n\t// extend jQuery itself if only one argument is passed\n\tif ( arguments.length == 1 ) {\n\t\ttarget = this;\n\t\ta = 0;\n\t}\n\tvar prop;\n\twhile ( (prop = arguments[a++]) != null )"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[1117,1209],"code":"\t/**\n\t * @private\n\t * @name domManip\n\t * @param Array args\n\t * @param Boolean table Insert TBODY in TABLEs if one is not found.\n\t * @param Number dir If dir<0, process args in reverse order.\n\t * @param Function fn The function doing the DOM manipulation.\n\t * @type jQuery\n\t * @cat Core\n\t */\n\tdomManip: function(args, table, dir, fn){\n\t\tvar clone = this.length > 1; \n\t\tvar a = jQuery.clean(args);\n\t\tif ( dir < 0 )\n\t\t\ta.reverse();\n\n\t\treturn this.each(function(){\n\t\t\tvar obj = this;\n\n\t\t\tif ( table && jQuery.nodeName(this, \"table\") && jQuery.nodeName(a[0], \"tr\") )\n\t\t\t\tobj = this.getElementsByTagName(\"tbody\")[0] || this.appendChild(document.createElement(\"tbody\"));\n\n\t\t\tjQuery.each( a, function(){\n\t\t\t\tfn.apply( obj, [ clone ? this.cloneNode(true) : this ] );\n\t\t\t});\n\n\t\t});\n\t}\n};\n\n/**\n * Extends the jQuery object itself. Can be used to add functions into\n * the jQuery namespace and to [[Plugins/Authoring|add plugin methods]] (plugins).\n * \n * @example jQuery.fn.extend({\n *   check: function() {\n *     return this.each(function() { this.checked = true; });\n *   },\n *   uncheck: function() {\n *     return this.each(function() { this.checked = false; });\n *   }\n * });\n * $(\"input[@type=checkbox]\").check();\n * $(\"input[@type=radio]\").uncheck();\n * @desc Adds two plugin methods.\n *\n * @example jQuery.extend({\n *   min: function(a, b) { return a < b ? a : b; },\n *   max: function(a, b) { return a > b ? a : b; }\n * });\n * @desc Adds two functions into the jQuery namespace\n *\n * @name $.extend\n * @param Object prop The object that will be merged into the jQuery object\n * @type Object\n * @cat Core\n */\n\n/**\n * Extend one object with one or more others, returning the original,\n * modified, object. This is a great utility for simple inheritance.\n * \n * @example var settings = { validate: false, limit: 5, name: \"foo\" };\n * var options = { validate: true, name: \"bar\" };\n * jQuery.extend(settings, options);\n * @result settings == { validate: true, limit: 5, name: \"bar\" }\n * @desc Merge settings and options, modifying settings\n *\n * @example var defaults = { validate: false, limit: 5, name: \"foo\" };\n * var options = { validate: true, name: \"bar\" };\n * var settings = jQuery.extend({}, defaults, options);\n * @result settings == { validate: true, limit: 5, name: \"bar\" }\n * @desc Merge defaults and options, without modifying the defaults\n *\n * @name $.extend\n * @param Object target The object to extend\n * @param Object prop1 The object that will be merged into the first.\n * @param Object propN (optional) More objects to merge into the first\n * @type Object\n * @cat JavaScript\n */\njQuery.extend = jQuery.fn.extend = function() {\n\t// copy reference to target object\n\tvar target = arguments[0],\n\t\ta = 1;\n\n\t// extend jQuery itself if only one argument is passed\n\tif ( arguments.length == 1 ) {\n\t\ttarget = this;\n\t\ta = 0;\n\t}\n\tvar prop;\n\twhile (prop = arguments[a++])"}]},
{"id":"cd682c9c812baaa6e011d6b7a0cf1c4a267a3428","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[1243,1295],"code":"\t\t// Extend the base object\n\t\tfor ( var i in prop ) target[i] = prop[i];\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend({\n\t/**\n\t * Run this function to give control of the $ variable back\n\t * to whichever library first implemented it. This helps to make \n\t * sure that jQuery doesn't conflict with the $ object\n\t * of other libraries.\n\t *\n\t * By using this function, you will only be able to access jQuery\n\t * using the 'jQuery' variable. For example, where you used to do\n\t * $(\"div p\"), you now must do jQuery(\"div p\").\n\t *\n\t * @example jQuery.noConflict();\n\t * // Do something with jQuery\n\t * jQuery(\"div p\").hide();\n\t * // Do something with another library's $()\n\t * $(\"content\").style.display = 'none';\n\t * @desc Maps the original object that was referenced by $ back to $\n\t *\n\t * @example jQuery.noConflict();\n\t * (function($) { \n\t *   $(function() {\n\t *     // more code using $ as alias to jQuery\n\t *   });\n\t * })(jQuery);\n\t * // other code using $ as an alias to the other library\n\t * @desc Reverts the $ alias and then creates and executes a\n\t * function to provide the $ as a jQuery alias inside the functions\n\t * scope. Inside the function the original $ object is not available.\n\t * This works well for most plugins that don't rely on any other library.\n\t * \n\t *\n\t * @name $.noConflict\n\t * @type undefined\n\t * @cat Core \n\t */\n\tnoConflict: function() {\n\t\tif ( jQuery._$ )\n\t\t\t$ = jQuery._$;\n\t\treturn jQuery;\n\t},\n\n\t// This may seem like some crazy code, but trust me when I say that this\n\t// is the only cross-browser way to do this. --John\n\tisFunction: function( fn ) {\n\t\treturn !!fn && typeof fn != \"string\" && !fn.nodeName && \n\t\t\tfn.constructor != Array && /function/i.test( fn + \"\" );"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[1210,1262],"code":"\t\t// Extend the base object\n\t\tfor ( var i in prop ) target[i] = prop[i];\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend({\n\t/**\n\t * Run this function to give control of the $ variable back\n\t * to whichever library first implemented it. This helps to make \n\t * sure that jQuery doesn't conflict with the $ object\n\t * of other libraries.\n\t *\n\t * By using this function, you will only be able to access jQuery\n\t * using the 'jQuery' variable. For example, where you used to do\n\t * $(\"div p\"), you now must do jQuery(\"div p\").\n\t *\n\t * @example jQuery.noConflict();\n\t * // Do something with jQuery\n\t * jQuery(\"div p\").hide();\n\t * // Do something with another library's $()\n\t * $(\"content\").style.display = 'none';\n\t * @desc Maps the original object that was referenced by $ back to $\n\t *\n\t * @example jQuery.noConflict();\n\t * (function($) { \n\t *   $(function() {\n\t *     // more code using $ as alias to jQuery\n\t *   });\n\t * })(jQuery);\n\t * // other code using $ as an alias to the other library\n\t * @desc Reverts the $ alias and then creates and executes a\n\t * function to provide the $ as a jQuery alias inside the functions\n\t * scope. Inside the function the original $ object is not available.\n\t * This works well for most plugins that don't rely on any other library.\n\t * \n\t *\n\t * @name $.noConflict\n\t * @type undefined\n\t * @cat Core \n\t */\n\tnoConflict: function() {\n\t\tif ( jQuery._$ )\n\t\t\t$ = jQuery._$;\n\t\treturn jQuery;\n\t},\n\n\t// This may seem like some crazy code, but trust me when I say that this\n\t// is the only cross-browser way to do this. --John\n\tisFunction: function( fn ) {\n\t\treturn !!fn && typeof fn != \"string\" && !fn.nodeName && \n\t\t\ttypeof fn[0] == \"undefined\" && /function/i.test( fn + \"\" );"}]},
{"id":"a6ab1d10bddf2b45df9d5798abe79d81d11e42fb","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[1291,1371],"code":"// This may seem like some crazy code, but trust me when I say that this\n// is the only cross-browser way to do this. --John\nisFunction: function( fn ) {\n\treturn !!fn && typeof fn != \"string\" && !fn.nodeName && \n\t\tfn.constructor != Array && /function/i.test( fn + \"\" );\n},\n\n// check if an element is in a XML document\nisXMLDoc: function(elem) {\n\treturn elem.tagName && elem.ownerDocument && !elem.ownerDocument.body;\n},\n\nnodeName: function( elem, name ) {\n\treturn elem.nodeName && elem.nodeName.toUpperCase() == name.toUpperCase();\n},\n\n/**\n * A generic iterator function, which can be used to seamlessly\n * iterate over both objects and arrays. This function is not the same\n * as $().each() - which is used to iterate, exclusively, over a jQuery\n * object. This function can be used to iterate over anything.\n *\n * The callback has two arguments:the key (objects) or index (arrays) as first\n * the first, and the value as the second.\n *\n * @example $.each( [0,1,2], function(i, n){\n *   alert( \"Item #\" + i + \": \" + n );\n * });\n * @desc This is an example of iterating over the items in an array,\n * accessing both the current item and its index.\n *\n * @example $.each( { name: \"John\", lang: \"JS\" }, function(i, n){\n *   alert( \"Name: \" + i + \", Value: \" + n );\n * });\n *\n * @desc This is an example of iterating over the properties in an\n * Object, accessing both the current item and its key.\n *\n * @name $.each\n * @param Object obj The object, or array, to iterate over.\n * @param Function fn The function that will be executed on every object.\n * @type Object\n * @cat JavaScript\n */\n// args is for internal usage only\neach: function( obj, fn, args ) {\n\tif ( obj.length == undefined )\n\t\tfor ( var i in obj )\n\t\t\tfn.apply( obj[i], args || [i, obj[i]] );\n\telse\n\t\tfor ( var i = 0, ol = obj.length; i < ol; i++ )\n\t\t\tif ( fn.apply( obj[i], args || [i, obj[i]] ) === false ) break;\n\treturn obj;\n},\n\nprop: function(elem, value, type, index, prop){\n\t\t// Handle executable functions\n\t\tif ( jQuery.isFunction( value ) )\n\t\t\tvalue = value.call( elem, [index] );\n\t\t\t\n\t\t// exclude the following css properties to add px\n\t\tvar exclude = /z-?index|font-?weight|opacity|zoom|line-?height/i;\n\n\t\t// Handle passing in a number to a CSS property\n\t\treturn value && value.constructor == Number && type == \"curCSS\" && !exclude.test(prop) ?\n\t\t\tvalue + \"px\" :\n\t\t\tvalue;\n},\n\nclassName: {\n\t// internal only, use addClass(\"class\")\n\tadd: function( elem, c ){\n\t\tjQuery.each( c.split(/\\s+/), function(i, cur){\n\t\t\tif ( !jQuery.className.has( elem.className, cur ) )\n\t\t\t\telem.className += ( elem.className ? \" \" : \"\" ) + cur;\n\t\t});\n\t},\n\n\t// internal only, use removeClass(\"class\")\n\tremove: function( elem, c ){\n\t\telem.className = c != undefined ?"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[1258,1338],"code":"// This may seem like some crazy code, but trust me when I say that this\n// is the only cross-browser way to do this. --John\nisFunction: function( fn ) {\n\treturn !!fn && typeof fn != \"string\" && !fn.nodeName && \n\t\ttypeof fn[0] == \"undefined\" && /function/i.test( fn + \"\" );\n},\n\n// check if an element is in a XML document\nisXMLDoc: function(elem) {\n\treturn elem.tagName && elem.ownerDocument && !elem.ownerDocument.body;\n},\n\nnodeName: function( elem, name ) {\n\treturn elem.nodeName && elem.nodeName.toUpperCase() == name.toUpperCase();\n},\n\n/**\n * A generic iterator function, which can be used to seamlessly\n * iterate over both objects and arrays. This function is not the same\n * as $().each() - which is used to iterate, exclusively, over a jQuery\n * object. This function can be used to iterate over anything.\n *\n * The callback has two arguments:the key (objects) or index (arrays) as first\n * the first, and the value as the second.\n *\n * @example $.each( [0,1,2], function(i, n){\n *   alert( \"Item #\" + i + \": \" + n );\n * });\n * @desc This is an example of iterating over the items in an array,\n * accessing both the current item and its index.\n *\n * @example $.each( { name: \"John\", lang: \"JS\" }, function(i, n){\n *   alert( \"Name: \" + i + \", Value: \" + n );\n * });\n *\n * @desc This is an example of iterating over the properties in an\n * Object, accessing both the current item and its key.\n *\n * @name $.each\n * @param Object obj The object, or array, to iterate over.\n * @param Function fn The function that will be executed on every object.\n * @type Object\n * @cat JavaScript\n */\n// args is for internal usage only\neach: function( obj, fn, args ) {\n\tif ( obj.length == undefined )\n\t\tfor ( var i in obj )\n\t\t\tfn.apply( obj[i], args || [i, obj[i]] );\n\telse\n\t\tfor ( var i = 0, ol = obj.length; i < ol; i++ )\n\t\t\tif ( fn.apply( obj[i], args || [i, obj[i]] ) === false ) break;\n\treturn obj;\n},\n\nprop: function(elem, value, type, index, prop){\n\t\t// Handle executable functions\n\t\tif ( jQuery.isFunction( value ) )\n\t\t\tvalue = value.call( elem, [index] );\n\t\t\t\n\t\t// exclude the following css properties to add px\n\t\tvar exclude = /z-?index|font-?weight|opacity|zoom|line-?height/i;\n\n\t\t// Handle passing in a number to a CSS property\n\t\treturn value && value.constructor == Number && type == \"curCSS\" && !exclude.test(prop) ?\n\t\t\tvalue + \"px\" :\n\t\t\tvalue;\n},\n\nclassName: {\n\t// internal only, use addClass(\"class\")\n\tadd: function( elem, c ){\n\t\tjQuery.each( c.split(/\\s+/), function(i, cur){\n\t\t\tif ( !jQuery.className.has( elem.className, cur ) )\n\t\t\t\telem.className += ( elem.className ? \" \" : \"\" ) + cur;\n\t\t});\n\t},\n\n\t// internal only, use removeClass(\"class\")\n\tremove: function( elem, c ){\n\t\telem.className = c ?"}]},
{"id":"6e3774655a08fa7a78b8d253adf00fde413f800b","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[1377,1407],"code":"\t// internal only, use is(\".class\")\n\thas: function( t, c ) {\n\t\treturn jQuery.inArray( c, (t.className || t).toString().split(/\\s+/) ) > -1;\n\t}\n},\n\n/**\n * Swap in/out style options.\n * @private\n */\nswap: function(e,o,f) {\n\tfor ( var i in o ) {\n\t\te.style[\"old\"+i] = e.style[i];\n\t\te.style[i] = o[i];\n\t}\n\tf.apply( e, [] );\n\tfor ( var i in o )\n\t\te.style[i] = e.style[\"old\"+i];\n},\n\ncss: function(e,p) {\n\tif ( p == \"height\" || p == \"width\" ) {\n\t\tvar old = {}, oHeight, oWidth, d = [\"Top\",\"Bottom\",\"Right\",\"Left\"];\n\n\t\tjQuery.each( d, function(){\n\t\t\told[\"padding\" + this] = 0;\n\t\t\told[\"border\" + this + \"Width\"] = 0;\n\t\t});\n\n\t\tjQuery.swap( e, old, function() {\n\t\t\tif ( jQuery(e).is(':visible') ) {"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[1344,1377],"code":"\t// internal only, use is(\".class\")\n\thas: function( t, c ) {\n\t\tt = t.className || t;\n\t\t// escape regex characters\n\t\tc = c.replace(/([\\.\\\\\\+\\*\\?\\[\\^\\]\\$\\(\\)\\{\\}\\=\\!\\<\\>\\|\\:])/g, \"\\\\$1\");\n\t\treturn t && new RegExp(\"(^|\\\\s)\" + c + \"(\\\\s|$)\").test( t );\n\t}\n},\n\n/**\n * Swap in/out style options.\n * @private\n */\nswap: function(e,o,f) {\n\tfor ( var i in o ) {\n\t\te.style[\"old\"+i] = e.style[i];\n\t\te.style[i] = o[i];\n\t}\n\tf.apply( e, [] );\n\tfor ( var i in o )\n\t\te.style[i] = e.style[\"old\"+i];\n},\n\ncss: function(e,p) {\n\tif ( p == \"height\" || p == \"width\" ) {\n\t\tvar old = {}, oHeight, oWidth, d = [\"Top\",\"Bottom\",\"Right\",\"Left\"];\n\n\t\tjQuery.each( d, function(){\n\t\t\told[\"padding\" + this] = 0;\n\t\t\told[\"border\" + this + \"Width\"] = 0;\n\t\t});\n\n\t\tjQuery.swap( e, old, function() {\n\t\t\tif (jQuery.css(e,\"display\") != \"none\") {"}]},
{"id":"1bb47b944ddf9a2e8944f84e6dfbfe479ae30e9f","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[1407,1417],"code":"if ( jQuery(e).is(':visible') ) {\n\toHeight = e.offsetHeight;\n\toWidth = e.offsetWidth;\n} else {\n\te = jQuery(e.cloneNode(true))\n\t\t.find(\":radio\").removeAttr(\"checked\").end()\n\t\t.css({\n\t\t\tvisibility: \"hidden\", position: \"absolute\", display: \"block\", right: \"0\", left: \"0\"\n\t\t}).appendTo(e.parentNode)[0];\n\n\tvar parPos = jQuery.css(e.parentNode,\"position\") || \"static\";"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[1377,1387],"code":"if (jQuery.css(e,\"display\") != \"none\") {\n\toHeight = e.offsetHeight;\n\toWidth = e.offsetWidth;\n} else {\n\te = jQuery(e.cloneNode(true))\n\t\t.find(\":radio\").removeAttr(\"checked\").end()\n\t\t.css({\n\t\t\tvisibility: \"hidden\", position: \"absolute\", display: \"block\", right: \"0\", left: \"0\"\n\t\t}).appendTo(e.parentNode)[0];\n\n\tvar parPos = jQuery.css(e.parentNode,\"position\");"}]},
{"id":"38adfe18eedf6623aeab242dea5a4545374a7896","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[1454,1477],"code":"\t\t\tprop = \"float\";\n\n\t\tprop = prop.replace(/([A-Z])/g,\"-$1\").toLowerCase();\n\t\tvar cur = document.defaultView.getComputedStyle(elem, null);\n\n\t\tif ( cur )\n\t\t\tret = cur.getPropertyValue(prop);\n\t\telse if ( prop == \"display\" )\n\t\t\tret = \"none\";\n\t\telse\n\t\t\tjQuery.swap(elem, { display: \"block\" }, function() {\n\t\t\t    var c = document.defaultView.getComputedStyle(this, \"\");\n\t\t\t    ret = c && c.getPropertyValue(prop) || \"\";\n\t\t\t});\n\n\t} else if (elem.currentStyle) {\n\t\tvar newProp = prop.replace(/\\-(\\w)/g,function(m,c){return c.toUpperCase();});\n\t\tret = elem.currentStyle[prop] || elem.currentStyle[newProp];\n\t}\n\n\treturn ret;\n},\n\nclean: function(a, doc) {"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[1422,1447],"code":"\t\t\tprop = \"float\";\n\n\t\tprop = prop.replace(/([A-Z])/g,\"-$1\").toLowerCase();\n\t\tvar cur = document.defaultView.getComputedStyle(elem, null);\n\n\t\tif ( cur )\n\t\t\tret = cur.getPropertyValue(prop);\n\t\telse if ( prop == \"display\" )\n\t\t\tret = \"none\";\n\t\telse\n\t\t\tjQuery.swap(elem, { display: \"block\" }, function() {\n\t\t\t    var c = document.defaultView.getComputedStyle(this, \"\");\n\t\t\t    ret = c && c.getPropertyValue(prop) || \"\";\n\t\t\t});\n\n\t} else if (elem.currentStyle) {\n\n\t\tvar newProp = prop.replace(/\\-(\\w)/g,function(m,c){return c.toUpperCase();});\n\t\tret = elem.currentStyle[prop] || elem.currentStyle[newProp];\n\t\t\n\t}\n\n\treturn ret;\n},\n\nclean: function(a) {"}]},
{"id":"877634fd927aad585c87951f4581963f78de613c","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[1481,1490],"code":"jQuery.each( a, function(i,arg){\n\tif ( !arg ) return;\n\n\tif ( arg.constructor == Number )\n\t\targ = arg.toString();\n\t\n\t// Convert html string into DOM nodes\n\tif ( typeof arg == \"string\" ) {\n\t\t// Trim whitespace, otherwise indexOf won't work as expected\n\t\tvar s = jQuery.trim(arg).toLowerCase(), div = doc.createElement(\"div\"), tb = [];"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[1450,1459],"code":"jQuery.each( a, function(i,arg){\n\tif ( !arg ) return;\n\n\tif ( arg.constructor == Number )\n\t\targ = arg.toString();\n\t\n\t // Convert html string into DOM nodes\n\tif ( typeof arg == \"string\" ) {\n\t\t// Trim whitespace, otherwise indexOf won't work as expected\n\t\tvar s = jQuery.trim(arg), div = document.createElement(\"div\"), tb = [];"}]},
{"id":"50a3b4cab251fb9df04c6b58d9f0d72e7ab26842","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[1518,1539],"code":"// Move to the right depth\nwhile ( wrap[0]-- )\n\tdiv = div.firstChild;\n\n// Remove IE's autoinserted <tbody> from table fragments\nif ( jQuery.browser.msie ) {\n\t\n\t// String was a <table>, *may* have spurious <tbody>\n\tif ( !s.indexOf(\"<table\") && s.indexOf(\"<tbody\") < 0 ) \n\t\ttb = div.firstChild && div.firstChild.childNodes;\n\t\t\n\t// String was a bare <thead> or <tfoot>\n\telse if ( wrap[1] == \"<table>\" && s.indexOf(\"<tbody\") < 0 )\n\t\ttb = div.childNodes;\n\n\tfor ( var n = tb.length-1; n >= 0 ; --n )\n\t\tif ( jQuery.nodeName(tb[n], \"tbody\") && !tb[n].childNodes.length )\n\t\t\ttb[n].parentNode.removeChild(tb[n]);\n\t\n}\n\narg = jQuery.makeArray( div.childNodes );"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[1481,1502],"code":"// Move to the right depth\nwhile ( wrap[0]-- )\n\tdiv = div.firstChild;\n\n// Remove IE's autoinserted <tbody> from table fragments\nif ( jQuery.browser.msie ) {\n\t\n\t// String was a <table>, *may* have spurious <tbody>\n\tif ( !s.indexOf(\"<table\") && s.indexOf(\"<tbody\") < 0 ) \n\t\ttb = div.firstChild && div.firstChild.childNodes;\n\t\t\n\t// String was a bare <thead> or <tfoot>\n\telse if ( wrap[1] == \"<table>\" && s.indexOf(\"<tbody\") < 0 )\n\t\ttb = div.childNodes;\n\n\tfor ( var n = tb.length-1; n >= 0 ; --n )\n\t\tif ( jQuery.nodeName(tb[n], \"tbody\") && !tb[n].childNodes.length )\n\t\t\ttb[n].parentNode.removeChild(tb[n]);\n\t\n}\n\narg = div.childNodes;"}]},
{"id":"6e8d972684258f22a6f9619aad1fc4b77e34f349","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[1559,1576],"code":"if ( fix[name] ) {\n\tif ( value != undefined ) elem[fix[name]] = value;\n\treturn elem[fix[name]];\n\n} else if ( value == undefined && jQuery.browser.msie && jQuery.nodeName(elem, \"form\") && (name == \"action\" || name == \"method\") )\n\treturn elem.getAttributeNode(name).nodeValue;\n\n// IE elem.getAttribute passes even for style\nelse if ( elem.tagName ) {\n\t\n\n\tif ( value != undefined ) elem.setAttribute( name, value );\n\tif ( jQuery.browser.msie && /href|src/.test(name) && !jQuery.isXMLDoc(elem) ) \n\t\treturn elem.getAttribute( name, 2 );\n\treturn elem.getAttribute( name );\n\n// elem is actually elem.style ... set the style\n} else {"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[1553,1568],"code":"if ( fix[name] ) {\n\tif ( value != undefined ) elem[fix[name]] = value;\n\treturn elem[fix[name]];\n\n} else if ( value == undefined && jQuery.browser.msie && jQuery.nodeName(elem, \"form\") && (name == \"action\" || name == \"method\") )\n\treturn elem.getAttributeNode(name).nodeValue;\n\n// IE elem.getAttribute passes even for style\nelse if ( elem.tagName ) {\n\tif ( value != undefined ) elem.setAttribute( name, value );\n\tif ( jQuery.browser.msie && /href|src/.test(name) && !jQuery.isXMLDoc(elem) ) \n\t\treturn elem.getAttribute( name, 2 );\n\treturn elem.getAttribute( name );\n\n// elem is actually elem.style ... set the style\n} else {"}]},
{"id":"67dd564dbf9d44ce05bfa3bda9b64e78dd40fc3f","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[1618,1646],"code":"\t\tfor ( var i = 0, al = a.length; i < al; i++ )\n\t\t\tr.push( a[i] );\n\telse\n\t\tr = a.slice( 0 );\n\n\treturn r;\n},\n\ninArray: function( b, a ) {\n\tfor ( var i = 0, al = a.length; i < al; i++ )\n\t\tif ( a[i] == b )\n\t\t\treturn i;\n\treturn -1;\n},\n\n/**\n * Merge two arrays together by concatenating them.\n *\n * @example $.merge( [0,1,2], [2,3,4] )\n * @result [0,1,2,2,3,4]\n * @desc Merges two arrays.\n *\n * @name $.merge\n * @type Array\n * @param Array first The first array to merge, the elements of second are added.\n * @param Array second The second array to append to the first, unaltered.\n * @cat JavaScript\n */\nmerge: function(first, second) {"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[1594,1630],"code":"\t\tfor ( var i = 0, al = a.length; i < al; i++ )\n\t\t\tr.push( a[i] );\n\telse\n\t\tr = a.slice( 0 );\n\n\treturn r;\n},\n\ninArray: function( b, a ) {\n\tfor ( var i = 0, al = a.length; i < al; i++ )\n\t\tif ( a[i] == b )\n\t\t\treturn i;\n\treturn -1;\n},\n\n/**\n * Merge two arrays together, removing all duplicates.\n *\n * The result is the altered first argument with\n * the unique elements from the second array added.\n *\n * @example $.merge( [0,1,2], [2,3,4] )\n * @result [0,1,2,3,4]\n * @desc Merges two arrays, removing the duplicate 2\n *\n * @example var array = [3,2,1];\n * $.merge( array, [4,3,2] )\n * @result array == [3,2,1,4]\n * @desc Merges two arrays, removing the duplicates 3 and 2\n *\n * @name $.merge\n * @type Array\n * @param Array first The first array to merge, the unique elements of second added.\n * @param Array second The second array to merge into the first, unaltered.\n * @cat JavaScript\n */\nmerge: function(first, second) {"}]},
{"id":"90a0ca7a589373d7ebbdd8189e22acf5809b1354","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[1680,1760],"code":"/**\n * Filter items out of an array, by using a filter function.\n *\n * The specified function will be passed two arguments: The\n * current array item and the index of the item in the array. The\n * function must return 'true' to keep the item in the array, \n * false to remove it.\n *\n * @example $.grep( [0,1,2], function(i){\n *   return i > 0;\n * });\n * @result [1, 2]\n *\n * @name $.grep\n * @type Array\n * @param Array array The Array to find items in.\n * @param Function fn The function to process each item against.\n * @param Boolean inv Invert the selection - select the opposite of the function.\n * @cat JavaScript\n */\ngrep: function(elems, fn, inv) {\n\t// If a string is passed in for the function, make a function\n\t// for it (a handy shortcut)\n\tif ( typeof fn == \"string\" )\n\t\tfn = new Function(\"a\",\"i\",\"return \" + fn);\n\n\tvar result = [];\n\n\t// Go through the array, only saving the items\n\t// that pass the validator function\n\tfor ( var i = 0, el = elems.length; i < el; i++ )\n\t\tif ( !inv && fn(elems[i],i) || inv && !fn(elems[i],i) )\n\t\t\tresult.push( elems[i] );\n\n\treturn result;\n},\n\n/**\n * Translate all items in an array to another array of items.\n *\n * The translation function that is provided to this method is \n * called for each item in the array and is passed one argument: \n * The item to be translated.\n *\n * The function can then return the translated value, 'null'\n * (to remove the item), or  an array of values - which will\n * be flattened into the full array.\n *\n * @example $.map( [0,1,2], function(i){\n *   return i + 4;\n * });\n * @result [4, 5, 6]\n * @desc Maps the original array to a new one and adds 4 to each value.\n *\n * @example $.map( [0,1,2], function(i){\n *   return i > 0 ? i + 1 : null;\n * });\n * @result [2, 3]\n * @desc Maps the original array to a new one and adds 1 to each\n * value if it is bigger then zero, otherwise it's removed-\n * \n * @example $.map( [0,1,2], function(i){\n *   return [ i, i + 1 ];\n * });\n * @result [0, 1, 1, 2, 2, 3]\n * @desc Maps the original array to a new one, each element is added\n * with it's original value and the value plus one.\n *\n * @name $.map\n * @type Array\n * @param Array array The Array to translate.\n * @param Function fn The function to process each item against.\n * @cat JavaScript\n */\nmap: function(elems, fn) {\n\t// If a string is passed in for the function, make a function\n\t// for it (a handy shortcut)\n\tif ( typeof fn == \"string\" )\n\t\tfn = new Function(\"a\",\"return \" + fn);\n\n\tvar result = [];"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[1644,1724],"code":"/**\n * Filter items out of an array, by using a filter function.\n *\n * The specified function will be passed two arguments: The\n * current array item and the index of the item in the array. The\n * function must return 'true' to keep the item in the array, \n * false to remove it.\n *\n * @example $.grep( [0,1,2], function(i){\n *   return i > 0;\n * });\n * @result [1, 2]\n *\n * @name $.grep\n * @type Array\n * @param Array array The Array to find items in.\n * @param Function fn The function to process each item against.\n * @param Boolean inv Invert the selection - select the opposite of the function.\n * @cat JavaScript\n */\ngrep: function(elems, fn, inv) {\n\t// If a string is passed in for the function, make a function\n\t// for it (a handy shortcut)\n\tif ( typeof fn == \"string\" )\n\t\tfn = new Function(\"a\",\"i\",\"return \" + fn);\n\n\tvar result = [];\n\n\t// Go through the array, only saving the items\n\t// that pass the validator function\n\tfor ( var i = 0, el = elems.length; i < el; i++ )\n\t\tif ( !inv && fn(elems[i],i) || inv && !fn(elems[i],i) )\n\t\t\tresult.push( elems[i] );\n\n\treturn result;\n},\n\n/**\n * Translate all items in an array to another array of items.\n *\n * The translation function that is provided to this method is \n * called for each item in the array and is passed one argument: \n * The item to be translated.\n *\n * The function can then return the translated value, 'null'\n * (to remove the item), or  an array of values - which will\n * be flattened into the full array.\n *\n * @example $.map( [0,1,2], function(i){\n *   return i + 4;\n * });\n * @result [4, 5, 6]\n * @desc Maps the original array to a new one and adds 4 to each value.\n *\n * @example $.map( [0,1,2], function(i){\n *   return i > 0 ? i + 1 : null;\n * });\n * @result [2, 3]\n * @desc Maps the original array to a new one and adds 1 to each\n * value if it is bigger then zero, otherwise it's removed-\n * \n * @example $.map( [0,1,2], function(i){\n *   return [ i, i + 1 ];\n * });\n * @result [0, 1, 1, 2, 2, 3]\n * @desc Maps the original array to a new one, each element is added\n * with it's original value and the value plus one.\n *\n * @name $.map\n * @type Array\n * @param Array array The Array to translate.\n * @param Function fn The function to process each item against.\n * @cat JavaScript\n */\nmap: function(elems, fn) {\n\t// If a string is passed in for the function, make a function\n\t// for it (a handy shortcut)\n\tif ( typeof fn == \"string\" )\n\t\tfn = new Function(\"a\",\"return \" + fn);\n\n\tvar result = [], r = [];"}]},
{"id":"d227148c343dbd0c1471b1a2141cff46f311ac2e","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[1760,1771],"code":"var result = [];\n\n// Go through the array, translating each of the items to their\n// new value (or values).\nfor ( var i = 0, el = elems.length; i < el; i++ ) {\n\tvar val = fn(elems[i],i);\n\n\tif ( val !== null && val != undefined ) {\n\t\tif ( val.constructor != Array ) val = [val];\n\t\tresult = result.concat( val );\n\t}\n}"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[1724,1735],"code":"var result = [], r = [];\n\n// Go through the array, translating each of the items to their\n// new value (or values).\nfor ( var i = 0, el = elems.length; i < el; i++ ) {\n\tvar val = fn(elems[i],i);\n\n\tif ( val !== null && val != undefined ) {\n\t\tif ( val.constructor != Array ) val = [val];\n\t\tresult = result.concat( val );\n\t}\n}"}]},
{"id":"ee74d5af92311671158742e6f33f41fbd9e2e433","instances":[{"path":"./jquery-data/1.1.3.1/src/jquery/jquery.js","lines":[1843,2339],"code":"/**\n * Get a set of elements containing the unique parents of the matched\n * set of elements.\n *\n * You may use an optional expression to filter the set of parent elements that will match.\n *\n * @example $(\"p\").parent()\n * @before <div><p>Hello</p><p>Hello</p></div>\n * @result [ <div><p>Hello</p><p>Hello</p></div> ]\n * @desc Find the parent element of each paragraph.\n *\n * @example $(\"p\").parent(\".selected\")\n * @before <div><p>Hello</p></div><div class=\"selected\"><p>Hello Again</p></div>\n * @result [ <div class=\"selected\"><p>Hello Again</p></div> ]\n * @desc Find the parent element of each paragraph with a class \"selected\".\n *\n * @name parent\n * @type jQuery\n * @param String expr (optional) An expression to filter the parents with\n * @cat DOM/Traversing\n */\n\n/**\n * Get a set of elements containing the unique ancestors of the matched\n * set of elements (except for the root element).\n *\n * The matched elements can be filtered with an optional expression.\n *\n * @example $(\"span\").parents()\n * @before <html><body><div><p><span>Hello</span></p><span>Hello Again</span></div></body></html>\n * @result [ <body>...</body>, <div>...</div>, <p><span>Hello</span></p> ]\n * @desc Find all parent elements of each span.\n *\n * @example $(\"span\").parents(\"p\")\n * @before <html><body><div><p><span>Hello</span></p><span>Hello Again</span></div></body></html>\n * @result [ <p><span>Hello</span></p> ]\n * @desc Find all parent elements of each span that is a paragraph.\n *\n * @name parents\n * @type jQuery\n * @param String expr (optional) An expression to filter the ancestors with\n * @cat DOM/Traversing\n */\n\n/**\n * Get a set of elements containing the unique next siblings of each of the\n * matched set of elements.\n *\n * It only returns the very next sibling for each element, not all\n * next siblings.\n *\n * You may provide an optional expression to filter the match.\n *\n * @example $(\"p\").next()\n * @before <p>Hello</p><p>Hello Again</p><div><span>And Again</span></div>\n * @result [ <p>Hello Again</p>, <div><span>And Again</span></div> ]\n * @desc Find the very next sibling of each paragraph.\n *\n * @example $(\"p\").next(\".selected\")\n * @before <p>Hello</p><p class=\"selected\">Hello Again</p><div><span>And Again</span></div>\n * @result [ <p class=\"selected\">Hello Again</p> ]\n * @desc Find the very next sibling of each paragraph that has a class \"selected\".\n *\n * @name next\n * @type jQuery\n * @param String expr (optional) An expression to filter the next Elements with\n * @cat DOM/Traversing\n */\n\n/**\n * Get a set of elements containing the unique previous siblings of each of the\n * matched set of elements.\n *\n * Use an optional expression to filter the matched set.\n *\n * \tOnly the immediately previous sibling is returned, not all previous siblings.\n *\n * @example $(\"p\").prev()\n * @before <p>Hello</p><div><span>Hello Again</span></div><p>And Again</p>\n * @result [ <div><span>Hello Again</span></div> ]\n * @desc Find the very previous sibling of each paragraph.\n *\n * @example $(\"p\").prev(\".selected\")\n * @before <div><span>Hello</span></div><p class=\"selected\">Hello Again</p><p>And Again</p>\n * @result [ <div><span>Hello</span></div> ]\n * @desc Find the very previous sibling of each paragraph that has a class \"selected\".\n *\n * @name prev\n * @type jQuery\n * @param String expr (optional) An expression to filter the previous Elements with\n * @cat DOM/Traversing\n */\n\n/**\n * Get a set of elements containing all of the unique siblings of each of the\n * matched set of elements.\n *\n * Can be filtered with an optional expressions.\n *\n * @example $(\"div\").siblings()"},{"path":"./jquery-data/1.1.2/src/jquery/jquery.js","lines":[1798,2294],"code":"/**\n * Get a set of elements containing the unique parents of the matched\n * set of elements.\n *\n * You may use an optional expression to filter the set of parent elements that will match.\n *\n * @example $(\"p\").parent()\n * @before <div><p>Hello</p><p>Hello</p></div>\n * @result [ <div><p>Hello</p><p>Hello</p></div> ]\n * @desc Find the parent element of each paragraph.\n *\n * @example $(\"p\").parent(\".selected\")\n * @before <div><p>Hello</p></div><div class=\"selected\"><p>Hello Again</p></div>\n * @result [ <div class=\"selected\"><p>Hello Again</p></div> ]\n * @desc Find the parent element of each paragraph with a class \"selected\".\n *\n * @name parent\n * @type jQuery\n * @param String expr (optional) An expression to filter the parents with\n * @cat DOM/Traversing\n */\n\n/**\n * Get a set of elements containing the unique ancestors of the matched\n * set of elements (except for the root element).\n *\n * The matched elements can be filtered with an optional expression.\n *\n * @example $(\"span\").parents()\n * @before <html><body><div><p><span>Hello</span></p><span>Hello Again</span></div></body></html>\n * @result [ <body>...</body>, <div>...</div>, <p><span>Hello</span></p> ]\n * @desc Find all parent elements of each span.\n *\n * @example $(\"span\").parents(\"p\")\n * @before <html><body><div><p><span>Hello</span></p><span>Hello Again</span></div></body></html>\n * @result [ <p><span>Hello</span></p> ]\n * @desc Find all parent elements of each span that is a paragraph.\n *\n * @name parents\n * @type jQuery\n * @param String expr (optional) An expression to filter the ancestors with\n * @cat DOM/Traversing\n */\n\n/**\n * Get a set of elements containing the unique next siblings of each of the\n * matched set of elements.\n *\n * It only returns the very next sibling for each element, not all\n * next siblings.\n *\n * You may provide an optional expression to filter the match.\n *\n * @example $(\"p\").next()\n * @before <p>Hello</p><p>Hello Again</p><div><span>And Again</span></div>\n * @result [ <p>Hello Again</p>, <div><span>And Again</span></div> ]\n * @desc Find the very next sibling of each paragraph.\n *\n * @example $(\"p\").next(\".selected\")\n * @before <p>Hello</p><p class=\"selected\">Hello Again</p><div><span>And Again</span></div>\n * @result [ <p class=\"selected\">Hello Again</p> ]\n * @desc Find the very next sibling of each paragraph that has a class \"selected\".\n *\n * @name next\n * @type jQuery\n * @param String expr (optional) An expression to filter the next Elements with\n * @cat DOM/Traversing\n */\n\n/**\n * Get a set of elements containing the unique previous siblings of each of the\n * matched set of elements.\n *\n * Use an optional expression to filter the matched set.\n *\n * \tOnly the immediately previous sibling is returned, not all previous siblings.\n *\n * @example $(\"p\").prev()\n * @before <p>Hello</p><div><span>Hello Again</span></div><p>And Again</p>\n * @result [ <div><span>Hello Again</span></div> ]\n * @desc Find the very previous sibling of each paragraph.\n *\n * @example $(\"p\").prev(\".selected\")\n * @before <div><span>Hello</span></div><p class=\"selected\">Hello Again</p><p>And Again</p>\n * @result [ <div><span>Hello</span></div> ]\n * @desc Find the very previous sibling of each paragraph that has a class \"selected\".\n *\n * @name prev\n * @type jQuery\n * @param String expr (optional) An expression to filter the previous Elements with\n * @cat DOM/Traversing\n */\n\n/**\n * Get a set of elements containing all of the unique siblings of each of the\n * matched set of elements.\n *\n * Can be filtered with an optional expressions.\n *\n * @example $(\"div\").siblings()"}]},
{"id":"3af848cb9f4b320e87e5dd31cb2fd842c2904c19","instances":[{"path":"./jquery-data/1.1.3.1/src/selector/selector.js","lines":[1,17],"code":"jQuery.extend({\n\texpr: {\n\t\t\"\": \"m[2]=='*'||jQuery.nodeName(a,m[2])\",\n\t\t\"#\": \"a.getAttribute('id')==m[2]\",\n\t\t\":\": {\n\t\t\t// Position Checks\n\t\t\tlt: \"i<m[3]-0\",\n\t\t\tgt: \"i>m[3]-0\",\n\t\t\tnth: \"m[3]-0==i\",\n\t\t\teq: \"m[3]-0==i\",\n\t\t\tfirst: \"i==0\",\n\t\t\tlast: \"i==r.length-1\",\n\t\t\teven: \"i%2==0\",\n\t\t\todd: \"i%2\",\n\n\t\t\t// Child Checks\n\t\t\t\"first-child\": \"a.parentNode.getElementsByTagName('*')[0]==a\","},{"path":"./jquery-data/1.1.2/src/selector/selector.js","lines":[1,17],"code":"jQuery.extend({\n\texpr: {\n\t\t\"\": \"m[2]=='*'||jQuery.nodeName(a,m[2])\",\n\t\t\"#\": \"a.getAttribute('id')==m[2]\",\n\t\t\":\": {\n\t\t\t// Position Checks\n\t\t\tlt: \"i<m[3]-0\",\n\t\t\tgt: \"i>m[3]-0\",\n\t\t\tnth: \"m[3]-0==i\",\n\t\t\teq: \"m[3]-0==i\",\n\t\t\tfirst: \"i==0\",\n\t\t\tlast: \"i==r.length-1\",\n\t\t\teven: \"i%2==0\",\n\t\t\todd: \"i%2\",\n\n\t\t\t// Child Checks\n\t\t\t\"nth-child\": \"jQuery.nth(a.parentNode.firstChild,m[3],'nextSibling',a)==a\","}]},
{"id":"a2935856a85a1496661a709d6f5073be1c570ac1","instances":[{"path":"./jquery-data/1.1.3.1/src/selector/selector.js","lines":[69,106],"code":"multiFilter: function( expr, elems, not ) {\n\tvar old, cur = [];\n\n\twhile ( expr && expr != old ) {\n\t\told = expr;\n\t\tvar f = jQuery.filter( expr, elems, not );\n\t\texpr = f.t.replace(/^\\s*,\\s*/, \"\" );\n\t\tcur = not ? elems = f.r : jQuery.merge( cur, f.r );\n\t}\n\n\treturn cur;\n},\n\n/**\n * @name $.find\n * @type Array<Element>\n * @private\n * @cat Core\n */\nfind: function( t, context ) {\n\t// Quickly handle non-string expressions\n\tif ( typeof t != \"string\" )\n\t\treturn [ t ];\n\n\t// Make sure that the context is a DOM Element\n\tif ( context && !context.nodeType )\n\t\tcontext = null;\n\n\t// Set the correct context (if none is provided)\n\tcontext = context || document;\n\n\t// Handle the common XPath // expression\n\tif ( !t.indexOf(\"//\") ) {\n\t\tcontext = context.documentElement;\n\t\tt = t.substr(2,t.length);\n\n\t// And the / root expression\n\t} else if ( !t.indexOf(\"/\") && !context.ownerDocument ) {"},{"path":"./jquery-data/1.1.2/src/selector/selector.js","lines":[92,129],"code":"multiFilter: function( expr, elems, not ) {\n\tvar old, cur = [];\n\n\twhile ( expr && expr != old ) {\n\t\told = expr;\n\t\tvar f = jQuery.filter( expr, elems, not );\n\t\texpr = f.t.replace(/^\\s*,\\s*/, \"\" );\n\t\tcur = not ? elems = f.r : jQuery.merge( cur, f.r );\n\t}\n\n\treturn cur;\n},\n\n/**\n * @name $.find\n * @type Array<Element>\n * @private\n * @cat Core\n */\nfind: function( t, context ) {\n\t// Quickly handle non-string expressions\n\tif ( typeof t != \"string\" )\n\t\treturn [ t ];\n\n\t// Make sure that the context is a DOM Element\n\tif ( context && !context.nodeType )\n\t\tcontext = null;\n\n\t// Set the correct context (if none is provided)\n\tcontext = context || document;\n\n\t// Handle the common XPath // expression\n\tif ( !t.indexOf(\"//\") ) {\n\t\tcontext = context.documentElement;\n\t\tt = t.substr(2,t.length);\n\n\t// And the / root expression\n\t} else if ( !t.indexOf(\"/\") ) {"}]},
{"id":"5c6e1cd715ddd31d72203a5275e58b89715a04b6","instances":[{"path":"./jquery-data/1.1.3.1/src/selector/selector.js","lines":[106,114],"code":"} else if ( !t.indexOf(\"/\") && !context.ownerDocument ) {\n\tcontext = context.documentElement;\n\tt = t.substr(1,t.length);\n\tif ( t.indexOf(\"/\") >= 1 )\n\t\tt = t.substr(t.indexOf(\"/\"),t.length);\n}\n\n// Initialize the search\nvar ret = [context], done = [], last;"},{"path":"./jquery-data/1.1.2/src/selector/selector.js","lines":[129,137],"code":"} else if ( !t.indexOf(\"/\") ) {\n\tcontext = context.documentElement;\n\tt = t.substr(1,t.length);\n\tif ( t.indexOf(\"/\") >= 1 )\n\t\tt = t.substr(t.indexOf(\"/\"),t.length);\n}\n\n// Initialize the search\nvar ret = [context], done = [], last = null;"}]},
{"id":"f911a25e7f7286f7d868e2279edd78c821aff8f7","instances":[{"path":"./jquery-data/1.1.3.1/src/selector/selector.js","lines":[113,128],"code":"// Initialize the search\nvar ret = [context], done = [], last;\n\n// Continue while a selector expression exists, and while\n// we're no longer looping upon ourselves\nwhile ( t && last != t ) {\n\tvar r = [];\n\tlast = t;\n\n\tt = jQuery.trim(t).replace( /^\\/\\//, \"\" );\n\n\tvar foundToken = false;\n\n\t// An attempt at speeding up child selectors that\n\t// point to a specific element tag\n\tvar re = new RegExp(\"^[/>]\\\\s*(\" + jQuery.chars + \"+)\");"},{"path":"./jquery-data/1.1.2/src/selector/selector.js","lines":[136,151],"code":"// Initialize the search\nvar ret = [context], done = [], last = null;\n\n// Continue while a selector expression exists, and while\n// we're no longer looping upon ourselves\nwhile ( t && last != t ) {\n\tvar r = [];\n\tlast = t;\n\n\tt = jQuery.trim(t).replace( /^\\/\\//i, \"\" );\n\n\tvar foundToken = false;\n\n\t// An attempt at speeding up child selectors that\n\t// point to a specific element tag\n\tvar re = /^[\\/>]\\s*([a-z0-9*-]+)/i;"}]},
{"id":"113ea56c97abc4b8173df0be12cd2af4b24f8f1f","instances":[{"path":"./jquery-data/1.1.3.1/src/selector/selector.js","lines":[116,280],"code":"// Continue while a selector expression exists, and while\n// we're no longer looping upon ourselves\nwhile ( t && last != t ) {\n\tvar r = [];\n\tlast = t;\n\n\tt = jQuery.trim(t).replace( /^\\/\\//, \"\" );\n\n\tvar foundToken = false;\n\n\t// An attempt at speeding up child selectors that\n\t// point to a specific element tag\n\tvar re = new RegExp(\"^[/>]\\\\s*(\" + jQuery.chars + \"+)\");\n\tvar m = re.exec(t);\n\n\tif ( m ) {\n\t\tvar nodeName = m[1].toUpperCase();\n\n\t\t// Perform our own iteration and filter\n\t\tfor ( var i = 0; ret[i]; i++ )\n\t\t\tfor ( var c = ret[i].firstChild; c; c = c.nextSibling )\n\t\t\t\tif ( c.nodeType == 1 && (nodeName == \"*\" || c.nodeName.toUpperCase() == nodeName.toUpperCase()) )\n\t\t\t\t\tr.push( c );\n\n\t\tret = r;\n\t\tt = t.replace( re, \"\" );\n\t\tif ( t.indexOf(\" \") == 0 ) continue;\n\t\tfoundToken = true;\n\t} else {\n\t\tre = /^((\\/?\\.\\.)|([>\\/+~]))\\s*([a-z]*)/i;\n\n\t\tif ( (m = re.exec(t)) != null ) {\n\t\t\tr = [];\n\n\t\t\tvar nodeName = m[4], mergeNum = jQuery.mergeNum++;\n\t\t\tm = m[1];\n\n\t\t\tfor ( var j = 0, rl = ret.length; j < rl; j++ )\n\t\t\t\tif ( m.indexOf(\"..\") < 0 ) {\n\t\t\t\t\tvar n = m == \"~\" || m == \"+\" ? ret[j].nextSibling : ret[j].firstChild;\n\t\t\t\t\tfor ( ; n; n = n.nextSibling )\n\t\t\t\t\t\tif ( n.nodeType == 1 ) {\n\t\t\t\t\t\t\tif ( m == \"~\" && n.mergeNum == mergeNum ) break;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!nodeName || n.nodeName.toUpperCase() == nodeName.toUpperCase() ) {\n\t\t\t\t\t\t\t\tif ( m == \"~\" ) n.mergeNum = mergeNum;\n\t\t\t\t\t\t\t\tr.push( n );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ( m == \"+\" ) break;\n\t\t\t\t\t\t}\n\t\t\t\t} else\n\t\t\t\t\tr.push( ret[j].parentNode );\n\n\t\t\tret = r;\n\n\t\t\t// And remove the token\n\t\t\tt = jQuery.trim( t.replace( re, \"\" ) );\n\t\t\tfoundToken = true;\n\t\t}\n\t}\n\n\t// See if there's still an expression, and that we haven't already\n\t// matched a token\n\tif ( t && !foundToken ) {\n\t\t// Handle multiple expressions\n\t\tif ( !t.indexOf(\",\") ) {\n\t\t\t// Clean the result set\n\t\t\tif ( context == ret[0] ) ret.shift();\n\n\t\t\t// Merge the result sets\n\t\t\tdone = jQuery.merge( done, ret );\n\n\t\t\t// Reset the context\n\t\t\tr = ret = [context];\n\n\t\t\t// Touch up the selector string\n\t\t\tt = \" \" + t.substr(1,t.length);\n\n\t\t} else {\n\t\t\t// Optomize for the case nodeName#idName\n\t\t\tvar re2 = new RegExp(\"^(\" + jQuery.chars + \"+)(#)(\" + jQuery.chars + \"+)\");\n\t\t\tvar m = re2.exec(t);\n\t\t\t\n\t\t\t// Re-organize the results, so that they're consistent\n\t\t\tif ( m ) {\n\t\t\t   m = [ 0, m[2], m[3], m[1] ];\n\n\t\t\t} else {\n\t\t\t\t// Otherwise, do a traditional filter check for\n\t\t\t\t// ID, class, and element selectors\n\t\t\t\tre2 = new RegExp(\"^([#.]?)(\" + jQuery.chars + \"*)\");\n\t\t\t\tm = re2.exec(t);\n\t\t\t}\n\n\t\t\tm[2] = m[2].replace(/\\\\/g, \"\");\n\n\t\t\tvar elem = ret[ret.length-1];\n\n\t\t\t// Try to do a global search by ID, where we can"},{"path":"./jquery-data/1.1.2/src/selector/selector.js","lines":[139,298],"code":"// Continue while a selector expression exists, and while\n// we're no longer looping upon ourselves\nwhile ( t && last != t ) {\n\tvar r = [];\n\tlast = t;\n\n\tt = jQuery.trim(t).replace( /^\\/\\//i, \"\" );\n\n\tvar foundToken = false;\n\n\t// An attempt at speeding up child selectors that\n\t// point to a specific element tag\n\tvar re = /^[\\/>]\\s*([a-z0-9*-]+)/i;\n\tvar m = re.exec(t);\n\n\tif ( m ) {\n\t\t// Perform our own iteration and filter\n\t\tjQuery.each( ret, function(){\n\t\t\tfor ( var c = this.firstChild; c; c = c.nextSibling )\n\t\t\t\tif ( c.nodeType == 1 && ( jQuery.nodeName(c, m[1]) || m[1] == \"*\" ) )\n\t\t\t\t\tr.push( c );\n\t\t});\n\n\t\tret = r;\n\t\tt = t.replace( re, \"\" );\n\t\tif ( t.indexOf(\" \") == 0 ) continue;\n\t\tfoundToken = true;\n\t} else {\n\t\t// Look for pre-defined expression tokens\n\t\tfor ( var i = 0; i < jQuery.token.length; i += 2 ) {\n\t\t\t// Attempt to match each, individual, token in\n\t\t\t// the specified order\n\t\t\tvar re = jQuery.token[i];\n\t\t\tvar m = re.exec(t);\n\n\t\t\t// If the token match was found\n\t\t\tif ( m ) {\n\t\t\t\t// Map it against the token's handler\n\t\t\t\tr = ret = jQuery.map( ret, jQuery.isFunction( jQuery.token[i+1] ) ?\n\t\t\t\t\tjQuery.token[i+1] :\n\t\t\t\t\tfunction(a){ return eval(jQuery.token[i+1]); });\n\n\t\t\t\t// And remove the token\n\t\t\t\tt = jQuery.trim( t.replace( re, \"\" ) );\n\t\t\t\tfoundToken = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// See if there's still an expression, and that we haven't already\n\t// matched a token\n\tif ( t && !foundToken ) {\n\t\t// Handle multiple expressions\n\t\tif ( !t.indexOf(\",\") ) {\n\t\t\t// Clean the result set\n\t\t\tif ( ret[0] == context ) ret.shift();\n\n\t\t\t// Merge the result sets\n\t\t\tjQuery.merge( done, ret );\n\n\t\t\t// Reset the context\n\t\t\tr = ret = [context];\n\n\t\t\t// Touch up the selector string\n\t\t\tt = \" \" + t.substr(1,t.length);\n\n\t\t} else {\n\t\t\t// Optomize for the case nodeName#idName\n\t\t\tvar re2 = /^([a-z0-9_-]+)(#)([a-z0-9\\\\*_-]*)/i;\n\t\t\tvar m = re2.exec(t);\n\t\t\t\n\t\t\t// Re-organize the results, so that they're consistent\n\t\t\tif ( m ) {\n\t\t\t   m = [ 0, m[2], m[3], m[1] ];\n\n\t\t\t} else {\n\t\t\t\t// Otherwise, do a traditional filter check for\n\t\t\t\t// ID, class, and element selectors\n\t\t\t\tre2 = /^([#.]?)([a-z0-9\\\\*_-]*)/i;\n\t\t\t\tm = re2.exec(t);\n\t\t\t}\n\n\t\t\t// Try to do a global search by ID, where we can\n\t\t\tif ( m[1] == \"#\" && ret[ret.length-1].getElementById ) {\n\t\t\t\t// Optimization for HTML document case\n\t\t\t\tvar oid = ret[ret.length-1].getElementById(m[2]);\n\t\t\t\t\n\t\t\t\t// Do a quick check for the existence of the actual ID attribute\n\t\t\t\t// to avoid selecting by the name attribute in IE\n\t\t\t\tif ( jQuery.browser.msie && oid && oid.id != m[2] )\n\t\t\t\t\toid = jQuery('[@id=\"'+m[2]+'\"]', ret[ret.length-1])[0];\n\n\t\t\t\t// Do a quick check for node name (where applicable) so\n\t\t\t\t// that div#foo searches will be really fast\n\t\t\t\tret = r = oid && (!m[3] || jQuery.nodeName(oid, m[3])) ? [oid] : [];\n\n\t\t\t} else {\n\t\t\t\t// Pre-compile a regular expression to handle class searches\n\t\t\t\tif ( m[1] == \".\" )"}]},
{"id":"b57ddbe6cef6ac47bc550fef1a07fffd3b11bb85","instances":[{"path":"./jquery-data/1.1.3.1/src/selector/selector.js","lines":[391,398],"code":"// Otherwise, find the expression to execute\n} else {\n\tvar f = jQuery.expr[m[1]];\n\tif ( typeof f != \"string\" )\n\t\tf = jQuery.expr[m[1]][m[2]];\n\n\t// Build a custom macro to enclose it\n\teval(\"f = function(a,i){return \" + f + \"}\");"},{"path":"./jquery-data/1.1.2/src/selector/selector.js","lines":[344,351],"code":"// Otherwise, find the expression to execute\n} else {\n\tvar f = jQuery.expr[m[1]];\n\tif ( typeof f != \"string\" )\n\t\tf = jQuery.expr[m[1]][m[2]];\n\n\t// Build a custom macro to enclose it\n\teval(\"f = function(a,i){\" +"}]},
{"id":"0942da0489b54340ae0a1ad705e1954cf29e4e63","instances":[{"path":"./jquery-data/1.1.3.1/src/selector/selector.js","lines":[410,445],"code":"/**\n * All ancestors of a given element.\n *\n * @private\n * @name $.parents\n * @type Array<Element>\n * @param Element elem The element to find the ancestors of.\n * @cat DOM/Traversing\n */\nparents: function( elem ){\n\tvar matched = [];\n\tvar cur = elem.parentNode;\n\twhile ( cur && cur != document ) {\n\t\tmatched.push( cur );\n\t\tcur = cur.parentNode;\n\t}\n\treturn matched;\n},\n\n/**\n * A handy, and fast, way to traverse in a particular direction and find\n * a specific element.\n *\n * @private\n * @name $.nth\n * @type DOMElement\n * @param DOMElement cur The element to search from.\n * @param String|Number num The Nth result to match. Can be a number or a string (like 'even' or 'odd').\n * @param String dir The direction to move in (pass in something like 'previousSibling' or 'nextSibling').\n * @cat DOM/Traversing\n */\nnth: function(cur,result,dir,elem){\n\tresult = result || 1;\n\tvar num = 0;\n\n\tfor ( ; cur; cur = cur[dir] )"},{"path":"./jquery-data/1.1.2/src/selector/selector.js","lines":[387,421],"code":"/**\n * All ancestors of a given element.\n *\n * @private\n * @name $.parents\n * @type Array<Element>\n * @param Element elem The element to find the ancestors of.\n * @cat DOM/Traversing\n */\nparents: function( elem ){\n\tvar matched = [];\n\tvar cur = elem.parentNode;\n\twhile ( cur && cur != document ) {\n\t\tmatched.push( cur );\n\t\tcur = cur.parentNode;\n\t}\n\treturn matched;\n},\n\n/**\n * A handy, and fast, way to traverse in a particular direction and find\n * a specific element.\n *\n * @private\n * @name $.nth\n * @type DOMElement\n * @param DOMElement cur The element to search from.\n * @param String|Number num The Nth result to match. Can be a number or a string (like 'even' or 'odd').\n * @param String dir The direction to move in (pass in something like 'previousSibling' or 'nextSibling').\n * @cat DOM/Traversing\n */\nnth: function(cur,result,dir,elem){\n\tresult = result || 1;\n\tvar num = 0;\n\tfor ( ; cur; cur = cur[dir] ) {"}]},
{"id":"5ba9253ff1c90ddda82a25b088a3fb9eaa1520c5","instances":[{"path":"./jquery-data/1.1.3.1/src/selector/selector.js","lines":[429,470],"code":"/**\n * A handy, and fast, way to traverse in a particular direction and find\n * a specific element.\n *\n * @private\n * @name $.nth\n * @type DOMElement\n * @param DOMElement cur The element to search from.\n * @param String|Number num The Nth result to match. Can be a number or a string (like 'even' or 'odd').\n * @param String dir The direction to move in (pass in something like 'previousSibling' or 'nextSibling').\n * @cat DOM/Traversing\n */\nnth: function(cur,result,dir,elem){\n\tresult = result || 1;\n\tvar num = 0;\n\n\tfor ( ; cur; cur = cur[dir] )\n\t\tif ( cur.nodeType == 1 && ++num == result )\n\t\t\tbreak;\n\n\treturn cur;\n},\n\n/**\n * All elements on a specified axis.\n *\n * @private\n * @name $.sibling\n * @type Array\n * @param Element elem The element to find all the siblings of (including itself).\n * @cat DOM/Traversing\n */\nsibling: function( n, elem ) {\n\tvar r = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType == 1 && (!elem || n != elem) )\n\t\t\tr.push( n );\n\t}\n\n\treturn r;\n}"},{"path":"./jquery-data/1.1.2/src/selector/selector.js","lines":[406,446],"code":"/**\n * A handy, and fast, way to traverse in a particular direction and find\n * a specific element.\n *\n * @private\n * @name $.nth\n * @type DOMElement\n * @param DOMElement cur The element to search from.\n * @param String|Number num The Nth result to match. Can be a number or a string (like 'even' or 'odd').\n * @param String dir The direction to move in (pass in something like 'previousSibling' or 'nextSibling').\n * @cat DOM/Traversing\n */\nnth: function(cur,result,dir,elem){\n\tresult = result || 1;\n\tvar num = 0;\n\tfor ( ; cur; cur = cur[dir] ) {\n\t\tif ( cur.nodeType == 1 ) num++;\n\t\tif ( num == result || result == \"even\" && num % 2 == 0 && num > 1 && cur == elem ||\n\t\t\tresult == \"odd\" && num % 2 == 1 && cur == elem ) return cur;\n\t}\n},\n\n/**\n * All elements on a specified axis.\n *\n * @private\n * @name $.sibling\n * @type Array\n * @param Element elem The element to find all the siblings of (including itself).\n * @cat DOM/Traversing\n */\nsibling: function( n, elem ) {\n\tvar r = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType == 1 && (!elem || n != elem) )\n\t\t\tr.push( n );\n\t}\n\n\treturn r;\n}"}]},
{"id":"790b7091d7d4baa5a978f188a5bd8466a0be7e28","instances":[{"path":"./jquery-data/1.1.3.1/src/selector/selectorTest.js","lines":[85,93],"code":"test(\"multiple\", function() {\n\texpect(4);\n\tt( \"Comma Support\", \"a.blog, div\", [\"mark\",\"simon\",\"main\",\"foo\"] );\n\tt( \"Comma Support\", \"a.blog , div\", [\"mark\",\"simon\",\"main\",\"foo\"] );\n\tt( \"Comma Support\", \"a.blog ,div\", [\"mark\",\"simon\",\"main\",\"foo\"] );\n\tt( \"Comma Support\", \"a.blog,div\", [\"mark\",\"simon\",\"main\",\"foo\"] );\n});\n\ntest(\"child and adjacent\", function() {"},{"path":"./jquery-data/1.1.2/src/selector/selectorTest.js","lines":[44,52],"code":"test(\"expressions - multiple\", function() {\r\n\texpect(4);\r\n\tt( \"Comma Support\", \"a.blog, div\", [\"mark\",\"simon\",\"main\",\"foo\"] );\r\n\tt( \"Comma Support\", \"a.blog , div\", [\"mark\",\"simon\",\"main\",\"foo\"] );\r\n\tt( \"Comma Support\", \"a.blog ,div\", [\"mark\",\"simon\",\"main\",\"foo\"] );\r\n\tt( \"Comma Support\", \"a.blog,div\", [\"mark\",\"simon\",\"main\",\"foo\"] );\r\n});\r\n\r\ntest(\"expressions - child and adjacent\", function() {\r"}]},
{"id":"f0840cc724275d8e3ae626b16f0b03327c4e8582","instances":[{"path":"./jquery-data/1.1.3.1/src/selector/selectorTest.js","lines":[149,155],"code":"test(\"pseudo (:) selectors\", function() {\n\texpect(30);\n\tt( \"First Child\", \"p:first-child\", [\"firstp\",\"sndp\"] );\n\tt( \"Last Child\", \"p:last-child\", [\"sap\"] );\n\tt( \"Only Child\", \"a:only-child\", [\"simon1\",\"anchor1\",\"yahoo\",\"anchor2\"] );\n\tt( \"Empty\", \"ul:empty\", [\"firstUL\"] );\n\tt( \"Enabled UI Element\", \"input:enabled\", [\"text1\",\"radio1\",\"radio2\",\"check1\",\"check2\",\"hidden1\",\"hidden2\",\"name\",\"length\",\"idTest\"] );"},{"path":"./jquery-data/1.1.2/src/selector/selectorTest.js","lines":[98,104],"code":"test(\"expressions - pseudo (:) selctors\", function() {\r\n\texpect(30);\r\n\tt( \"First Child\", \"p:first-child\", [\"firstp\",\"sndp\"] );\r\n\tt( \"Last Child\", \"p:last-child\", [\"sap\"] );\r\n\tt( \"Only Child\", \"a:only-child\", [\"simon1\",\"anchor1\",\"yahoo\",\"anchor2\"] );\r\n\tt( \"Empty\", \"ul:empty\", [\"firstUL\"] );\r\n\tt( \"Enabled UI Element\", \"input:enabled\", [\"text1\",\"radio1\",\"radio2\",\"check1\",\"check2\",\"hidden1\",\"hidden2\",\"name\"] );\r"}]},
{"id":"08b6ba7cbbf64e43b07e22ed76d330ba6fd11e8c","instances":[{"path":"./jquery-data/1.1.3.1/src/selector/selectorTest.js","lines":[185,198],"code":"test(\"basic xpath\", function() {\n\texpect(15);\n\tok( jQuery.find(\"//*\").length >= 30, \"All Elements (//*)\" );\n\tt( \"All Div Elements\", \"//div\", [\"main\",\"foo\"] );\n\tt( \"Absolute Path\", \"/html/body\", [\"body\"] );\n\tt( \"Absolute Path w/ *\", \"/* /body\", [\"body\"] );\n\tt( \"Long Absolute Path\", \"/html/body/dl/div/div/p\", [\"sndp\",\"en\",\"sap\"] );\n\tt( \"Absolute and Relative Paths\", \"/html//div\", [\"main\",\"foo\"] );\n\tt( \"All Children, Explicit\", \"//code/*\", [\"anchor1\",\"anchor2\"] );\n\tt( \"All Children, Implicit\", \"//code/\", [\"anchor1\",\"anchor2\"] );\n\tt( \"Attribute Exists\", \"//a[@title]\", [\"google\"] );\n\tt( \"Attribute Equals\", \"//a[@rel='bookmark']\", [\"simon1\"] );\n\tt( \"Parent Axis\", \"//p/..\", [\"main\",\"foo\"] );\n\tt( \"Sibling Axis\", \"//p/../\", [\"firstp\",\"ap\",\"foo\",\"first\",\"firstUL\",\"empty\",\"form\",\"floatTest\",\"iframe\",\"lengthtest\",\"table\",\"sndp\",\"en\",\"sap\"] );"},{"path":"./jquery-data/1.1.2/src/selector/selectorTest.js","lines":[134,147],"code":"test(\"expressions - basic xpath\", function() {\r\n\texpect(15);\r\n\tok( jQuery.find(\"//*\").length >= 30, \"All Elements (//*)\" );\r\n\tt( \"All Div Elements\", \"//div\", [\"main\",\"foo\"] );\r\n\tt( \"Absolute Path\", \"/html/body\", [\"body\"] );\r\n\tt( \"Absolute Path w/ *\", \"/* /body\", [\"body\"] );\r\n\tt( \"Long Absolute Path\", \"/html/body/dl/div/div/p\", [\"sndp\",\"en\",\"sap\"] );\r\n\tt( \"Absolute and Relative Paths\", \"/html//div\", [\"main\",\"foo\"] );\r\n\tt( \"All Children, Explicit\", \"//code/*\", [\"anchor1\",\"anchor2\"] );\r\n\tt( \"All Children, Implicit\", \"//code/\", [\"anchor1\",\"anchor2\"] );\r\n\tt( \"Attribute Exists\", \"//a[@title]\", [\"google\"] );\r\n\tt( \"Attribute Equals\", \"//a[@rel='bookmark']\", [\"simon1\"] );\r\n\tt( \"Parent Axis\", \"//p/..\", [\"main\",\"foo\"] );\r\n\tt( \"Sibling Axis\", \"//p/../\", [\"firstp\",\"ap\",\"foo\",\"first\",\"firstUL\",\"empty\",\"form\",\"floatTest\",\"sndp\",\"en\",\"sap\"] );\r"}]}]
