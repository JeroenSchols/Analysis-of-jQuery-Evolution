[{"id":"4ebf6afe4a85b6fd504cbb356b0b845aa6628a1e","instances":[{"path":"./jquery-data/2.1.3/src/event.js","lines":[81,89],"code":"types = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\nt = types.length;\nwhile ( t-- ) {\n\ttmp = rtypenamespace.exec( types[t] ) || [];\n\ttype = origType = tmp[1];\n\tnamespaces = ( tmp[2] || \"\" ).split( \".\" ).sort();\n\n\t// There *must* be a type, no attaching namespace-only handlers\n\tif ( !type ) {"},{"path":"./jquery-data/2.1.3/src/event.js","lines":[161,169],"code":"types = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\nt = types.length;\nwhile ( t-- ) {\n\ttmp = rtypenamespace.exec( types[t] ) || [];\n\ttype = origType = tmp[1];\n\tnamespaces = ( tmp[2] || \"\" ).split( \".\" ).sort();\n\n\t// Unbind all events (on this namespace, if provided) for the element\n\tif ( !type ) {"}]},
{"id":"925f8f4df2e42b0c7a23803463025651bfc288a6","instances":[{"path":"./jquery-data/2.1.3/src/manipulation.js","lines":[322,326],"code":"append: function() {\n\treturn this.domManip( arguments, function( elem ) {\n\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\ttarget.appendChild( elem );"},{"path":"./jquery-data/2.1.3/src/manipulation.js","lines":[331,335],"code":"prepend: function() {\n\treturn this.domManip( arguments, function( elem ) {\n\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\ttarget.insertBefore( elem, target.firstChild );"}]},
{"id":"fa9365950c85b61dff915dfa959c2dc50f25b679","instances":[{"path":"./jquery-data/2.1.3/src/selector-native.js","lines":[108,117],"code":"if ( selector_hasDuplicate ) {\n\twhile ( (elem = results[i++]) ) {\n\t\tif ( elem === results[ i ] ) {\n\t\t\tj = duplicates.push( i );\n\t\t}\n\t}\n\twhile ( j-- ) {\n\t\tresults.splice( duplicates[ j ], 1 );\n\t}\n}"},{"path":"./jquery-data/2.1.3/src/sizzle/dist/sizzle.js","lines":[923,932],"code":"if ( hasDuplicate ) {\n\twhile ( (elem = results[i++]) ) {\n\t\tif ( elem === results[ i ] ) {\n\t\t\tj = duplicates.push( i );\n\t\t}\n\t}\n\twhile ( j-- ) {\n\t\tresults.splice( duplicates[ j ], 1 );\n\t}\n}"}]},
{"id":"4f32a1fea583b54dc44613fd06b7151a89cef2ae","instances":[{"path":"./jquery-data/2.1.3/src/selector-native.js","lines":[121,131],"code":"text: function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += jQuery.text( node );"},{"path":"./jquery-data/2.1.3/src/sizzle/dist/sizzle.js","lines":[945,955],"code":"getText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );"}]},
{"id":"f3f5e66d41a52315ae8e25a943c75e021479e787","instances":[{"path":"./jquery-data/2.1.3/src/selector-native.js","lines":[143,147],"code":"contains: function( a, b ) {\n\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\tbup = b && b.parentNode;\n\treturn a === bup || !!( bup && bup.nodeType === 1 && adown.contains(bup) );\n},"},{"path":"./jquery-data/2.1.3/src/sizzle/dist/sizzle.js","lines":[718,722],"code":"contains = hasCompare || rnative.test( docElem.contains ) ?\n\tfunction( a, b ) {\n\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\tbup = b && b.parentNode;\n\t\treturn a === bup || !!( bup && bup.nodeType === 1 && ("}]},
{"id":"c9df5c13bb7ee15e9f5e50d431ba293d4d7f363d","instances":[{"path":"./jquery-data/2.1.3/src/attributes/classes.js","lines":[20,31],"code":"\t\tjQuery( this ).addClass( value.call( this, j, this.className ) );\n\t});\n}\n\nif ( proceed ) {\n\t// The disjunction here is for better compressibility (see removeClass)\n\tclasses = ( value || \"\" ).match( rnotwhite ) || [];\n\n\tfor ( ; i < len; i++ ) {\n\t\telem = this[ i ];\n\t\tcur = elem.nodeType === 1 && ( elem.className ?\n\t\t\t( \" \" + elem.className + \" \" ).replace( rclass, \" \" ) :"},{"path":"./jquery-data/2.1.3/src/attributes/classes.js","lines":[63,73],"code":"\t\tjQuery( this ).removeClass( value.call( this, j, this.className ) );\n\t});\n}\nif ( proceed ) {\n\tclasses = ( value || \"\" ).match( rnotwhite ) || [];\n\n\tfor ( ; i < len; i++ ) {\n\t\telem = this[ i ];\n\t\t// This expression is here for better compressibility (see addClass)\n\t\tcur = elem.nodeType === 1 && ( elem.className ?\n\t\t\t( \" \" + elem.className + \" \" ).replace( rclass, \" \" ) :"}]},
{"id":"88d002ffb7edfc2493f973dabc93bd53b1c70c88","instances":[{"path":"./jquery-data/1.1.1/src/ajax/ajaxTest.js","lines":[99,108],"code":"test(\"test global handlers - success\", function() {\n\texpect(8);\n\tstop();\n\tvar counter = { complete: 0, success: 0, error: 0, send: 0 },\n\t\tsuccess = function() { counter.success++ },\n\t\terror = function() { counter.error++ },\n\t\tcomplete = function() { counter.complete++ },\n\t\tsend = function() { counter.send++ };\n\n\t$('#foo').ajaxStart(complete).ajaxStop(complete).ajaxSend(send).ajaxComplete(complete).ajaxError(error).ajaxSuccess(success);"},{"path":"./jquery-data/1.1.1/src/ajax/ajaxTest.js","lines":[127,135],"code":"test(\"test global handlers - failure\", function() {\n\texpect(8);\n\tstop();\n\tvar counter = { complete: 0, success: 0, error: 0, send: 0 },\n\t\tsuccess = function() { counter.success++ },\n\t\terror = function() { counter.error++ },\n\t\tcomplete = function() { counter.complete++ },\n\t\tsend = function() { counter.send++ };\n\t$.ajaxTimeout(0);"}]},
{"id":"7653daa01237a48afb983f558117bc0d888a2deb","instances":[{"path":"./jquery-data/1.1.1/src/jquery/coreTest.js","lines":[557,561],"code":"var pass = true;\r\nfor ( var i = 0; i < div.size(); i++ ) {\r\n if ( div.get(i).className.indexOf(\"test\") == -1 ) pass = false;\r\n}\r\nok( pass, \"Add Class\" );\r"},{"path":"./jquery-data/1.1.1/src/jquery/coreTest.js","lines":[567,571],"code":"\tpass = true;\r\nfor ( var i = 0; i < div.size(); i++ ) {\r\n\tif ( div.get(i).className.indexOf(\"test\") != -1 ) pass = false;\r\n}\r\nok( pass, \"Remove Class\" );\r"}]}]
