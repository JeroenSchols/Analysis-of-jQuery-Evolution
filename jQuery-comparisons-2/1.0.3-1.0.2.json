[{"id":"36e7eff688a0da36cd2b529d156ee25a853c1c6a","instances":[{"path":"./jquery-data/1.0.3/src/ajax/ajax.js","lines":[1,76],"code":"jQuery.fn.extend({\n\n\t/**\n\t * Load HTML from a remote file and inject it into the DOM, only if it's\n\t * been modified by the server.\n\t *\n\t * @example $(\"#feeds\").loadIfModified(\"feeds.html\")\n\t * @before <div id=\"feeds\"></div>\n\t * @result <div id=\"feeds\"><b>45</b> feeds found.</div>\n\t *\n\t * @name loadIfModified\n\t * @type jQuery\n\t * @param String url The URL of the HTML file to load.\n\t * @param Hash params A set of key/value pairs that will be sent to the server.\n\t * @param Function callback A function to be executed whenever the data is loaded.\n\t * @cat AJAX\n\t */\n\tloadIfModified: function( url, params, callback ) {\n\t\tthis.load( url, params, callback, 1 );\n\t},\n\n\t/**\n\t * Load HTML from a remote file and inject it into the DOM.\n\t *\n\t * @example $(\"#feeds\").load(\"feeds.html\")\n\t * @before <div id=\"feeds\"></div>\n\t * @result <div id=\"feeds\"><b>45</b> feeds found.</div>\n\t *\n \t * @example $(\"#feeds\").load(\"feeds.html\",\n \t *   {test: true},\n \t *   function() { alert(\"load is done\"); }\n \t * );\n\t * @desc Same as above, but with an additional parameter\n\t * and a callback that is executed when the data was loaded.\n\t *\n\t * @test stop();\n\t * $('#first').load(\"data/name.php\", function() {\n\t * \tok( $('#first').text() == 'ERROR', 'Check if content was injected into the DOM' );\n\t * \tstart();\n\t * });\n\t *\n\t * @test stop(); // check if load can be called with only url\n\t * $('#first').load(\"data/name.php\");\n\t * $.get(\"data/name.php\", function() {\n\t *   ok( $('#first').text() == 'ERROR', 'Check if load works without callback');\n\t *   start();\n\t * });\n\t *\n\t * @test stop();\n\t * foobar = undefined;\n\t * foo = undefined;\n\t * var verifyEvaluation = function() {\n\t *   ok( foobar == \"bar\", 'Check if script src was evaluated after load' );\n\t *   start();\n\t * };\n\t * $('#first').load('data/test.html', function() {\n\t *   ok( $('#first').html().match(/^html text/), 'Check content after loading html' );\n\t *   ok( foo == \"foo\", 'Check if script was evaluated after load' );\n\t *   setTimeout(verifyEvaluation, 600);\n\t * });\n\t *\n\t * @name load\n\t * @type jQuery\n\t * @param String url The URL of the HTML file to load.\n\t * @param Hash params A set of key/value pairs that will be sent to the server.\n\t * @param Function callback A function to be executed whenever the data is loaded.\n\t * @cat AJAX\n\t */\n\tload: function( url, params, callback, ifModified ) {\n\t\tif ( url.constructor == Function )\n\t\t\treturn this.bind(\"load\", url);\n\t\n\t\tcallback = callback || function(){};\n\t\n\t\t// Default to a GET request\n\t\tvar type = \"GET\";"},{"path":"./jquery-data/1.0.2/src/ajax/ajax.js","lines":[1,63],"code":"jQuery.fn.extend({\n\n\t/**\n\t * Load HTML from a remote file and inject it into the DOM, only if it's\n\t * been modified by the server.\n\t *\n\t * @example $(\"#feeds\").loadIfModified(\"feeds.html\")\n\t * @before <div id=\"feeds\"></div>\n\t * @result <div id=\"feeds\"><b>45</b> feeds found.</div>\n\t *\n\t * @name loadIfModified\n\t * @type jQuery\n\t * @param String url The URL of the HTML file to load.\n\t * @param Hash params A set of key/value pairs that will be sent to the server.\n\t * @param Function callback A function to be executed whenever the data is loaded.\n\t * @cat AJAX\n\t */\n\tloadIfModified: function( url, params, callback ) {\n\t\tthis.load( url, params, callback, 1 );\n\t},\n\n\t/**\n\t * Load HTML from a remote file and inject it into the DOM.\n\t *\n\t * @example $(\"#feeds\").load(\"feeds.html\")\n\t * @before <div id=\"feeds\"></div>\n\t * @result <div id=\"feeds\"><b>45</b> feeds found.</div>\n\t *\n \t * @example $(\"#feeds\").load(\"feeds.html\",\n \t *   {test: true},\n \t *   function() { alert(\"load is done\"); }\n \t * );\n\t * @desc Same as above, but with an additional parameter\n\t * and a callback that is executed when the data was loaded.\n\t *\n\t * @test stop();\n\t * $('#first').load(\"data/name.php\", function() {\n\t * \tok( $('#first').text() == 'ERROR', 'Check if content was injected into the DOM' );\n\t * \tstart();\n\t * });\n\t *\n\t * @test stop(); // check if load can be called with only url\n\t * $('#first').load(\"data/name.php\");\n\t * $.get(\"data/name.php\", function() {\n\t *   ok( $('#first').text() == 'ERROR', 'Check if load works without callback');\n\t *   start();\n\t * });\n\t *\n\t * @name load\n\t * @type jQuery\n\t * @param String url The URL of the HTML file to load.\n\t * @param Hash params A set of key/value pairs that will be sent to the server.\n\t * @param Function callback A function to be executed whenever the data is loaded.\n\t * @cat AJAX\n\t */\n\tload: function( url, params, callback, ifModified ) {\n\t\tif ( url.constructor == Function )\n\t\t\treturn this.bind(\"load\", url);\n\t\n\t\tcallback = callback || function(){};\n\t\n\t\t// Default to a GET request\n\t\tvar type = \"GET\";"}]},
{"id":"1c37e3ce0c82168653da2cad046b5c2b28afdb72","instances":[{"path":"./jquery-data/1.0.3/src/ajax/ajax.js","lines":[151,329],"code":"// If IE is used, create a wrapper for the XMLHttpRequest object\nif ( jQuery.browser.msie && typeof XMLHttpRequest == \"undefined\" )\n\tXMLHttpRequest = function(){\n\t\treturn new ActiveXObject(\n\t\t\tnavigator.userAgent.indexOf(\"MSIE 5\") >= 0 ?\n\t\t\t\"Microsoft.XMLHTTP\" : \"Msxml2.XMLHTTP\"\n\t\t);\n\t};\n\n// Attach a bunch of functions for handling common AJAX events\n\n/**\n * Attach a function to be executed whenever an AJAX request begins.\n *\n * @example $(\"#loading\").ajaxStart(function(){\n *   $(this).show();\n * });\n * @desc Show a loading message whenever an AJAX request starts.\n *\n * @name ajaxStart\n * @type jQuery\n * @param Function callback The function to execute.\n * @cat AJAX\n */\n \n/**\n * Attach a function to be executed whenever all AJAX requests have ended.\n *\n * @example $(\"#loading\").ajaxStop(function(){\n *   $(this).hide();\n * });\n * @desc Hide a loading message after all the AJAX requests have stopped.\n *\n * @name ajaxStop\n * @type jQuery\n * @param Function callback The function to execute.\n * @cat AJAX\n */\n \n/**\n * Attach a function to be executed whenever an AJAX request completes.\n *\n * @example $(\"#msg\").ajaxComplete(function(){\n *   $(this).append(\"<li>Request Complete.</li>\");\n * });\n * @desc Show a message when an AJAX request completes.\n *\n * @name ajaxComplete\n * @type jQuery\n * @param Function callback The function to execute.\n * @cat AJAX\n */\n \n/**\n * Attach a function to be executed whenever an AJAX request completes\n * successfully.\n *\n * @example $(\"#msg\").ajaxSuccess(function(){\n *   $(this).append(\"<li>Successful Request!</li>\");\n * });\n * @desc Show a message when an AJAX request completes successfully.\n *\n * @name ajaxSuccess\n * @type jQuery\n * @param Function callback The function to execute.\n * @cat AJAX\n */\n \n/**\n * Attach a function to be executed whenever an AJAX request fails.\n *\n * @example $(\"#msg\").ajaxError(function(){\n *   $(this).append(\"<li>Error requesting page.</li>\");\n * });\n * @desc Show a message when an AJAX request fails.\n *\n * @name ajaxError\n * @type jQuery\n * @param Function callback The function to execute.\n * @cat AJAX\n */\n \n/**\n * @test stop(); var counter = { complete: 0, success: 0, error: 0 };\n * var success = function() { counter.success++ };\n * var error = function() { counter.error++ };\n * var complete = function() { counter.complete++ };\n * $('#foo').ajaxStart(complete).ajaxStop(complete).ajaxComplete(complete).ajaxError(error).ajaxSuccess(success);\n * // start with successful test\n * $.ajax({url: \"data/name.php\", success: success, error: error, complete: function() {\n *   ok( counter.error == 0, 'Check succesful request' );\n *   ok( counter.success == 2, 'Check succesful request' );\n *   ok( counter.complete == 3, 'Check succesful request' );\n *   counter.error = 0; counter.success = 0; counter.complete = 0;\n *   $.ajaxTimeout(500);\n *   $.ajax({url: \"data/name.php?wait=5\", success: success, error: error, complete: function() {\n *     ok( counter.error == 2, 'Check failed request' );\n *     ok( counter.success == 0, 'Check failed request' );\n *     ok( counter.complete == 3, 'Check failed request' );\n *     start();"},{"path":"./jquery-data/1.0.2/src/ajax/ajax.js","lines":[132,299],"code":"// If IE is used, create a wrapper for the XMLHttpRequest object\nif ( jQuery.browser.msie && typeof XMLHttpRequest == \"undefined\" )\n\tXMLHttpRequest = function(){\n\t\treturn new ActiveXObject(\n\t\t\tnavigator.userAgent.indexOf(\"MSIE 5\") >= 0 ?\n\t\t\t\"Microsoft.XMLHTTP\" : \"Msxml2.XMLHTTP\"\n\t\t);\n\t};\n\n// Attach a bunch of functions for handling common AJAX events\n\n/**\n * Attach a function to be executed whenever an AJAX request begins.\n *\n * @example $(\"#loading\").ajaxStart(function(){\n *   $(this).show();\n * });\n * @desc Show a loading message whenever an AJAX request starts.\n *\n * @name ajaxStart\n * @type jQuery\n * @param Function callback The function to execute.\n * @cat AJAX\n */\n \n/**\n * Attach a function to be executed whenever all AJAX requests have ended.\n *\n * @example $(\"#loading\").ajaxStop(function(){\n *   $(this).hide();\n * });\n * @desc Hide a loading message after all the AJAX requests have stopped.\n *\n * @name ajaxStop\n * @type jQuery\n * @param Function callback The function to execute.\n * @cat AJAX\n */\n \n/**\n * Attach a function to be executed whenever an AJAX request completes.\n *\n * @example $(\"#msg\").ajaxComplete(function(){\n *   $(this).append(\"<li>Request Complete.</li>\");\n * });\n * @desc Show a message when an AJAX request completes.\n *\n * @name ajaxComplete\n * @type jQuery\n * @param Function callback The function to execute.\n * @cat AJAX\n */\n \n/**\n * Attach a function to be executed whenever an AJAX request completes\n * successfully.\n *\n * @example $(\"#msg\").ajaxSuccess(function(){\n *   $(this).append(\"<li>Successful Request!</li>\");\n * });\n * @desc Show a message when an AJAX request completes successfully.\n *\n * @name ajaxSuccess\n * @type jQuery\n * @param Function callback The function to execute.\n * @cat AJAX\n */\n \n/**\n * Attach a function to be executed whenever an AJAX request fails.\n *\n * @example $(\"#msg\").ajaxError(function(){\n *   $(this).append(\"<li>Error requesting page.</li>\");\n * });\n * @desc Show a message when an AJAX request fails.\n *\n * @name ajaxError\n * @type jQuery\n * @param Function callback The function to execute.\n * @cat AJAX\n */\n \n/**\n * @test stop(); var counter = { complete: 0, success: 0, error: 0 };\n * var success = function() { counter.success++ };\n * var error = function() { counter.error++ };\n * var complete = function() { counter.complete++ };\n * $('#foo').ajaxStart(complete).ajaxStop(complete).ajaxComplete(complete).ajaxError(error).ajaxSuccess(success);\n * // start with successful test\n * $.ajax({url: \"data/name.php\", success: success, error: error, complete: function() {\n *   ok( counter.error == 0, 'Check succesful request' );\n *   ok( counter.success == 2, 'Check succesful request' );\n *   ok( counter.complete == 3, 'Check succesful request' );\n *   counter.error = 0; counter.success = 0; counter.complete = 0;\n *   $.ajaxTimeout(500);\n *   $.ajax({url: \"data/name.php?wait=5\", success: success, error: error, complete: function() {\n *     ok( counter.error == 2, 'Check failed request' );\n *     ok( counter.success == 0, 'Check failed request' );\n *     ok( counter.complete == 3, 'Check failed request' );\n *     start();"}]},
{"id":"d2068e13928e85bab0e5f000a70871ead814cf8d","instances":[{"path":"./jquery-data/1.0.3/src/ajax/ajax.js","lines":[684,690],"code":"if ( !url ) {\n\tret = type.complete;\n\tvar success = type.success;\n\tvar error = type.error;\n\tvar dataType = type.dataType;\n\tvar global = typeof type.global == \"boolean\" ? type.global : true;\n\tvar timeout = typeof type.timeout == \"number\" ? type.timeout : jQuery.timeout;"},{"path":"./jquery-data/1.0.2/src/ajax/ajax.js","lines":[617,623],"code":"if ( !url ) {\n\tret = type.complete;\n\tvar success = type.success;\n\tvar error = type.error;\n\tvar dataType = type.dataType;\n\tvar global = typeof type.global == \"boolean\" ? type.global : true;\n\tvar timeout = typeof type.timeout == \"number\" ? type.timeout : jQuery.timeout;"}]},
{"id":"2e9df6733e58c882d4f2f8d473cae1ff22cd0042","instances":[{"path":"./jquery-data/1.0.3/src/ajax/ajax.js","lines":[569,843],"code":"/**\n * Load a remote page using an HTTP request. This function is the primary\n * means of making AJAX requests using jQuery. $.ajax() takes one property,\n * an object of key/value pairs, that're are used to initalize the request.\n *\n * These are all the key/values that can be passed in to 'prop':\n *\n * (String) type - The type of request to make (e.g. \"POST\" or \"GET\").\n *\n * (String) url - The URL of the page to request.\n * \n * (String) data - A string of data to be sent to the server (POST only).\n *\n * (String) dataType - The type of data that you're expecting back from\n * the server (e.g. \"xml\", \"html\", \"script\", or \"json\").\n *\n * (Boolean) ifModified - Allow the request to be successful only if the\n * response has changed since the last request, default is false, ignoring\n * the Last-Modified header\n *\n * (Number) timeout - Local timeout to override global timeout, eg. to give a\n * single request a longer timeout while all others timeout after 1 seconds,\n * see $.ajaxTimeout\n *\n * (Boolean) global - Wheather to trigger global AJAX event handlers for\n * this request, default is true. Set to true to prevent that global handlers\n * like ajaxStart or ajaxStop are triggered.\n *\n * (Function) error - A function to be called if the request fails. The\n * function gets passed two arguments: The XMLHttpRequest object and a\n * string describing the type of error that occurred.\n *\n * (Function) success - A function to be called if the request succeeds. The\n * function gets passed one argument: The data returned from the server,\n * formatted according to the 'dataType' parameter.\n *\n * (Function) complete - A function to be called when the request finishes. The\n * function gets passed two arguments: The XMLHttpRequest object and a\n * string describing the type the success of the request.\n *\n * @example $.ajax({\n *   type: \"GET\",\n *   url: \"test.js\",\n *   dataType: \"script\"\n * })\n * @desc Load and execute a JavaScript file.\n *\n * @example $.ajax({\n *   type: \"POST\",\n *   url: \"some.php\",\n *   data: \"name=John&location=Boston\",\n *   success: function(msg){\n *     alert( \"Data Saved: \" + msg );\n *   }\n * });\n * @desc Save some data to the server and notify the user once its complete.\n *\n * @test stop();\n * $.ajax({\n *   type: \"GET\",\n *   url: \"data/name.php?name=foo\",\n *   success: function(msg){\n *     ok( msg == 'bar', 'Check for GET' );\n *     start();\n *   }\n * });\n *\n * @test stop();\n * $.ajax({\n *   type: \"POST\",\n *   url: \"data/name.php\",\n *   data: \"name=peter\",\n *   success: function(msg){\n *     ok( msg == 'pan', 'Check for POST' );\n *     start();\n *   }\n * });\n *\n * @test stop();\n * foobar = undefined;\n * foo = undefined;\n * var verifyEvaluation = function() {\n *   ok( foobar == \"bar\", 'Check if script src was evaluated for datatype html' );\n *   start();\n * };\n * $.ajax({\n *   dataType: \"html\",\n *   url: \"data/test.html\",\n *   success: function(data) {\n *     ok( data.match(/^html text/), 'Check content for datatype html' );\n *     ok( foo == \"foo\", 'Check if script was evaluated for datatype html' );\n *     setTimeout(verifyEvaluation, 600);\n *   }\n * });\n *\n * @test stop();\n * $.ajax({\n *   url: \"data/with_fries.xml\", dataType: \"xml\", type: \"GET\", data: \"\", success: function(resp) {\n *     ok( $(\"properties\", resp).length == 1, 'properties in responseXML' );\n *     ok( $(\"jsconf\", resp).length == 1, 'jsconf in responseXML' );"},{"path":"./jquery-data/1.0.2/src/ajax/ajax.js","lines":[531,776],"code":"/**\n * Load a remote page using an HTTP request. This function is the primary\n * means of making AJAX requests using jQuery. $.ajax() takes one property,\n * an object of key/value pairs, that're are used to initalize the request.\n *\n * These are all the key/values that can be passed in to 'prop':\n *\n * (String) type - The type of request to make (e.g. \"POST\" or \"GET\").\n *\n * (String) url - The URL of the page to request.\n * \n * (String) data - A string of data to be sent to the server (POST only).\n *\n * (String) dataType - The type of data that you're expecting back from\n * the server (e.g. \"xml\", \"html\", \"script\", or \"json\").\n *\n * (Boolean) ifModified - Allow the request to be successful only if the\n * response has changed since the last request, default is false, ignoring\n * the Last-Modified header\n *\n * (Number) timeout - Local timeout to override global timeout, eg. to give a\n * single request a longer timeout while all others timeout after 1 seconds,\n * see $.ajaxTimeout\n *\n * (Boolean) global - Wheather to trigger global AJAX event handlers for\n * this request, default is true. Set to true to prevent that global handlers\n * like ajaxStart or ajaxStop are triggered.\n *\n * (Function) error - A function to be called if the request fails. The\n * function gets passed two arguments: The XMLHttpRequest object and a\n * string describing the type of error that occurred.\n *\n * (Function) success - A function to be called if the request succeeds. The\n * function gets passed one argument: The data returned from the server,\n * formatted according to the 'dataType' parameter.\n *\n * (Function) complete - A function to be called when the request finishes. The\n * function gets passed two arguments: The XMLHttpRequest object and a\n * string describing the type the success of the request.\n *\n * @example $.ajax({\n *   type: \"GET\",\n *   url: \"test.js\",\n *   dataType: \"script\"\n * })\n * @desc Load and execute a JavaScript file.\n *\n * @example $.ajax({\n *   type: \"POST\",\n *   url: \"some.php\",\n *   data: \"name=John&location=Boston\",\n *   success: function(msg){\n *     alert( \"Data Saved: \" + msg );\n *   }\n * });\n * @desc Save some data to the server and notify the user once its complete.\n *\n * @test stop();\n * $.ajax({\n *   type: \"GET\",\n *   url: \"data/name.php?name=foo\",\n *   success: function(msg){\n *     ok( msg == 'bar', 'Check for GET' );\n *     start();\n *   }\n * });\n *\n * @test stop();\n * $.ajax({\n *   type: \"POST\",\n *   url: \"data/name.php\",\n *   data: \"name=peter\",\n *   success: function(msg){\n *     ok( msg == 'pan', 'Check for POST' );\n *     start();\n *   }\n * });\n *\n * @name $.ajax\n * @type jQuery\n * @param Hash prop A set of properties to initialize the request with.\n * @cat AJAX\n */\najax: function( type, url, data, ret, ifModified ) {\n\t// If only a single argument was passed in,\n\t// assume that it is a object of key/value pairs\n\tif ( !url ) {\n\t\tret = type.complete;\n\t\tvar success = type.success;\n\t\tvar error = type.error;\n\t\tvar dataType = type.dataType;\n\t\tvar global = typeof type.global == \"boolean\" ? type.global : true;\n\t\tvar timeout = typeof type.timeout == \"number\" ? type.timeout : jQuery.timeout;\n\t\tvar ifModified = type.ifModified || false;\n\t\tdata = type.data;\n\t\turl = type.url;\n\t\ttype = type.type;\n\t}\n\t\n\t// Watch for a new set of requests"}]},
{"id":"5fb928d6229a57822e7db90e2a190241e9ec99b4","instances":[{"path":"./jquery-data/1.0.3/src/ajax/ajax.js","lines":[828,872],"code":"/* Get the data out of an XMLHttpRequest.\n * Return parsed XML if content-type header is \"xml\" and type is \"xml\" or omitted,\n * otherwise return plain text.\n * (String) data - The type of data that you're expecting back,\n * (e.g. \"xml\", \"html\", \"script\")\n */\nhttpData: function(r,type) {\n\tvar ct = r.getResponseHeader(\"content-type\");\n\tvar data = !type && ct && ct.indexOf(\"xml\") >= 0;\n\tdata = type == \"xml\" || data ? r.responseXML : r.responseText;\n\n\t// If the type is \"script\", eval it\n\tif ( type == \"script\" ) eval.call( window, data );\n\n\t// Get the JavaScript object, if JSON is used.\n\tif ( type == \"json\" ) eval( \"data = \" + data );\n\t\n\t// evaluate scripts within html\n\tif ( type == \"html\" ) $(\"<div>\").html(data).evalScripts();\n\n\treturn data;\n},\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\nparam: function(a) {\n\tvar s = [];\n\t\n\t// If an array was passed in, assume that it is an array\n\t// of form elements\n\tif ( a.constructor == Array || a.jquery ) {\n\t\t// Serialize the form elements\n\t\tfor ( var i = 0; i < a.length; i++ )\n\t\t\ts.push( a[i].name + \"=\" + encodeURIComponent( a[i].value ) );\n\t\t\n\t// Otherwise, assume that it's an object of key/value pairs\n\t} else {\n\t\t// Serialize the key/values\n\t\tfor ( var j in a )\n\t\t\ts.push( j + \"=\" + encodeURIComponent( a[j] ) );\n\t}\n\t\n\t// Return the resulting serialization\n\treturn s.join(\"&\");\n}"},{"path":"./jquery-data/1.0.2/src/ajax/ajax.js","lines":[761,802],"code":"/* Get the data out of an XMLHttpRequest.\n * Return parsed XML if content-type header is \"xml\" and type is \"xml\" or omitted,\n * otherwise return plain text.\n * (String) data - The type of data that you're expecting back,\n * (e.g. \"xml\", \"html\", \"script\")\n */\nhttpData: function(r,type) {\n\tvar ct = r.getResponseHeader(\"content-type\");\n\tvar data = !type && ct && ct.indexOf(\"xml\") >= 0;\n\tdata = type == \"xml\" || data ? r.responseXML : r.responseText;\n\n\t// If the type is \"script\", eval it\n\tif ( type == \"script\" ) eval.call( window, data );\n\n\t// Get the JavaScript object, if JSON is used.\n\tif ( type == \"json\" ) eval( \"data = \" + data );\n\n\treturn data;\n},\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\nparam: function(a) {\n\tvar s = [];\n\t\n\t// If an array was passed in, assume that it is an array\n\t// of form elements\n\tif ( a.constructor == Array || a.jquery ) {\n\t\t// Serialize the form elements\n\t\tfor ( var i = 0; i < a.length; i++ )\n\t\t\ts.push( a[i].name + \"=\" + encodeURIComponent( a[i].value ) );\n\t\t\n\t// Otherwise, assume that it's an object of key/value pairs\n\t} else {\n\t\t// Serialize the key/values\n\t\tfor ( var j in a )\n\t\t\ts.push( j + \"=\" + encodeURIComponent( a[j] ) );\n\t}\n\t\n\t// Return the resulting serialization\n\treturn s.join(\"&\");\n}"}]},
{"id":"d256d545712a53e84ff624561c5eae028bc20f4f","instances":[{"path":"./jquery-data/1.0.3/src/event/event.js","lines":[1,83],"code":"jQuery.fn.extend({\n\n\t// We're overriding the old toggle function, so\n\t// remember it for later\n\t_toggle: jQuery.fn.toggle,\n\t\n\t/**\n\t * Toggle between two function calls every other click.\n\t * Whenever a matched element is clicked, the first specified function \n\t * is fired, when clicked again, the second is fired. All subsequent \n\t * clicks continue to rotate through the two functions.\n\t *\n\t * @example $(\"p\").toggle(function(){\n\t *   $(this).addClass(\"selected\");\n\t * },function(){\n\t *   $(this).removeClass(\"selected\");\n\t * });\n\t * \n\t * @test var count = 0;\n\t * var fn1 = function() { count++; }\n\t * var fn2 = function() { count--; }\n\t * var link = $('#mark');\n\t * link.click().toggle(fn1, fn2).click().click().click().click().click();\n\t * ok( count == 1, \"Check for toggle(fn, fn)\" );\n\t *\n\t * @name toggle\n\t * @type jQuery\n\t * @param Function even The function to execute on every even click.\n\t * @param Function odd The function to execute on every odd click.\n\t * @cat Events\n\t */\n\ttoggle: function(a,b) {\n\t\t// If two functions are passed in, we're\n\t\t// toggling on a click\n\t\treturn a && b && a.constructor == Function && b.constructor == Function ? this.click(function(e){\n\t\t\t// Figure out which function to execute\n\t\t\tthis.last = this.last == a ? b : a;\n\t\t\t\n\t\t\t// Make sure that clicks stop\n\t\t\te.preventDefault();\n\t\t\t\n\t\t\t// and execute the function\n\t\t\treturn this.last.apply( this, [e] ) || false;\n\t\t}) :\n\t\t\n\t\t// Otherwise, execute the old toggle function\n\t\tthis._toggle.apply( this, arguments );\n\t},\n\t\n\t/**\n\t * A method for simulating hovering (moving the mouse on, and off,\n\t * an object). This is a custom method which provides an 'in' to a \n\t * frequent task.\n\t *\n\t * Whenever the mouse cursor is moved over a matched \n\t * element, the first specified function is fired. Whenever the mouse \n\t * moves off of the element, the second specified function fires. \n\t * Additionally, checks are in place to see if the mouse is still within \n\t * the specified element itself (for example, an image inside of a div), \n\t * and if it is, it will continue to 'hover', and not move out \n\t * (a common error in using a mouseout event handler).\n\t *\n\t * @example $(\"p\").hover(function(){\n\t *   $(this).addClass(\"over\");\n\t * },function(){\n\t *   $(this).addClass(\"out\");\n\t * });\n\t *\n\t * @name hover\n\t * @type jQuery\n\t * @param Function over The function to fire whenever the mouse is moved over a matched element.\n\t * @param Function out The function to fire whenever the mouse is moved off of a matched element.\n\t * @cat Events\n\t */\n\thover: function(f,g) {\n\t\t\n\t\t// A private function for haandling mouse 'hovering'\n\t\tfunction handleHover(e) {\n\t\t\t// Check if mouse(over|out) are still within the same parent element\n\t\t\tvar p = (e.type == \"mouseover\" ? e.fromElement : e.toElement) || e.relatedTarget;\n\t\n\t\t\t// Traverse up the tree\n\t\t\twhile ( p && p != this ) try { p = p.parentNode } catch(e) { p = this; };"},{"path":"./jquery-data/1.0.2/src/event/event.js","lines":[1,83],"code":"jQuery.fn.extend({\n\n\t// We're overriding the old toggle function, so\n\t// remember it for later\n\t_toggle: jQuery.fn.toggle,\n\t\n\t/**\n\t * Toggle between two function calls every other click.\n\t * Whenever a matched element is clicked, the first specified function \n\t * is fired, when clicked again, the second is fired. All subsequent \n\t * clicks continue to rotate through the two functions.\n\t *\n\t * @example $(\"p\").toggle(function(){\n\t *   $(this).addClass(\"selected\");\n\t * },function(){\n\t *   $(this).removeClass(\"selected\");\n\t * });\n\t * \n\t * @test var count = 0;\n\t * var fn1 = function() { count++; }\n\t * var fn2 = function() { count--; }\n\t * var link = $('#mark');\n\t * link.click().toggle(fn1, fn2).click().click().click().click().click();\n\t * ok( count == 1, \"Check for toggle(fn, fn)\" );\n\t *\n\t * @name toggle\n\t * @type jQuery\n\t * @param Function even The function to execute on every even click.\n\t * @param Function odd The function to execute on every odd click.\n\t * @cat Events\n\t */\n\ttoggle: function(a,b) {\n\t\t// If two functions are passed in, we're\n\t\t// toggling on a click\n\t\treturn a && b && a.constructor == Function && b.constructor == Function ? this.click(function(e){\n\t\t\t// Figure out which function to execute\n\t\t\tthis.last = this.last == a ? b : a;\n\t\t\t\n\t\t\t// Make sure that clicks stop\n\t\t\te.preventDefault();\n\t\t\t\n\t\t\t// and execute the function\n\t\t\treturn this.last.apply( this, [e] ) || false;\n\t\t}) :\n\t\t\n\t\t// Otherwise, execute the old toggle function\n\t\tthis._toggle.apply( this, arguments );\n\t},\n\t\n\t/**\n\t * A method for simulating hovering (moving the mouse on, and off,\n\t * an object). This is a custom method which provides an 'in' to a \n\t * frequent task.\n\t *\n\t * Whenever the mouse cursor is moved over a matched \n\t * element, the first specified function is fired. Whenever the mouse \n\t * moves off of the element, the second specified function fires. \n\t * Additionally, checks are in place to see if the mouse is still within \n\t * the specified element itself (for example, an image inside of a div), \n\t * and if it is, it will continue to 'hover', and not move out \n\t * (a common error in using a mouseout event handler).\n\t *\n\t * @example $(\"p\").hover(function(){\n\t *   $(this).addClass(\"over\");\n\t * },function(){\n\t *   $(this).addClass(\"out\");\n\t * });\n\t *\n\t * @name hover\n\t * @type jQuery\n\t * @param Function over The function to fire whenever the mouse is moved over a matched element.\n\t * @param Function out The function to fire whenever the mouse is moved off of a matched element.\n\t * @cat Events\n\t */\n\thover: function(f,g) {\n\t\t\n\t\t// A private function for haandling mouse 'hovering'\n\t\tfunction handleHover(e) {\n\t\t\t// Check if mouse(over|out) are still within the same parent element\n\t\t\tvar p = (e.type == \"mouseover\" ? e.fromElement : e.toElement) || e.relatedTarget;\n\t\n\t\t\t// Traverse up the tree\n\t\t\twhile ( p && p != this ) try { p = p.parentNode } catch(e) { p = this; };"}]},
{"id":"92582c6fafc357fb0c39058e2cf0fdabe8e53146","instances":[{"path":"./jquery-data/1.0.3/src/event/event.js","lines":[50,1594],"code":"\t/**\n\t * A method for simulating hovering (moving the mouse on, and off,\n\t * an object). This is a custom method which provides an 'in' to a \n\t * frequent task.\n\t *\n\t * Whenever the mouse cursor is moved over a matched \n\t * element, the first specified function is fired. Whenever the mouse \n\t * moves off of the element, the second specified function fires. \n\t * Additionally, checks are in place to see if the mouse is still within \n\t * the specified element itself (for example, an image inside of a div), \n\t * and if it is, it will continue to 'hover', and not move out \n\t * (a common error in using a mouseout event handler).\n\t *\n\t * @example $(\"p\").hover(function(){\n\t *   $(this).addClass(\"over\");\n\t * },function(){\n\t *   $(this).addClass(\"out\");\n\t * });\n\t *\n\t * @name hover\n\t * @type jQuery\n\t * @param Function over The function to fire whenever the mouse is moved over a matched element.\n\t * @param Function out The function to fire whenever the mouse is moved off of a matched element.\n\t * @cat Events\n\t */\n\thover: function(f,g) {\n\t\t\n\t\t// A private function for haandling mouse 'hovering'\n\t\tfunction handleHover(e) {\n\t\t\t// Check if mouse(over|out) are still within the same parent element\n\t\t\tvar p = (e.type == \"mouseover\" ? e.fromElement : e.toElement) || e.relatedTarget;\n\t\n\t\t\t// Traverse up the tree\n\t\t\twhile ( p && p != this ) try { p = p.parentNode } catch(e) { p = this; };\n\t\t\t\n\t\t\t// If we actually just moused on to a sub-element, ignore it\n\t\t\tif ( p == this ) return false;\n\t\t\t\n\t\t\t// Execute the right function\n\t\t\treturn (e.type == \"mouseover\" ? f : g).apply(this, [e]);\n\t\t}\n\t\t\n\t\t// Bind the function to the two event listeners\n\t\treturn this.mouseover(handleHover).mouseout(handleHover);\n\t},\n\t\n\t/**\n\t * Bind a function to be executed whenever the DOM is ready to be\n\t * traversed and manipulated. This is probably the most important \n\t * function included in the event module, as it can greatly improve\n\t * the response times of your web applications.\n\t *\n\t * In a nutshell, this is a solid replacement for using window.onload, \n\t * and attaching a function to that. By using this method, your bound Function \n\t * will be called the instant the DOM is ready to be read and manipulated, \n\t * which is exactly what 99.99% of all Javascript code needs to run.\n\t * \n\t * Please ensure you have no code in your &lt;body&gt; onload event handler, \n\t * otherwise $(document).ready() may not fire.\n\t *\n\t * You can have as many $(document).ready events on your page as you like.\n\t *\n\t * @example $(document).ready(function(){ Your code here... });\n\t *\n\t * @name ready\n\t * @type jQuery\n\t * @param Function fn The function to be executed when the DOM is ready.\n\t * @cat Events\n\t */\n\tready: function(f) {\n\t\t// If the DOM is already ready\n\t\tif ( jQuery.isReady )\n\t\t\t// Execute the function immediately\n\t\t\tf.apply( document );\n\t\t\t\n\t\t// Otherwise, remember the function for later\n\t\telse {\n\t\t\t// Add the function to the wait list\n\t\t\tjQuery.readyList.push( f );\n\t\t}\n\t\n\t\treturn this;\n\t}\n});\n\njQuery.extend({\n\t/*\n\t * All the code that makes DOM Ready work nicely.\n\t */\n\tisReady: false,\n\treadyList: [],\n\t\n\t// Handle when the DOM is ready\n\tready: function() {\n\t\t// Make sure that the DOM is not already loaded\n\t\tif ( !jQuery.isReady ) {\n\t\t\t// Remember that the DOM is ready\n\t\t\tjQuery.isReady = true;\n\t\t\t\n\t\t\t// If there are functions bound, to execute"},{"path":"./jquery-data/1.0.2/src/event/event.js","lines":[50,1594],"code":"\t/**\n\t * A method for simulating hovering (moving the mouse on, and off,\n\t * an object). This is a custom method which provides an 'in' to a \n\t * frequent task.\n\t *\n\t * Whenever the mouse cursor is moved over a matched \n\t * element, the first specified function is fired. Whenever the mouse \n\t * moves off of the element, the second specified function fires. \n\t * Additionally, checks are in place to see if the mouse is still within \n\t * the specified element itself (for example, an image inside of a div), \n\t * and if it is, it will continue to 'hover', and not move out \n\t * (a common error in using a mouseout event handler).\n\t *\n\t * @example $(\"p\").hover(function(){\n\t *   $(this).addClass(\"over\");\n\t * },function(){\n\t *   $(this).addClass(\"out\");\n\t * });\n\t *\n\t * @name hover\n\t * @type jQuery\n\t * @param Function over The function to fire whenever the mouse is moved over a matched element.\n\t * @param Function out The function to fire whenever the mouse is moved off of a matched element.\n\t * @cat Events\n\t */\n\thover: function(f,g) {\n\t\t\n\t\t// A private function for haandling mouse 'hovering'\n\t\tfunction handleHover(e) {\n\t\t\t// Check if mouse(over|out) are still within the same parent element\n\t\t\tvar p = (e.type == \"mouseover\" ? e.fromElement : e.toElement) || e.relatedTarget;\n\t\n\t\t\t// Traverse up the tree\n\t\t\twhile ( p && p != this ) try { p = p.parentNode } catch(e) { p = this; };\n\t\t\t\n\t\t\t// If we actually just moused on to a sub-element, ignore it\n\t\t\tif ( p == this ) return false;\n\t\t\t\n\t\t\t// Execute the right function\n\t\t\treturn (e.type == \"mouseover\" ? f : g).apply(this, [e]);\n\t\t}\n\t\t\n\t\t// Bind the function to the two event listeners\n\t\treturn this.mouseover(handleHover).mouseout(handleHover);\n\t},\n\t\n\t/**\n\t * Bind a function to be executed whenever the DOM is ready to be\n\t * traversed and manipulated. This is probably the most important \n\t * function included in the event module, as it can greatly improve\n\t * the response times of your web applications.\n\t *\n\t * In a nutshell, this is a solid replacement for using window.onload, \n\t * and attaching a function to that. By using this method, your bound Function \n\t * will be called the instant the DOM is ready to be read and manipulated, \n\t * which is exactly what 99.99% of all Javascript code needs to run.\n\t * \n\t * Please ensure you have no code in your &lt;body&gt; onload event handler, \n\t * otherwise $(document).ready() may not fire.\n\t *\n\t * You can have as many $(document).ready events on your page as you like.\n\t *\n\t * @example $(document).ready(function(){ Your code here... });\n\t *\n\t * @name ready\n\t * @type jQuery\n\t * @param Function fn The function to be executed when the DOM is ready.\n\t * @cat Events\n\t */\n\tready: function(f) {\n\t\t// If the DOM is already ready\n\t\tif ( jQuery.isReady )\n\t\t\t// Execute the function immediately\n\t\t\tf.apply( document );\n\t\t\t\n\t\t// Otherwise, remember the function for later\n\t\telse {\n\t\t\t// Add the function to the wait list\n\t\t\tjQuery.readyList.push( f );\n\t\t}\n\t\n\t\treturn this;\n\t}\n});\n\njQuery.extend({\n\t/*\n\t * All the code that makes DOM Ready work nicely.\n\t */\n\tisReady: false,\n\treadyList: [],\n\t\n\t// Handle when the DOM is ready\n\tready: function() {\n\t\t// Make sure that the DOM is not already loaded\n\t\tif ( !jQuery.isReady ) {\n\t\t\t// Remember that the DOM is ready\n\t\t\tjQuery.isReady = true;\n\t\t\t\n\t\t\t// If there are functions bound, to execute"}]},
{"id":"81b33d4ce1a047b3a46923739162c7af47d2c6b2","instances":[{"path":"./jquery-data/1.0.3/src/event/event.js","lines":[1604,1623],"code":"\t\treturn this.bind(o, handler);\n\t};\n\t\t\n};\n\n// If Mozilla is used\nif ( jQuery.browser.mozilla || jQuery.browser.opera ) {\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", jQuery.ready, false );\n\n// If IE is used, use the excellent hack by Matthias Miller\n// http://www.outofhanwell.com/blog/index.php?title=the_window_onload_problem_revisited\n} else if ( jQuery.browser.msie ) {\n\n\t// Only works if you document.write() it\n\tdocument.write(\"<scr\" + \"ipt id=__ie_init defer=true \" + \n\t\t\"src=//:><\\/script>\");\n\n\t// Use the defer script hack\n\tvar script = document.getElementById(\"__ie_init\");"},{"path":"./jquery-data/1.0.2/src/event/event.js","lines":[1606,1627],"code":"\t\t\t\treturn f.apply(this, [e]);\n\t\t\t});\n\t\t});\n\t};\n\t\t\n};\n\n// If Mozilla is used\nif ( jQuery.browser.mozilla || jQuery.browser.opera ) {\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", jQuery.ready, false );\n\n// If IE is used, use the excellent hack by Matthias Miller\n// http://www.outofhanwell.com/blog/index.php?title=the_window_onload_problem_revisited\n} else if ( jQuery.browser.msie ) {\n\n\t// Only works if you document.write() it\n\tdocument.write(\"<scr\" + \"ipt id=__ie_init defer=true \" + \n\t\t\"src=//:><\\/script>\");\n\n\t// Use the defer script hack\n\tvar script = document.getElementById(\"__ie_init\");"}]},
{"id":"a4244cbae0cbb6bfd1edef508d92c7b49f3506a3","instances":[{"path":"./jquery-data/1.0.3/src/event/event.js","lines":[1622,1663],"code":"\t\t// Use the defer script hack\n\t\tvar script = document.getElementById(\"__ie_init\");\n\t\tscript.onreadystatechange = function() {\n\t\t\tif ( this.readyState != \"complete\" ) return;\n\t\t\tthis.parentNode.removeChild( this );\n\t\t\tjQuery.ready();\n\t\t};\n\t\n\t\t// Clear from memory\n\t\tscript = null;\n\t\n\t// If Safari  is used\n\t} else if ( jQuery.browser.safari ) {\n\t\t// Continually check to see if the document.readyState is valid\n\t\tjQuery.safariTimer = setInterval(function(){\n\t\t\t// loaded and complete are both valid states\n\t\t\tif ( document.readyState == \"loaded\" || \n\t\t\t\tdocument.readyState == \"complete\" ) {\n\t\n\t\t\t\t// If either one are found, remove the timer\n\t\t\t\tclearInterval( jQuery.safariTimer );\n\t\t\t\tjQuery.safariTimer = null;\n\t\n\t\t\t\t// and execute any waiting functions\n\t\t\t\tjQuery.ready();\n\t\t\t}\n\t\t}, 10);\n\t} \n\n\t// A fallback to window.onload, that will always work\n\tjQuery.event.add( window, \"load\", jQuery.ready );\n\t\n};\n\n// Clean up after IE to avoid memory leaks\nif (jQuery.browser.msie) jQuery(window).unload(function() {\n\tvar event = jQuery.event, global = event.global;\n\tfor (var type in global) {\n \t\tvar els = global[type], i = els.length;\n\t\tif (i>0) do if (type != 'unload') event.remove(els[i-1], type); while (--i);\n\t}\n});"},{"path":"./jquery-data/1.0.2/src/event/event.js","lines":[1626,1667],"code":"\t\t// Use the defer script hack\n\t\tvar script = document.getElementById(\"__ie_init\");\n\t\tscript.onreadystatechange = function() {\n\t\t\tif ( this.readyState != \"complete\" ) return;\n\t\t\tthis.parentNode.removeChild( this );\n\t\t\tjQuery.ready();\n\t\t};\n\t\n\t\t// Clear from memory\n\t\tscript = null;\n\t\n\t// If Safari  is used\n\t} else if ( jQuery.browser.safari ) {\n\t\t// Continually check to see if the document.readyState is valid\n\t\tjQuery.safariTimer = setInterval(function(){\n\t\t\t// loaded and complete are both valid states\n\t\t\tif ( document.readyState == \"loaded\" || \n\t\t\t\tdocument.readyState == \"complete\" ) {\n\t\n\t\t\t\t// If either one are found, remove the timer\n\t\t\t\tclearInterval( jQuery.safariTimer );\n\t\t\t\tjQuery.safariTimer = null;\n\t\n\t\t\t\t// and execute any waiting functions\n\t\t\t\tjQuery.ready();\n\t\t\t}\n\t\t}, 10);\n\t} \n\n\t// A fallback to window.onload, that will always work\n\tjQuery.event.add( window, \"load\", jQuery.ready );\n\t\n};\n\n// Clean up after IE to avoid memory leaks\nif (jQuery.browser.msie) jQuery(window).unload(function() {\n\tvar event = jQuery.event, global = event.global;\n\tfor (var type in global) {\n \t\tvar els = global[type], i = els.length;\n\t\tif (i>0) do if (type != 'unload') event.remove(els[i-1], type); while (--i);\n\t}\n});"}]},
{"id":"1cfafd95f374275fc7d7dee262a8aa2ccc68b0a4","instances":[{"path":"./jquery-data/1.0.3/src/fx/fx.js","lines":[1,326],"code":"jQuery.fn.extend({\n\n\t// overwrite the old show method\n\t_show: jQuery.fn.show,\n\t\n\t/**\n\t * Show all matched elements using a graceful animation.\n\t * The height, width, and opacity of each of the matched elements \n\t * are changed dynamically according to the specified speed.\n\t *\n\t * @example $(\"p\").show(\"slow\");\n\t *\n\t * @name show\n\t * @type jQuery\n\t * @param Object speed A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @cat Effects/Animations\n\t */\n\t \n\t/**\n\t * Show all matched elements using a graceful animation and firing a callback\n\t * function after completion.\n\t * The height, width, and opacity of each of the matched elements \n\t * are changed dynamically according to the specified speed.\n\t *\n\t * @example $(\"p\").show(\"slow\",function(){\n\t *   alert(\"Animation Done.\");\n\t * });\n\t *\n\t * @name show\n\t * @type jQuery\n\t * @param Object speed A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @param Function callback A function to be executed whenever the animation completes.\n\t * @cat Effects/Animations\n\t */\n\tshow: function(speed,callback){\n\t\treturn speed ? this.animate({\n\t\t\theight: \"show\", width: \"show\", opacity: \"show\"\n\t\t}, speed, callback) : this._show();\n\t},\n\t\n\t// Overwrite the old hide method\n\t_hide: jQuery.fn.hide,\n\t\n\t/**\n\t * Hide all matched elements using a graceful animation.\n\t * The height, width, and opacity of each of the matched elements \n\t * are changed dynamically according to the specified speed.\n\t *\n\t * @example $(\"p\").hide(\"slow\");\n\t *\n\t * @name hide\n\t * @type jQuery\n\t * @param Object speed A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @cat Effects/Animations\n\t */\n\t \n\t/**\n\t * Hide all matched elements using a graceful animation and firing a callback\n\t * function after completion.\n\t * The height, width, and opacity of each of the matched elements \n\t * are changed dynamically according to the specified speed.\n\t *\n\t * @example $(\"p\").hide(\"slow\",function(){\n\t *   alert(\"Animation Done.\");\n\t * });\n\t *\n\t * @name hide\n\t * @type jQuery\n\t * @param Object speed A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @param Function callback A function to be executed whenever the animation completes.\n\t * @cat Effects/Animations\n\t */\n\thide: function(speed,callback){\n\t\treturn speed ? this.animate({\n\t\t\theight: \"hide\", width: \"hide\", opacity: \"hide\"\n\t\t}, speed, callback) : this._hide();\n\t},\n\t\n\t/**\n\t * Reveal all matched elements by adjusting their height.\n\t * Only the height is adjusted for this animation, causing all matched\n\t * elements to be revealed in a \"sliding\" manner.\n\t *\n\t * @example $(\"p\").slideDown(\"slow\");\n\t *\n\t * @name slideDown\n\t * @type jQuery\n\t * @param Object speed A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @cat Effects/Animations\n\t */\n\t \n\t/**\n\t * Reveal all matched elements by adjusting their height and firing a callback\n\t * function after completion.\n\t * Only the height is adjusted for this animation, causing all matched\n\t * elements to be revealed in a \"sliding\" manner.\n\t *\n\t * @example $(\"p\").slideDown(\"slow\",function(){\n\t *   alert(\"Animation Done.\");\n\t * });"},{"path":"./jquery-data/1.0.2/src/fx/fx.js","lines":[1,318],"code":"jQuery.fn.extend({\n\n\t// overwrite the old show method\n\t_show: jQuery.fn.show,\n\t\n\t/**\n\t * Show all matched elements using a graceful animation.\n\t * The height, width, and opacity of each of the matched elements \n\t * are changed dynamically according to the specified speed.\n\t *\n\t * @example $(\"p\").show(\"slow\");\n\t *\n\t * @name show\n\t * @type jQuery\n\t * @param Object speed A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @cat Effects/Animations\n\t */\n\t \n\t/**\n\t * Show all matched elements using a graceful animation and firing a callback\n\t * function after completion.\n\t * The height, width, and opacity of each of the matched elements \n\t * are changed dynamically according to the specified speed.\n\t *\n\t * @example $(\"p\").show(\"slow\",function(){\n\t *   alert(\"Animation Done.\");\n\t * });\n\t *\n\t * @name show\n\t * @type jQuery\n\t * @param Object speed A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @param Function callback A function to be executed whenever the animation completes.\n\t * @cat Effects/Animations\n\t */\n\tshow: function(speed,callback){\n\t\treturn speed ? this.animate({\n\t\t\theight: \"show\", width: \"show\", opacity: \"show\"\n\t\t}, speed, callback) : this._show();\n\t},\n\t\n\t// Overwrite the old hide method\n\t_hide: jQuery.fn.hide,\n\t\n\t/**\n\t * Hide all matched elements using a graceful animation.\n\t * The height, width, and opacity of each of the matched elements \n\t * are changed dynamically according to the specified speed.\n\t *\n\t * @example $(\"p\").hide(\"slow\");\n\t *\n\t * @name hide\n\t * @type jQuery\n\t * @param Object speed A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @cat Effects/Animations\n\t */\n\t \n\t/**\n\t * Hide all matched elements using a graceful animation and firing a callback\n\t * function after completion.\n\t * The height, width, and opacity of each of the matched elements \n\t * are changed dynamically according to the specified speed.\n\t *\n\t * @example $(\"p\").hide(\"slow\",function(){\n\t *   alert(\"Animation Done.\");\n\t * });\n\t *\n\t * @name hide\n\t * @type jQuery\n\t * @param Object speed A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @param Function callback A function to be executed whenever the animation completes.\n\t * @cat Effects/Animations\n\t */\n\thide: function(speed,callback){\n\t\treturn speed ? this.animate({\n\t\t\theight: \"hide\", width: \"hide\", opacity: \"hide\"\n\t\t}, speed, callback) : this._hide();\n\t},\n\t\n\t/**\n\t * Reveal all matched elements by adjusting their height.\n\t * Only the height is adjusted for this animation, causing all matched\n\t * elements to be revealed in a \"sliding\" manner.\n\t *\n\t * @example $(\"p\").slideDown(\"slow\");\n\t *\n\t * @name slideDown\n\t * @type jQuery\n\t * @param Object speed A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @cat Effects/Animations\n\t */\n\t \n\t/**\n\t * Reveal all matched elements by adjusting their height and firing a callback\n\t * function after completion.\n\t * Only the height is adjusted for this animation, causing all matched\n\t * elements to be revealed in a \"sliding\" manner.\n\t *\n\t * @example $(\"p\").slideDown(\"slow\",function(){\n\t *   alert(\"Animation Done.\");\n\t * });"}]},
{"id":"18b7bf467c84a42e65ec5ef83b21059eb8f483f6","instances":[{"path":"./jquery-data/1.0.3/src/fx/fx.js","lines":[288,377],"code":"\t/**\n\t * A function for making your own, custom, animations. The key aspect of\n\t * this function is the object of style properties that will be animated,\n\t * and to what end. Each key within the object represents a style property\n\t * that will also be animated (for example: \"height\", \"top\", or \"opacity\").\n\t *\n\t * The value associated with the key represents to what end the property\n\t * will be animated. If a number is provided as the value, then the style\n\t * property will be transitioned from its current state to that new number.\n\t * Oterwise if the string \"hide\", \"show\", or \"toggle\" is provided, a default\n\t * animation will be constructed for that property.\n\t *\n\t * @example $(\"p\").animate({\n\t *   height: 'toggle', opacity: 'toggle'\n\t * }, \"slow\");\n\t *\n\t * @example $(\"p\").animate({\n\t *   left: 50, opacity: 'show'\n\t * }, 500);\n\t *\n\t * @test stop();\n\t * var hash = {opacity: 'show'};\n\t * var hashCopy = $.extend({}, hash);\n\t * $('#foo').animate(hash, 'fast', function() {\n\t *  ok( hash.opacity == hashCopy.opacity, 'Check if animate changed the hash parameter' );\n\t *  start();\n\t * });\n\t *\n\t * @name animate\n\t * @type jQuery\n\t * @param Hash params A set of style attributes that you wish to animate, and to what end.\n\t * @param Object speed A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @param Function callback A function to be executed whenever the animation completes.\n\t * @cat Effects/Animations\n\t */\n\tanimate: function(prop,speed,callback) {\n\t\treturn this.queue(function(){\n\t\t\n\t\t\tthis.curAnim = jQuery.extend({}, prop);\n\t\t\t\n\t\t\tfor ( var p in prop ) {\n\t\t\t\tvar e = new jQuery.fx( this, jQuery.speed(speed,callback), p );\n\t\t\t\tif ( prop[p].constructor == Number )\n\t\t\t\t\te.custom( e.cur(), prop[p] );\n\t\t\t\telse\n\t\t\t\t\te[ prop[p] ]( prop );\n\t\t\t}\n\t\t\t\n\t\t});\n\t},\n\t\n\t/**\n\t *\n\t * @private\n\t */\n\tqueue: function(type,fn){\n\t\tif ( !fn ) {\n\t\t\tfn = type;\n\t\t\ttype = \"fx\";\n\t\t}\n\t\n\t\treturn this.each(function(){\n\t\t\tif ( !this.queue )\n\t\t\t\tthis.queue = {};\n\t\n\t\t\tif ( !this.queue[type] )\n\t\t\t\tthis.queue[type] = [];\n\t\n\t\t\tthis.queue[type].push( fn );\n\t\t\n\t\t\tif ( this.queue[type].length == 1 )\n\t\t\t\tfn.apply(this);\n\t\t});\n\t}\n\n});\n\njQuery.extend({\n\n\tsetAuto: function(e,p) {\n\t\tif ( e.notAuto ) return;\n\n\t\tif ( p == \"height\" && e.scrollHeight != parseInt(jQuery.curCSS(e,p)) ) return;\n\t\tif ( p == \"width\" && e.scrollWidth != parseInt(jQuery.curCSS(e,p)) ) return;\n\n\t\t// Remember the original height\n\t\tvar a = e.style[p];\n\n\t\t// Figure out the size of the height right now\n\t\tvar o = jQuery.curCSS(e,p,1);"},{"path":"./jquery-data/1.0.2/src/fx/fx.js","lines":[288,369],"code":"\t/**\n\t * A function for making your own, custom, animations. The key aspect of\n\t * this function is the object of style properties that will be animated,\n\t * and to what end. Each key within the object represents a style property\n\t * that will also be animated (for example: \"height\", \"top\", or \"opacity\").\n\t *\n\t * The value associated with the key represents to what end the property\n\t * will be animated. If a number is provided as the value, then the style\n\t * property will be transitioned from its current state to that new number.\n\t * Oterwise if the string \"hide\", \"show\", or \"toggle\" is provided, a default\n\t * animation will be constructed for that property.\n\t *\n\t * @example $(\"p\").animate({\n\t *   height: 'toggle', opacity: 'toggle'\n\t * }, \"slow\");\n\t *\n\t * @example $(\"p\").animate({\n\t *   left: 50, opacity: 'show'\n\t * }, 500);\n\t *\n\t * @name animate\n\t * @type jQuery\n\t * @param Hash params A set of style attributes that you wish to animate, and to what end.\n\t * @param Object speed A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n\t * @param Function callback A function to be executed whenever the animation completes.\n\t * @cat Effects/Animations\n\t */\n\tanimate: function(prop,speed,callback) {\n\t\treturn this.queue(function(){\n\t\t\n\t\t\tthis.curAnim = prop;\n\t\t\t\n\t\t\tfor ( var p in prop ) {\n\t\t\t\tvar e = new jQuery.fx( this, jQuery.speed(speed,callback), p );\n\t\t\t\tif ( prop[p].constructor == Number )\n\t\t\t\t\te.custom( e.cur(), prop[p] );\n\t\t\t\telse\n\t\t\t\t\te[ prop[p] ]( prop );\n\t\t\t}\n\t\t\t\n\t\t});\n\t},\n\t\n\t/**\n\t *\n\t * @private\n\t */\n\tqueue: function(type,fn){\n\t\tif ( !fn ) {\n\t\t\tfn = type;\n\t\t\ttype = \"fx\";\n\t\t}\n\t\n\t\treturn this.each(function(){\n\t\t\tif ( !this.queue )\n\t\t\t\tthis.queue = {};\n\t\n\t\t\tif ( !this.queue[type] )\n\t\t\t\tthis.queue[type] = [];\n\t\n\t\t\tthis.queue[type].push( fn );\n\t\t\n\t\t\tif ( this.queue[type].length == 1 )\n\t\t\t\tfn.apply(this);\n\t\t});\n\t}\n\n});\n\njQuery.extend({\n\n\tsetAuto: function(e,p) {\n\t\tif ( e.notAuto ) return;\n\n\t\tif ( p == \"height\" && e.scrollHeight != parseInt(jQuery.curCSS(e,p)) ) return;\n\t\tif ( p == \"width\" && e.scrollWidth != parseInt(jQuery.curCSS(e,p)) ) return;\n\n\t\t// Remember the original height\n\t\tvar a = e.style[p];\n\n\t\t// Figure out the size of the height right now\n\t\tvar o = jQuery.curCSS(e,p,1);"}]},
{"id":"ca89bf93742de29f7580cd40f89ea3d6f9775b24","instances":[{"path":"./jquery-data/1.0.3/src/fx/fx.js","lines":[385,425],"code":"\t// See what the size of \"auto\" is\n\tvar n = jQuery.curCSS(e,p,1);\n\n\t// Revert back to the original size\n\tif ( o != n && n != \"auto\" ) {\n\t\te.style[p] = a;\n\t\te.notAuto = true;\n\t}\n},\n\nspeed: function(s,o) {\n\to = o || {};\n\t\n\tif ( o.constructor == Function )\n\t\to = { complete: o };\n\t\n\tvar ss = { slow: 600, fast: 200 };\n\to.duration = (s && s.constructor == Number ? s : ss[s]) || 400;\n\n\t// Queueing\n\to.oldComplete = o.complete;\n\to.complete = function(){\n\t\tjQuery.dequeue(this, \"fx\");\n\t\tif ( o.oldComplete && o.oldComplete.constructor == Function )\n\t\t\to.oldComplete.apply( this );\n\t};\n\n\treturn o;\n},\n\nqueue: {},\n\ndequeue: function(elem,type){\n\ttype = type || \"fx\";\n\n\tif ( elem.queue && elem.queue[type] ) {\n\t\t// Remove self\n\t\telem.queue[type].shift();\n\n\t\t// Get next function\n\t\tvar f = elem.queue[type][0];"},{"path":"./jquery-data/1.0.2/src/fx/fx.js","lines":[377,417],"code":"\t// See what the size of \"auto\" is\n\tvar n = jQuery.curCSS(e,p,1);\n\n\t// Revert back to the original size\n\tif ( o != n && n != \"auto\" ) {\n\t\te.style[p] = a;\n\t\te.notAuto = true;\n\t}\n},\n\nspeed: function(s,o) {\n\to = o || {};\n\t\n\tif ( o.constructor == Function )\n\t\to = { complete: o };\n\t\n\tvar ss = { slow: 600, fast: 200 };\n\to.duration = (s && s.constructor == Number ? s : ss[s]) || 400;\n\n\t// Queueing\n\to.oldComplete = o.complete;\n\to.complete = function(){\n\t\tjQuery.dequeue(this, \"fx\");\n\t\tif ( o.oldComplete && o.oldComplete.constructor == Function )\n\t\t\to.oldComplete.apply( this );\n\t};\n\n\treturn o;\n},\n\nqueue: {},\n\ndequeue: function(elem,type){\n\ttype = type || \"fx\";\n\n\tif ( elem.queue && elem.queue[type] ) {\n\t\t// Remove self\n\t\telem.queue[type].shift();\n\n\t\t// Get next function\n\t\tvar f = elem.queue[type][0];"}]},
{"id":"a8075081d77066fd1c8f299fcc1522590fd1ba06","instances":[{"path":"./jquery-data/1.0.3/src/fx/fx.js","lines":[424,452],"code":"\t\t// Get next function\n\t\tvar f = elem.queue[type][0];\n\t\n\t\tif ( f ) f.apply( elem );\n\t}\n},\n\n/*\n * I originally wrote fx() as a clone of moo.fx and in the process\n * of making it small in size the code became illegible to sane\n * people. You've been warned.\n */\n\nfx: function( elem, options, prop ){\n\n\tvar z = this;\n\n\t// The users options\n\tz.o = {\n\t\tduration: options.duration || 400,\n\t\tcomplete: options.complete,\n\t\tstep: options.step\n\t};\n\n\t// The element\n\tz.el = elem;\n\n\t// The styles\n\tvar y = z.el.style;"},{"path":"./jquery-data/1.0.2/src/fx/fx.js","lines":[416,444],"code":"\t\t// Get next function\n\t\tvar f = elem.queue[type][0];\n\t\n\t\tif ( f ) f.apply( elem );\n\t}\n},\n\n/*\n * I originally wrote fx() as a clone of moo.fx and in the process\n * of making it small in size the code became illegible to sane\n * people. You've been warned.\n */\n\nfx: function( elem, options, prop ){\n\n\tvar z = this;\n\n\t// The users options\n\tz.o = {\n\t\tduration: options.duration || 400,\n\t\tcomplete: options.complete,\n\t\tstep: options.step\n\t};\n\n\t// The element\n\tz.el = elem;\n\n\t// The styles\n\tvar y = z.el.style;"}]},
{"id":"9af7eb420d42e9827b8ca6905cfac9ee7db7f374","instances":[{"path":"./jquery-data/1.0.3/src/fx/fx.js","lines":[451,490],"code":"// The styles\nvar y = z.el.style;\n\t\n// Simple function for setting a style value\nz.a = function(){\n\tif ( options.step )\n\t\toptions.step.apply( elem, [ z.now ] );\n \n\tif ( prop == \"opacity\" )\n\t\tjQuery.attr(y, \"opacity\", z.now); // Let attr handle opacity\n\telse if ( parseInt(z.now) ) // My hate for IE will never die\n\t\ty[prop] = parseInt(z.now) + \"px\";\n\t\t\n\ty.display = \"block\";\n};\n\t\n// Figure out the maximum number to run to\nz.max = function(){\n\treturn parseFloat( jQuery.css(z.el,prop) );\n};\n\t\n// Get the current size\nz.cur = function(){\n\tvar r = parseFloat( jQuery.curCSS(z.el, prop) );\n\treturn r && r > -10000 ? r : z.max();\n};\n\t\n// Start an animation from one number to another\nz.custom = function(from,to){\n\tz.startTime = (new Date()).getTime();\n\tz.now = from;\n\tz.a();\n\t\n\tz.timer = setInterval(function(){\n\t\tz.step(from, to);\n\t}, 13);\n};\n\t\n// Simple 'show' function\nz.show = function(){"},{"path":"./jquery-data/1.0.2/src/fx/fx.js","lines":[443,482],"code":"// The styles\nvar y = z.el.style;\n\t\n// Simple function for setting a style value\nz.a = function(){\n\tif ( options.step )\n\t\toptions.step.apply( elem, [ z.now ] );\n \n\tif ( prop == \"opacity\" )\n\t\tjQuery.attr(y, \"opacity\", z.now); // Let attr handle opacity\n\telse if ( parseInt(z.now) ) // My hate for IE will never die\n\t\ty[prop] = parseInt(z.now) + \"px\";\n\t\t\n\ty.display = \"block\";\n};\n\t\n// Figure out the maximum number to run to\nz.max = function(){\n\treturn parseFloat( jQuery.css(z.el,prop) );\n};\n\t\n// Get the current size\nz.cur = function(){\n\tvar r = parseFloat( jQuery.curCSS(z.el, prop) );\n\treturn r && r > -10000 ? r : z.max();\n};\n\t\n// Start an animation from one number to another\nz.custom = function(from,to){\n\tz.startTime = (new Date()).getTime();\n\tz.now = from;\n\tz.a();\n\t\n\tz.timer = setInterval(function(){\n\t\tz.step(from, to);\n\t}, 13);\n};\n\t\n// Simple 'show' function\nz.show = function( p ){"}]},
{"id":"25757a35e8bd7a0b3a291fbe83a06c55da1e9372","instances":[{"path":"./jquery-data/1.0.3/src/fx/fx.js","lines":[500,554],"code":"\tif ( prop != \"opacity\" )\n\t\ty[prop] = \"1px\";\n};\n\t\n// Simple 'hide' function\nz.hide = function(){\n\tif ( !z.el.orig ) z.el.orig = {};\n\n\t// Remember where we started, so that we can go back to it later\n\tz.el.orig[prop] = this.cur();\n\n\tz.o.hide = true;\n\n\t// Begin the animation\n\tz.custom(z.el.orig[prop], 0);\n};\n\t\n// Remember  the overflow of the element\nif ( !z.el.oldOverflow )\n\tz.el.oldOverflow = jQuery.css( z.el, \"overflow\" );\n\t\n// Make sure that nothing sneaks out\ny.overflow = \"hidden\";\n\t\n// Each step of an animation\nz.step = function(firstNum, lastNum){\n\tvar t = (new Date()).getTime();\n\t\n\tif (t > z.o.duration + z.startTime) {\n\t\t// Stop the timer\n\t\tclearInterval(z.timer);\n\t\tz.timer = null;\n\n\t\tz.now = lastNum;\n\t\tz.a();\n\n\t\tz.el.curAnim[ prop ] = true;\n\t\t\n\t\tvar done = true;\n\t\tfor ( var i in z.el.curAnim )\n\t\t\tif ( z.el.curAnim[i] !== true )\n\t\t\t\tdone = false;\n\t\t\t\t\n\t\tif ( done ) {\n\t\t\t// Reset the overflow\n\t\t\ty.overflow = z.el.oldOverflow;\n\t\t\n\t\t\t// Hide the element if the \"hide\" operation was done\n\t\t\tif ( z.o.hide ) \n\t\t\t\ty.display = 'none';\n\t\t\t\n\t\t\t// Reset the property, if the item has been hidden\n\t\t\tif ( z.o.hide ) {\n\t\t\t\tfor ( var p in z.el.curAnim ) {\n\t\t\t\t\tif (p == \"opacity\")"},{"path":"./jquery-data/1.0.2/src/fx/fx.js","lines":[495,549],"code":"\tif ( prop != \"opacity\" )\n\t\ty[prop] = \"1px\";\n};\n\t\n// Simple 'hide' function\nz.hide = function(){\n\tif ( !z.el.orig ) z.el.orig = {};\n\n\t// Remember where we started, so that we can go back to it later\n\tz.el.orig[prop] = this.cur();\n\n\tz.o.hide = true;\n\n\t// Begin the animation\n\tz.custom(z.el.orig[prop], 0);\n};\n\t\n// Remember  the overflow of the element\nif ( !z.el.oldOverlay )\n\tz.el.oldOverflow = jQuery.css( z.el, \"overflow\" );\n\t\n// Make sure that nothing sneaks out\ny.overflow = \"hidden\";\n\t\n// Each step of an animation\nz.step = function(firstNum, lastNum){\n\tvar t = (new Date()).getTime();\n\t\n\tif (t > z.o.duration + z.startTime) {\n\t\t// Stop the timer\n\t\tclearInterval(z.timer);\n\t\tz.timer = null;\n\n\t\tz.now = lastNum;\n\t\tz.a();\n\n\t\tz.el.curAnim[ prop ] = true;\n\t\t\n\t\tvar done = true;\n\t\tfor ( var i in z.el.curAnim )\n\t\t\tif ( z.el.curAnim[i] !== true )\n\t\t\t\tdone = false;\n\t\t\t\t\n\t\tif ( done ) {\n\t\t\t// Reset the overflow\n\t\t\ty.overflow = z.el.oldOverflow;\n\t\t\n\t\t\t// Hide the element if the \"hide\" operation was done\n\t\t\tif ( z.o.hide ) \n\t\t\t\ty.display = 'none';\n\t\t\t\n\t\t\t// Reset the property, if the item has been hidden\n\t\t\tif ( z.o.hide ) {\n\t\t\t\tfor ( var p in z.el.curAnim ) {\n\t\t\t\t\tif (p == \"opacity\" && jQuery.browser.msie)"}]},
{"id":"ea00a1d31b7d56dfbca2290e12597ef6c1bcb277","instances":[{"path":"./jquery-data/1.0.3/src/jquery/jquery.js","lines":[31,50],"code":"var jQuery = function(a,c) {\n\n\t// Shortcut for document ready (because $(document).each() is silly)\n\tif ( a && typeof a == \"function\" && jQuery.fn.ready )\n\t\treturn jQuery(document).ready(a);\n\n\t// Make sure that a selection was provided\n\ta = a || jQuery.context || document;\n\n\t// Watch for when a jQuery object is passed as the selector\n\tif ( a.jquery )\n\t\treturn jQuery( jQuery.merge( a, [] ) );\n\n\t// Watch for when a jQuery object is passed at the context\n\tif ( c && c.jquery )\n\t\treturn jQuery( c ).find(a);\n\n\t// If the context is global, return a new object\n\tif ( window == this )\n\t\treturn new jQuery(a,c);"},{"path":"./jquery-data/1.0.2/src/jquery/jquery.js","lines":[31,50],"code":"jQuery = function(a,c) {\n\n\t// Shortcut for document ready (because $(document).each() is silly)\n\tif ( a && typeof a == \"function\" && jQuery.fn.ready )\n\t\treturn jQuery(document).ready(a);\n\n\t// Make sure that a selection was provided\n\ta = a || jQuery.context || document;\n\n\t// Watch for when a jQuery object is passed as the selector\n\tif ( a.jquery )\n\t\treturn jQuery( jQuery.merge( a, [] ) );\n\n\t// Watch for when a jQuery object is passed at the context\n\tif ( c && c.jquery )\n\t\treturn jQuery( c ).find(a);\n\n\t// If the context is global, return a new object\n\tif ( window == this )\n\t\treturn new jQuery(a,c);"}]},
{"id":"55709b579ffc0a939e9097c260564bd6208711f7","instances":[{"path":"./jquery-data/1.0.3/src/jquery/jquery.js","lines":[76,688],"code":"// Map over the $ in case of overwrite\nif ( typeof $ != \"undefined\" )\n\tjQuery._$ = $;\n\n/**\n * This function accepts a string containing a CSS selector,\n * basic XPath, or raw HTML, which is then used to match a set of elements.\n * The HTML string is different from the traditional selectors in that\n * it creates the DOM elements representing that HTML string, on the fly,\n * to be (assumedly) inserted into the document later.\n *\n * The core functionality of jQuery centers around this function.\n * Everything in jQuery is based upon this, or uses this in some way.\n * The most basic use of this function is to pass in an expression\n * (usually consisting of CSS or XPath), which then finds all matching\n * elements and remembers them for later use.\n *\n * By default, $() looks for DOM elements within the context of the\n * current HTML document.\n *\n * @example $(\"div > p\")\n * @desc This finds all p elements that are children of a div element.\n * @before <p>one</p> <div><p>two</p></div> <p>three</p>\n * @result [ <p>two</p> ]\n *\n * @example $(\"<div><p>Hello</p></div>\").appendTo(\"#body\")\n * @desc Creates a div element (and all of its contents) dynamically, \n * and appends it to the element with the ID of body. Internally, an\n * element is created and it's innerHTML property set to the given markup.\n * It is therefore both quite flexible and limited. \n *\n * @name $\n * @param String expr An expression to search with, or a string of HTML to create on the fly.\n * @cat Core\n * @type jQuery\n */\n\n/**\n * This function accepts a string containing a CSS selector, or\n * basic XPath, which is then used to match a set of elements with the\n * context of the specified DOM element, or document\n *\n * @example $(\"div\", xml.responseXML)\n * @desc This finds all div elements within the specified XML document.\n *\n * @name $\n * @param String expr An expression to search with.\n * @param Element context A DOM Element, or Document, representing the base context.\n * @cat Core\n * @type jQuery\n */\n\n/**\n * Wrap jQuery functionality around a specific DOM Element.\n * This function also accepts XML Documents and Window objects\n * as valid arguments (even though they are not DOM Elements).\n *\n * @example $(document).find(\"div > p\")\n * @before <p>one</p> <div><p>two</p></div> <p>three</p>\n * @result [ <p>two</p> ]\n *\n * @example $(document.body).background( \"black\" );\n * @desc Sets the background color of the page to black.\n *\n * @name $\n * @param Element elem A DOM element to be encapsulated by a jQuery object.\n * @cat Core\n * @type jQuery\n */\n\n/**\n * Wrap jQuery functionality around a set of DOM Elements.\n *\n * @example $( myForm.elements ).hide()\n * @desc Hides all the input elements within a form\n *\n * @name $\n * @param Array<Element> elems An array of DOM elements to be encapsulated by a jQuery object.\n * @cat Core\n * @type jQuery\n */\n\n/**\n * A shorthand for $(document).ready(), allowing you to bind a function\n * to be executed when the DOM document has finished loading. This function\n * behaves just like $(document).ready(), in that it should be used to wrap\n * all of the other $() operations on your page. While this function is,\n * technically, chainable - there really isn't much use for chaining against it.\n * You can have as many $(document).ready events on your page as you like.\n *\n * @example $(function(){\n *   // Document is ready\n * });\n * @desc Executes the function when the DOM is ready to be used.\n *\n * @name $\n * @param Function fn The function to execute when the DOM is ready.\n * @cat Core\n * @type jQuery\n */"},{"path":"./jquery-data/1.0.2/src/jquery/jquery.js","lines":[72,653],"code":"// Map over the $ in case of overwrite\nif ( typeof $ != \"undefined\" )\n\tjQuery._$ = $;\n\n/**\n * This function accepts a string containing a CSS selector,\n * basic XPath, or raw HTML, which is then used to match a set of elements.\n * The HTML string is different from the traditional selectors in that\n * it creates the DOM elements representing that HTML string, on the fly,\n * to be (assumedly) inserted into the document later.\n *\n * The core functionality of jQuery centers around this function.\n * Everything in jQuery is based upon this, or uses this in some way.\n * The most basic use of this function is to pass in an expression\n * (usually consisting of CSS or XPath), which then finds all matching\n * elements and remembers them for later use.\n *\n * By default, $() looks for DOM elements within the context of the\n * current HTML document.\n *\n * @example $(\"div > p\")\n * @desc This finds all p elements that are children of a div element.\n * @before <p>one</p> <div><p>two</p></div> <p>three</p>\n * @result [ <p>two</p> ]\n *\n * @example $(\"<div><p>Hello</p></div>\").appendTo(\"#body\")\n * @desc Creates a div element (and all of its contents) dynamically, \n * and appends it to the element with the ID of body. Internally, an\n * element is created and it's innerHTML property set to the given markup.\n * It is therefore both quite flexible and limited. \n *\n * @name $\n * @param String expr An expression to search with, or a string of HTML to create on the fly.\n * @cat Core\n * @type jQuery\n */\n\n/**\n * This function accepts a string containing a CSS selector, or\n * basic XPath, which is then used to match a set of elements with the\n * context of the specified DOM element, or document\n *\n * @example $(\"div\", xml.responseXML)\n * @desc This finds all div elements within the specified XML document.\n *\n * @name $\n * @param String expr An expression to search with.\n * @param Element context A DOM Element, or Document, representing the base context.\n * @cat Core\n * @type jQuery\n */\n\n/**\n * Wrap jQuery functionality around a specific DOM Element.\n * This function also accepts XML Documents and Window objects\n * as valid arguments (even though they are not DOM Elements).\n *\n * @example $(document).find(\"div > p\")\n * @before <p>one</p> <div><p>two</p></div> <p>three</p>\n * @result [ <p>two</p> ]\n *\n * @example $(document.body).background( \"black\" );\n * @desc Sets the background color of the page to black.\n *\n * @name $\n * @param Element elem A DOM element to be encapsulated by a jQuery object.\n * @cat Core\n * @type jQuery\n */\n\n/**\n * Wrap jQuery functionality around a set of DOM Elements.\n *\n * @example $( myForm.elements ).hide()\n * @desc Hides all the input elements within a form\n *\n * @name $\n * @param Array<Element> elems An array of DOM elements to be encapsulated by a jQuery object.\n * @cat Core\n * @type jQuery\n */\n\n/**\n * A shorthand for $(document).ready(), allowing you to bind a function\n * to be executed when the DOM document has finished loading. This function\n * behaves just like $(document).ready(), in that it should be used to wrap\n * all of the other $() operations on your page. While this function is,\n * technically, chainable - there really isn't much use for chaining against it.\n * You can have as many $(document).ready events on your page as you like.\n *\n * @example $(function(){\n *   // Document is ready\n * });\n * @desc Executes the function when the DOM is ready to be used.\n *\n * @name $\n * @param Function fn The function to execute when the DOM is ready.\n * @cat Core\n * @type jQuery\n */"}]},
{"id":"910a924fa7c6666026cd3c6766a30374b546068d","instances":[{"path":"./jquery-data/1.0.3/src/jquery/jquery.js","lines":[618,1057],"code":"/**\n * Wrap all matched elements with a structure of other elements.\n * This wrapping process is most useful for injecting additional\n * stucture into a document, without ruining the original semantic\n * qualities of a document.\n *\n * This works by going through the first element\n * provided (which is generated, on the fly, from the provided HTML)\n * and finds the deepest ancestor element within its\n * structure - it is that element that will en-wrap everything else.\n *\n * This does not work with elements that contain text. Any necessary text\n * must be added after the wrapping is done.\n *\n * @example $(\"p\").wrap(\"<div class='wrap'></div>\");\n * @before <p>Test Paragraph.</p>\n * @result <div class='wrap'><p>Test Paragraph.</p></div>\n * \n * @test var defaultText = 'Try them out:'\n * var result = $('#first').wrap('<div class=\"red\"><span></span></div>').text();\n * ok( defaultText == result, 'Check for wrapping of on-the-fly html' );\n * ok( $('#first').parent().parent().is('.red'), 'Check if wrapper has class \"red\"' );\n *\n * @name wrap\n * @type jQuery\n * @param String html A string of HTML, that will be created on the fly and wrapped around the target.\n * @cat DOM/Manipulation\n */\n\n/**\n * Wrap all matched elements with a structure of other elements.\n * This wrapping process is most useful for injecting additional\n * stucture into a document, without ruining the original semantic\n * qualities of a document.\n *\n * This works by going through the first element\n * provided and finding the deepest ancestor element within its\n * structure - it is that element that will en-wrap everything else.\n *\n\t * This does not work with elements that contain text. Any necessary text\n * must be added after the wrapping is done.\n *\n * @example $(\"p\").wrap( document.getElementById('content') );\n * @before <p>Test Paragraph.</p><div id=\"content\"></div>\n * @result <div id=\"content\"><p>Test Paragraph.</p></div>\n *\n * @test var defaultText = 'Try them out:'\n * var result = $('#first').wrap(document.getElementById('empty')).parent();\n * ok( result.is('ol'), 'Check for element wrapping' );\n * ok( result.text() == defaultText, 'Check for element wrapping' );\n *\n * @name wrap\n * @type jQuery\n * @param Element elem A DOM element that will be wrapped.\n * @cat DOM/Manipulation\n */\nwrap: function() {\n\t// The elements to wrap the target around\n\tvar a = jQuery.clean(arguments);\n\n\t// Wrap each of the matched elements individually\n\treturn this.each(function(){\n\t\t// Clone the structure that we're using to wrap\n\t\tvar b = a[0].cloneNode(true);\n\n\t\t// Insert it before the element to be wrapped\n\t\tthis.parentNode.insertBefore( b, this );\n\n\t\t// Find the deepest point in the wrap structure\n\t\twhile ( b.firstChild )\n\t\t\tb = b.firstChild;\n\n\t\t// Move the matched element to within the wrap structure\n\t\tb.appendChild( this );\n\t});\n},\n\n/**\n * Append any number of elements to the inside of every matched elements,\n * generated from the provided HTML.\n * This operation is similar to doing an appendChild to all the\n * specified elements, adding them into the document.\n *\n * @example $(\"p\").append(\"<b>Hello</b>\");\n * @before <p>I would like to say: </p>\n * @result <p>I would like to say: <b>Hello</b></p>\n *\n * @test var defaultText = 'Try them out:'\n * var result = $('#first').append('<b>buga</b>');\n * ok( result.text() == defaultText + 'buga', 'Check if text appending works' );\n * ok( $('#select3').append('<option value=\"appendTest\">Append Test</option>').find('option:last-child').attr('value') == 'appendTest', 'Appending html options to select element');\n *\n * @name append\n * @type jQuery\n * @param String html A string of HTML, that will be created on the fly and appended to the target.\n * @cat DOM/Manipulation\n */\n\n/**\n * Append an element to the inside of all matched elements."},{"path":"./jquery-data/1.0.2/src/jquery/jquery.js","lines":[583,1020],"code":"/**\n * Wrap all matched elements with a structure of other elements.\n * This wrapping process is most useful for injecting additional\n * stucture into a document, without ruining the original semantic\n * qualities of a document.\n *\n * This works by going through the first element\n * provided (which is generated, on the fly, from the provided HTML)\n * and finds the deepest ancestor element within its\n * structure - it is that element that will en-wrap everything else.\n *\n * This does not work with elements that contain text. Any necessary text\n * must be added after the wrapping is done.\n *\n * @example $(\"p\").wrap(\"<div class='wrap'></div>\");\n * @before <p>Test Paragraph.</p>\n * @result <div class='wrap'><p>Test Paragraph.</p></div>\n * \n * @test var defaultText = 'Try them out:'\n * var result = $('#first').wrap('<div class=\"red\"><span></span></div>').text();\n * ok( defaultText == result, 'Check for wrapping of on-the-fly html' );\n * ok( $('#first').parent().parent().is('.red'), 'Check if wrapper has class \"red\"' );\n *\n * @name wrap\n * @type jQuery\n * @param String html A string of HTML, that will be created on the fly and wrapped around the target.\n * @cat DOM/Manipulation\n */\n\n/**\n * Wrap all matched elements with a structure of other elements.\n * This wrapping process is most useful for injecting additional\n * stucture into a document, without ruining the original semantic\n * qualities of a document.\n *\n * This works by going through the first element\n * provided and finding the deepest ancestor element within its\n * structure - it is that element that will en-wrap everything else.\n *\n\t * This does not work with elements that contain text. Any necessary text\n * must be added after the wrapping is done.\n *\n * @example $(\"p\").wrap( document.getElementById('content') );\n * @before <p>Test Paragraph.</p><div id=\"content\"></div>\n * @result <div id=\"content\"><p>Test Paragraph.</p></div>\n *\n * @test var defaultText = 'Try them out:'\n * var result = $('#first').wrap(document.getElementById('empty')).parent();\n * ok( result.is('ol'), 'Check for element wrapping' );\n * ok( result.text() == defaultText, 'Check for element wrapping' );\n *\n * @name wrap\n * @type jQuery\n * @param Element elem A DOM element that will be wrapped.\n * @cat DOM/Manipulation\n */\nwrap: function() {\n\t// The elements to wrap the target around\n\tvar a = jQuery.clean(arguments);\n\n\t// Wrap each of the matched elements individually\n\treturn this.each(function(){\n\t\t// Clone the structure that we're using to wrap\n\t\tvar b = a[0].cloneNode(true);\n\n\t\t// Insert it before the element to be wrapped\n\t\tthis.parentNode.insertBefore( b, this );\n\n\t\t// Find the deepest point in the wrap structure\n\t\twhile ( b.firstChild )\n\t\t\tb = b.firstChild;\n\n\t\t// Move the matched element to within the wrap structure\n\t\tb.appendChild( this );\n\t});\n},\n\n/**\n * Append any number of elements to the inside of every matched elements,\n * generated from the provided HTML.\n * This operation is similar to doing an appendChild to all the\n * specified elements, adding them into the document.\n *\n * @example $(\"p\").append(\"<b>Hello</b>\");\n * @before <p>I would like to say: </p>\n * @result <p>I would like to say: <b>Hello</b></p>\n *\n * @test var defaultText = 'Try them out:'\n * var result = $('#first').append('<b>buga</b>');\n * ok( result.text() == defaultText + 'buga', 'Check if text appending works' );\n *\n * @name append\n * @type jQuery\n * @param String html A string of HTML, that will be created on the fly and appended to the target.\n * @cat DOM/Manipulation\n */\n\n/**\n * Append an element to the inside of all matched elements.\n * This operation is similar to doing an appendChild to all the"}]},
{"id":"7095cc8de611d595557b0198a9a746e4dd3ddaad","instances":[{"path":"./jquery-data/1.0.3/src/jquery/jquery.js","lines":[1007,1323],"code":"\t/**\n\t * Removes all elements from the set of matched elements that do not\n\t * match the specified expression. This method is used to narrow down\n\t * the results of a search.\n\t *\n\t * All searching is done using a jQuery expression. The expression\n\t * can be written using CSS 1-3 Selector syntax, or basic XPath.\n\t *\n\t * @example $(\"p\").filter(\".selected\")\n\t * @before <p class=\"selected\">Hello</p><p>How are you?</p>\n\t * @result $(\"p\").filter(\".selected\") == [ <p class=\"selected\">Hello</p> ]\n\t *\n\t * @test isSet( $(\"input\").filter(\":checked\").get(), q(\"radio2\", \"check1\"), \"Filter elements\" );\n\t * @test $(\"input\").filter(\":checked\",function(i){ \n\t *   ok( this == q(\"radio2\", \"check1\")[i], \"Filter elements, context\" );\n\t * });\n\t * @test $(\"#main > p#ap > a\").filter(\"#foobar\",function(){},function(i){\n\t *   ok( this == q(\"google\",\"groups\", \"mark\")[i], \"Filter elements, else context\" );\n\t * });\n\t *\n\t * @name filter\n\t * @type jQuery\n\t * @param String expr An expression to search with.\n\t * @cat DOM/Traversing\n\t */\n\n\t/**\n\t * Removes all elements from the set of matched elements that do not\n\t * match at least one of the expressions passed to the function. This\n\t * method is used when you want to filter the set of matched elements\n\t * through more than one expression.\n\t *\n\t * Elements will be retained in the jQuery object if they match at\n\t * least one of the expressions passed.\n\t *\n\t * @example $(\"p\").filter([\".selected\", \":first\"])\n\t * @before <p>Hello</p><p>Hello Again</p><p class=\"selected\">And Again</p>\n\t * @result $(\"p\").filter([\".selected\", \":first\"]) == [ <p>Hello</p>, <p class=\"selected\">And Again</p> ]\n\t *\n\t * @name filter\n\t * @type jQuery\n\t * @param Array<String> exprs A set of expressions to evaluate against\n\t * @cat DOM/Traversing\n\t */\n\tfilter: function(t) {\n\t\treturn this.pushStack(\n\t\t\tt.constructor == Array &&\n\t\t\tjQuery.map(this,function(a){\n\t\t\t\tfor ( var i = 0; i < t.length; i++ )\n\t\t\t\t\tif ( jQuery.filter(t[i],[a]).r.length )\n\t\t\t\t\t\treturn a;\n\t\t\t\treturn false;\n\t\t\t}) ||\n\n\t\t\tt.constructor == Boolean &&\n\t\t\t( t ? this.get() : [] ) ||\n\n\t\t\ttypeof t == \"function\" &&\n\t\t\tjQuery.grep( this, t ) ||\n\n\t\t\tjQuery.filter(t,this).r, arguments );\n\t},\n\n\t/**\n\t * Removes the specified Element from the set of matched elements. This\n\t * method is used to remove a single Element from a jQuery object.\n\t *\n\t * @example $(\"p\").not( document.getElementById(\"selected\") )\n\t * @before <p>Hello</p><p id=\"selected\">Hello Again</p>\n\t * @result [ <p>Hello</p> ]\n\t *\n\t * @name not\n\t * @type jQuery\n\t * @param Element el An element to remove from the set\n\t * @cat DOM/Traversing\n\t */\n\n\t/**\n\t * Removes elements matching the specified expression from the set\n\t * of matched elements. This method is used to remove one or more\n\t * elements from a jQuery object.\n\t *\n\t * @example $(\"p\").not(\"#selected\")\n\t * @before <p>Hello</p><p id=\"selected\">Hello Again</p>\n\t * @result [ <p>Hello</p> ]\n\t *\n\t * @test ok($(\"#main > p#ap > a\").not(\"#google\").length == 2, \".not\")\n\t *\n\t * @name not\n\t * @type jQuery\n\t * @param String expr An expression with which to remove matching elements\n\t * @cat DOM/Traversing\n\t */\n\tnot: function(t) {\n\t\treturn this.pushStack( t.constructor == String ?\n\t\t\tjQuery.filter(t,this,false).r :\n\t\t\tjQuery.grep(this,function(a){ return a != t; }), arguments );\n\t},\n\n\t/**"},{"path":"./jquery-data/1.0.2/src/jquery/jquery.js","lines":[970,1284],"code":"\t/**\n\t * Removes all elements from the set of matched elements that do not\n\t * match the specified expression. This method is used to narrow down\n\t * the results of a search.\n\t *\n\t * All searching is done using a jQuery expression. The expression\n\t * can be written using CSS 1-3 Selector syntax, or basic XPath.\n\t *\n\t * @example $(\"p\").filter(\".selected\")\n\t * @before <p class=\"selected\">Hello</p><p>How are you?</p>\n\t * @result $(\"p\").filter(\".selected\") == [ <p class=\"selected\">Hello</p> ]\n\t *\n\t * @test isSet( $(\"input\").filter(\":checked\").get(), q(\"radio2\", \"check1\"), \"Filter elements\" );\n\t * @test $(\"input\").filter(\":checked\",function(i){ \n\t *   ok( this == q(\"radio2\", \"check1\")[i], \"Filter elements, context\" );\n\t * });\n\t * @test $(\"#main > p#ap > a\").filter(\"#foobar\",function(){},function(i){\n\t *   ok( this == q(\"google\",\"groups\", \"mark\")[i], \"Filter elements, else context\" );\n\t * });\n\t *\n\t * @name filter\n\t * @type jQuery\n\t * @param String expr An expression to search with.\n\t * @cat DOM/Traversing\n\t */\n\n\t/**\n\t * Removes all elements from the set of matched elements that do not\n\t * match at least one of the expressions passed to the function. This\n\t * method is used when you want to filter the set of matched elements\n\t * through more than one expression.\n\t *\n\t * Elements will be retained in the jQuery object if they match at\n\t * least one of the expressions passed.\n\t *\n\t * @example $(\"p\").filter([\".selected\", \":first\"])\n\t * @before <p>Hello</p><p>Hello Again</p><p class=\"selected\">And Again</p>\n\t * @result $(\"p\").filter([\".selected\", \":first\"]) == [ <p>Hello</p>, <p class=\"selected\">And Again</p> ]\n\t *\n\t * @name filter\n\t * @type jQuery\n\t * @param Array<String> exprs A set of expressions to evaluate against\n\t * @cat DOM/Traversing\n\t */\n\tfilter: function(t) {\n\t\treturn this.pushStack(\n\t\t\tt.constructor == Array &&\n\t\t\tjQuery.map(this,function(a){\n\t\t\t\tfor ( var i = 0; i < t.length; i++ )\n\t\t\t\t\tif ( jQuery.filter(t[i],[a]).r.length )\n\t\t\t\t\t\treturn a;\n\t\t\t}) ||\n\n\t\t\tt.constructor == Boolean &&\n\t\t\t( t ? this.get() : [] ) ||\n\n\t\t\ttypeof t == \"function\" &&\n\t\t\tjQuery.grep( this, t ) ||\n\n\t\t\tjQuery.filter(t,this).r, arguments );\n\t},\n\n\t/**\n\t * Removes the specified Element from the set of matched elements. This\n\t * method is used to remove a single Element from a jQuery object.\n\t *\n\t * @example $(\"p\").not( document.getElementById(\"selected\") )\n\t * @before <p>Hello</p><p id=\"selected\">Hello Again</p>\n\t * @result [ <p>Hello</p> ]\n\t *\n\t * @name not\n\t * @type jQuery\n\t * @param Element el An element to remove from the set\n\t * @cat DOM/Traversing\n\t */\n\n\t/**\n\t * Removes elements matching the specified expression from the set\n\t * of matched elements. This method is used to remove one or more\n\t * elements from a jQuery object.\n\t *\n\t * @example $(\"p\").not(\"#selected\")\n\t * @before <p>Hello</p><p id=\"selected\">Hello Again</p>\n\t * @result [ <p>Hello</p> ]\n\t *\n\t * @test ok($(\"#main > p#ap > a\").not(\"#google\").length == 2, \".not\")\n\t *\n\t * @name not\n\t * @type jQuery\n\t * @param String expr An expression with which to remove matching elements\n\t * @cat DOM/Traversing\n\t */\n\tnot: function(t) {\n\t\treturn this.pushStack( t.constructor == String ?\n\t\t\tjQuery.filter(t,this,false).r :\n\t\t\tjQuery.grep(this,function(a){ return a != t; }), arguments );\n\t},\n\n\t/**\n\t * Adds the elements matched by the expression to the jQuery object. This"}]},
{"id":"48c221a50e5173b4114e97381ee497f07dc2cb1c","instances":[{"path":"./jquery-data/1.0.3/src/jquery/jquery.js","lines":[1333,1423],"code":"\treturn obj;\n};\n\njQuery.extend({\n\t/**\n\t * @private\n\t * @name init\n\t * @type undefined\n\t * @cat Core\n\t */\n\tinit: function(){\n\t\tjQuery.initDone = true;\n\n\t\tjQuery.each( jQuery.macros.axis, function(i,n){\n\t\t\tjQuery.fn[ i ] = function(a) {\n\t\t\t\tvar ret = jQuery.map(this,n);\n\t\t\t\tif ( a && a.constructor == String )\n\t\t\t\t\tret = jQuery.filter(a,ret).r;\n\t\t\t\treturn this.pushStack( ret, arguments );\n\t\t\t};\n\t\t});\n\n\t\tjQuery.each( jQuery.macros.to, function(i,n){\n\t\t\tjQuery.fn[ i ] = function(){\n\t\t\t\tvar a = arguments;\n\t\t\t\treturn this.each(function(){\n\t\t\t\t\tfor ( var j = 0; j < a.length; j++ )\n\t\t\t\t\t\tjQuery(a[j])[n]( this );\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\n\t\tjQuery.each( jQuery.macros.each, function(i,n){\n\t\t\tjQuery.fn[ i ] = function() {\n\t\t\t\treturn this.each( n, arguments );\n\t\t\t};\n\t\t});\n\n\t\tjQuery.each( jQuery.macros.filter, function(i,n){\n\t\t\tjQuery.fn[ n ] = function(num,fn) {\n\t\t\t\treturn this.filter( \":\" + n + \"(\" + num + \")\", fn );\n\t\t\t};\n\t\t});\n\n\t\tjQuery.each( jQuery.macros.attr, function(i,n){\n\t\t\tn = n || i;\n\t\t\tjQuery.fn[ i ] = function(h) {\n\t\t\t\treturn h == undefined ?\n\t\t\t\t\tthis.length ? this[0][n] : null :\n\t\t\t\t\tthis.attr( n, h );\n\t\t\t};\n\t\t});\n\n\t\tjQuery.each( jQuery.macros.css, function(i,n){\n\t\t\tjQuery.fn[ n ] = function(h) {\n\t\t\t\treturn h == undefined ?\n\t\t\t\t\t( this.length ? jQuery.css( this[0], n ) : null ) :\n\t\t\t\t\tthis.css( n, h );\n\t\t\t};\n\t\t});\n\n\t},\n\n\t/**\n\t * A generic iterator function, which can be used to seemlessly\n\t * iterate over both objects and arrays. This function is not the same\n\t * as $().each() - which is used to iterate, exclusively, over a jQuery\n\t * object. This function can be used to iterate over anything.\n\t *\n\t * @example $.each( [0,1,2], function(i){\n\t *   alert( \"Item #\" + i + \": \" + this );\n\t * });\n\t * @desc This is an example of iterating over the items in an array, accessing both the current item and its index.\n\t *\n\t * @example $.each( { name: \"John\", lang: \"JS\" }, function(i){\n\t *   alert( \"Name: \" + i + \", Value: \" + this );\n\t * });\n\t * @desc This is an example of iterating over the properties in an Object, accessing both the current item and its key.\n\t *\n\t * @name $.each\n\t * @param Object obj The object, or array, to iterate over.\n\t * @param Function fn The function that will be executed on every object.\n\t * @type Object\n\t * @cat Javascript\n\t */\n\teach: function( obj, fn, args ) {\n\t\tif ( obj.length == undefined )\n\t\t\tfor ( var i in obj )\n\t\t\t\tfn.apply( obj[i], args || [i, obj[i]] );\n\t\telse\n\t\t\tfor ( var i = 0; i < obj.length; i++ )"},{"path":"./jquery-data/1.0.2/src/jquery/jquery.js","lines":[1286,1376],"code":"\treturn obj;\n};\n\njQuery.extend({\n\t/**\n\t * @private\n\t * @name init\n\t * @type undefined\n\t * @cat Core\n\t */\n\tinit: function(){\n\t\tjQuery.initDone = true;\n\n\t\tjQuery.each( jQuery.macros.axis, function(i,n){\n\t\t\tjQuery.fn[ i ] = function(a) {\n\t\t\t\tvar ret = jQuery.map(this,n);\n\t\t\t\tif ( a && a.constructor == String )\n\t\t\t\t\tret = jQuery.filter(a,ret).r;\n\t\t\t\treturn this.pushStack( ret, arguments );\n\t\t\t};\n\t\t});\n\n\t\tjQuery.each( jQuery.macros.to, function(i,n){\n\t\t\tjQuery.fn[ i ] = function(){\n\t\t\t\tvar a = arguments;\n\t\t\t\treturn this.each(function(){\n\t\t\t\t\tfor ( var j = 0; j < a.length; j++ )\n\t\t\t\t\t\tjQuery(a[j])[n]( this );\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\n\t\tjQuery.each( jQuery.macros.each, function(i,n){\n\t\t\tjQuery.fn[ i ] = function() {\n\t\t\t\treturn this.each( n, arguments );\n\t\t\t};\n\t\t});\n\n\t\tjQuery.each( jQuery.macros.filter, function(i,n){\n\t\t\tjQuery.fn[ n ] = function(num,fn) {\n\t\t\t\treturn this.filter( \":\" + n + \"(\" + num + \")\", fn );\n\t\t\t};\n\t\t});\n\n\t\tjQuery.each( jQuery.macros.attr, function(i,n){\n\t\t\tn = n || i;\n\t\t\tjQuery.fn[ i ] = function(h) {\n\t\t\t\treturn h == undefined ?\n\t\t\t\t\tthis.length ? this[0][n] : null :\n\t\t\t\t\tthis.attr( n, h );\n\t\t\t};\n\t\t});\n\n\t\tjQuery.each( jQuery.macros.css, function(i,n){\n\t\t\tjQuery.fn[ n ] = function(h) {\n\t\t\t\treturn h == undefined ?\n\t\t\t\t\t( this.length ? jQuery.css( this[0], n ) : null ) :\n\t\t\t\t\tthis.css( n, h );\n\t\t\t};\n\t\t});\n\n\t},\n\n\t/**\n\t * A generic iterator function, which can be used to seemlessly\n\t * iterate over both objects and arrays. This function is not the same\n\t * as $().each() - which is used to iterate, exclusively, over a jQuery\n\t * object. This function can be used to iterate over anything.\n\t *\n\t * @example $.each( [0,1,2], function(i){\n\t *   alert( \"Item #\" + i + \": \" + this );\n\t * });\n\t * @desc This is an example of iterating over the items in an array, accessing both the current item and its index.\n\t *\n\t * @example $.each( { name: \"John\", lang: \"JS\" }, function(i){\n\t *   alert( \"Name: \" + i + \", Value: \" + this );\n\t * });\n\t * @desc This is an example of iterating over the properties in an Object, accessing both the current item and its key.\n\t *\n\t * @name $.each\n\t * @param Object obj The object, or array, to iterate over.\n\t * @param Function fn The function that will be executed on every object.\n\t * @type Object\n\t * @cat Javascript\n\t */\n\teach: function( obj, fn, args ) {\n\t\tif ( obj.length == undefined )\n\t\t\tfor ( var i in obj )\n\t\t\t\tfn.apply( obj[i], args || [i, obj[i]] );\n\t\telse\n\t\t\tfor ( var i = 0; i < obj.length; i++ )"}]},
{"id":"b16cc6324e4222dc4e7f2824c2a206221304b912","instances":[{"path":"./jquery-data/1.0.3/src/jquery/jquery.js","lines":[1396,1482],"code":"/**\n * A generic iterator function, which can be used to seemlessly\n * iterate over both objects and arrays. This function is not the same\n * as $().each() - which is used to iterate, exclusively, over a jQuery\n * object. This function can be used to iterate over anything.\n *\n * @example $.each( [0,1,2], function(i){\n *   alert( \"Item #\" + i + \": \" + this );\n * });\n * @desc This is an example of iterating over the items in an array, accessing both the current item and its index.\n *\n * @example $.each( { name: \"John\", lang: \"JS\" }, function(i){\n *   alert( \"Name: \" + i + \", Value: \" + this );\n * });\n * @desc This is an example of iterating over the properties in an Object, accessing both the current item and its key.\n *\n * @name $.each\n * @param Object obj The object, or array, to iterate over.\n * @param Function fn The function that will be executed on every object.\n * @type Object\n * @cat Javascript\n */\neach: function( obj, fn, args ) {\n\tif ( obj.length == undefined )\n\t\tfor ( var i in obj )\n\t\t\tfn.apply( obj[i], args || [i, obj[i]] );\n\telse\n\t\tfor ( var i = 0; i < obj.length; i++ )\n\t\t\tif ( fn.apply( obj[i], args || [i, obj[i]] ) === false ) break;\n\treturn obj;\n},\n\nclassName: {\n\tadd: function(o,c){\n\t\tif (jQuery.className.has(o,c)) return;\n\t\to.className += ( o.className ? \" \" : \"\" ) + c;\n\t},\n\tremove: function(o,c){\n\t\tif( !c ) {\n\t\t\to.className = \"\";\n\t\t} else {\n\t\t\tvar classes = o.className.split(\" \");\n\t\t\tfor(var i=0; i<classes.length; i++) {\n\t\t\t\tif(classes[i] == c) {\n\t\t\t\t\tclasses.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\to.className = classes.join(' ');\n\t\t}\n\t},\n\thas: function(e,a) {\n\t\tif ( e.className != undefined )\n\t\t\te = e.className;\n\t\treturn new RegExp(\"(^|\\\\s)\" + a + \"(\\\\s|$)\").test(e);\n\t}\n},\n\n/**\n * Swap in/out style options.\n * @private\n */\nswap: function(e,o,f) {\n\tfor ( var i in o ) {\n\t\te.style[\"old\"+i] = e.style[i];\n\t\te.style[i] = o[i];\n\t}\n\tf.apply( e, [] );\n\tfor ( var i in o )\n\t\te.style[i] = e.style[\"old\"+i];\n},\n\ncss: function(e,p) {\n\tif ( p == \"height\" || p == \"width\" ) {\n\t\tvar old = {}, oHeight, oWidth, d = [\"Top\",\"Bottom\",\"Right\",\"Left\"];\n\n\t\tfor ( var i in d ) {\n\t\t\told[\"padding\" + d[i]] = 0;\n\t\t\told[\"border\" + d[i] + \"Width\"] = 0;\n\t\t}\n\n\t\tjQuery.swap( e, old, function() {\n\t\t\tif (jQuery.css(e,\"display\") != \"none\") {\n\t\t\t\toHeight = e.offsetHeight;\n\t\t\t\toWidth = e.offsetWidth;\n\t\t\t} else {\n\t\t\t\te = jQuery(e.cloneNode(true))"},{"path":"./jquery-data/1.0.2/src/jquery/jquery.js","lines":[1349,1435],"code":"/**\n * A generic iterator function, which can be used to seemlessly\n * iterate over both objects and arrays. This function is not the same\n * as $().each() - which is used to iterate, exclusively, over a jQuery\n * object. This function can be used to iterate over anything.\n *\n * @example $.each( [0,1,2], function(i){\n *   alert( \"Item #\" + i + \": \" + this );\n * });\n * @desc This is an example of iterating over the items in an array, accessing both the current item and its index.\n *\n * @example $.each( { name: \"John\", lang: \"JS\" }, function(i){\n *   alert( \"Name: \" + i + \", Value: \" + this );\n * });\n * @desc This is an example of iterating over the properties in an Object, accessing both the current item and its key.\n *\n * @name $.each\n * @param Object obj The object, or array, to iterate over.\n * @param Function fn The function that will be executed on every object.\n * @type Object\n * @cat Javascript\n */\neach: function( obj, fn, args ) {\n\tif ( obj.length == undefined )\n\t\tfor ( var i in obj )\n\t\t\tfn.apply( obj[i], args || [i, obj[i]] );\n\telse\n\t\tfor ( var i = 0; i < obj.length; i++ )\n\t\t\tfn.apply( obj[i], args || [i, obj[i]] );\n\treturn obj;\n},\n\nclassName: {\n\tadd: function(o,c){\n\t\tif (jQuery.className.has(o,c)) return;\n\t\to.className += ( o.className ? \" \" : \"\" ) + c;\n\t},\n\tremove: function(o,c){\n\t\tif( !c ) {\n\t\t\to.className = \"\";\n\t\t} else {\n\t\t\tvar classes = o.className.split(\" \");\n\t\t\tfor(var i=0; i<classes.length; i++) {\n\t\t\t\tif(classes[i] == c) {\n\t\t\t\t\tclasses.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\to.className = classes.join(' ');\n\t\t}\n\t},\n\thas: function(e,a) {\n\t\tif ( e.className != undefined )\n\t\t\te = e.className;\n\t\treturn new RegExp(\"(^|\\\\s)\" + a + \"(\\\\s|$)\").test(e);\n\t}\n},\n\n/**\n * Swap in/out style options.\n * @private\n */\nswap: function(e,o,f) {\n\tfor ( var i in o ) {\n\t\te.style[\"old\"+i] = e.style[i];\n\t\te.style[i] = o[i];\n\t}\n\tf.apply( e, [] );\n\tfor ( var i in o )\n\t\te.style[i] = e.style[\"old\"+i];\n},\n\ncss: function(e,p) {\n\tif ( p == \"height\" || p == \"width\" ) {\n\t\tvar old = {}, oHeight, oWidth, d = [\"Top\",\"Bottom\",\"Right\",\"Left\"];\n\n\t\tfor ( var i in d ) {\n\t\t\told[\"padding\" + d[i]] = 0;\n\t\t\told[\"border\" + d[i] + \"Width\"] = 0;\n\t\t}\n\n\t\tjQuery.swap( e, old, function() {\n\t\t\tif (jQuery.css(e,\"display\") != \"none\") {\n\t\t\t\toHeight = e.offsetHeight;\n\t\t\t\toWidth = e.offsetWidth;\n\t\t\t} else {\n\t\t\t\te = jQuery(e.cloneNode(true)).css({"}]},
{"id":"139871689952ecea50c8b8a5ef5e2c0e4155b7b6","instances":[{"path":"./jquery-data/1.0.3/src/jquery/jquery.js","lines":[1515,1526],"code":"    prop = jQuery.browser.msie ? \"styleFloat\" : \"cssFloat\";\n\nif (!force && elem.style[prop]) {\n\n\tret = elem.style[prop];\n\n} else if (elem.currentStyle) {\n\n\tvar newProp = prop.replace(/\\-(\\w)/g,function(m,c){return c.toUpperCase();});\n\tret = elem.currentStyle[prop] || elem.currentStyle[newProp];\n\n} else if (document.defaultView && document.defaultView.getComputedStyle) {"},{"path":"./jquery-data/1.0.2/src/jquery/jquery.js","lines":[1463,1474],"code":"\treturn jQuery.attr(elem.style, 'opacity');\n\nif (!force && elem.style[prop]) {\n\n\tret = elem.style[prop];\n\n} else if (elem.currentStyle) {\n\n\tvar newProp = prop.replace(/\\-(\\w)/g,function(m,c){return c.toUpperCase();});\n\tret = elem.currentStyle[prop] || elem.currentStyle[newProp];\n\n} else if (document.defaultView && document.defaultView.getComputedStyle) {"}]},
{"id":"d7758d3fcfdef0d8cebde613fb558fc0a01ec085","instances":[{"path":"./jquery-data/1.0.3/src/jquery/jquery.js","lines":[1578,1878],"code":"\t\t\tr.push(\targ.nodeType ? arg : document.createTextNode(arg.toString()) );\n\t}\n\n\treturn r;\n},\n\nexpr: {\n\t\"\": \"m[2]== '*'||a.nodeName.toUpperCase()==m[2].toUpperCase()\",\n\t\"#\": \"a.getAttribute('id')&&a.getAttribute('id')==m[2]\",\n\t\":\": {\n\t\t// Position Checks\n\t\tlt: \"i<m[3]-0\",\n\t\tgt: \"i>m[3]-0\",\n\t\tnth: \"m[3]-0==i\",\n\t\teq: \"m[3]-0==i\",\n\t\tfirst: \"i==0\",\n\t\tlast: \"i==r.length-1\",\n\t\teven: \"i%2==0\",\n\t\todd: \"i%2\",\n\n\t\t// Child Checks\n\t\t\"nth-child\": \"jQuery.sibling(a,m[3]).cur\",\n\t\t\"first-child\": \"jQuery.sibling(a,0).cur\",\n\t\t\"last-child\": \"jQuery.sibling(a,0).last\",\n\t\t\"only-child\": \"jQuery.sibling(a).length==1\",\n\n\t\t// Parent Checks\n\t\tparent: \"a.childNodes.length\",\n\t\tempty: \"!a.childNodes.length\",\n\n\t\t// Text Check\n\t\tcontains: \"jQuery.fn.text.apply([a]).indexOf(m[3])>=0\",\n\n\t\t// Visibility\n\t\tvisible: \"a.type!='hidden'&&jQuery.css(a,'display')!='none'&&jQuery.css(a,'visibility')!='hidden'\",\n\t\thidden: \"a.type=='hidden'||jQuery.css(a,'display')=='none'||jQuery.css(a,'visibility')=='hidden'\",\n\n\t\t// Form attributes\n\t\tenabled: \"!a.disabled\",\n\t\tdisabled: \"a.disabled\",\n\t\tchecked: \"a.checked\",\n\t\tselected: \"a.selected || jQuery.attr(a, 'selected')\",\n\n\t\t// Form elements\n\t\ttext: \"a.type=='text'\",\n\t\tradio: \"a.type=='radio'\",\n\t\tcheckbox: \"a.type=='checkbox'\",\n\t\tfile: \"a.type=='file'\",\n\t\tpassword: \"a.type=='password'\",\n\t\tsubmit: \"a.type=='submit'\",\n\t\timage: \"a.type=='image'\",\n\t\treset: \"a.type=='reset'\",\n\t\tbutton: \"a.type=='button'\",\n\t\tinput: \"a.nodeName.toLowerCase().match(/input|select|textarea|button/)\"\n\t},\n\t\".\": \"jQuery.className.has(a,m[2])\",\n\t\"@\": {\n\t\t\"=\": \"z==m[4]\",\n\t\t\"!=\": \"z!=m[4]\",\n\t\t\"^=\": \"z && !z.indexOf(m[4])\",\n\t\t\"$=\": \"z && z.substr(z.length - m[4].length,m[4].length)==m[4]\",\n\t\t\"*=\": \"z && z.indexOf(m[4])>=0\",\n\t\t\"\": \"z\"\n\t},\n\t\"[\": \"jQuery.find(m[2],a).length\"\n},\n\ntoken: [\n\t\"\\\\.\\\\.|/\\\\.\\\\.\", \"a.parentNode\",\n\t\">|/\", \"jQuery.sibling(a.firstChild)\",\n\t\"\\\\+\", \"jQuery.sibling(a).next\",\n\t\"~\", function(a){\n\t\tvar r = [];\n\t\tvar s = jQuery.sibling(a);\n\t\tif ( s.n > 0 )\n\t\t\tfor ( var i = s.n; i < s.length; i++ )\n\t\t\t\tr.push( s[i] );\n\t\treturn r;\n\t}\n],\n\n/**\n *\n * @test t( \"Element Selector\", \"div\", [\"main\",\"foo\"] );\n * t( \"Element Selector\", \"body\", [\"body\"] );\n * t( \"Element Selector\", \"html\", [\"html\"] );\n * ok( $(\"*\").size() >= 30, \"Element Selector\" );\n * t( \"Parent Element\", \"div div\", [\"foo\"] );\n *\n * t( \"ID Selector\", \"#body\", [\"body\"] );\n * t( \"ID Selector w/ Element\", \"body#body\", [\"body\"] );\n * t( \"ID Selector w/ Element\", \"ul#first\", [] );\n *\n * t( \"Class Selector\", \".blog\", [\"mark\",\"simon\"] );\n * t( \"Class Selector\", \".blog.link\", [\"simon\"] );\n * t( \"Class Selector w/ Element\", \"a.blog\", [\"mark\",\"simon\"] );\n * t( \"Parent Class Selector\", \"p .blog\", [\"mark\",\"simon\"] );\n *\n * t( \"Comma Support\", \"a.blog, div\", [\"mark\",\"simon\",\"main\",\"foo\"] );\n * t( \"Comma Support\", \"a.blog , div\", [\"mark\",\"simon\",\"main\",\"foo\"] );"},{"path":"./jquery-data/1.0.2/src/jquery/jquery.js","lines":[1528,1827],"code":"\t\t\t\tr.push(\ta[i].nodeType ? a[i] : document.createTextNode(a[i].toString()) );\n\t}\n\treturn r;\n},\n\nexpr: {\n\t\"\": \"m[2]== '*'||a.nodeName.toUpperCase()==m[2].toUpperCase()\",\n\t\"#\": \"a.getAttribute('id')&&a.getAttribute('id')==m[2]\",\n\t\":\": {\n\t\t// Position Checks\n\t\tlt: \"i<m[3]-0\",\n\t\tgt: \"i>m[3]-0\",\n\t\tnth: \"m[3]-0==i\",\n\t\teq: \"m[3]-0==i\",\n\t\tfirst: \"i==0\",\n\t\tlast: \"i==r.length-1\",\n\t\teven: \"i%2==0\",\n\t\todd: \"i%2\",\n\n\t\t// Child Checks\n\t\t\"nth-child\": \"jQuery.sibling(a,m[3]).cur\",\n\t\t\"first-child\": \"jQuery.sibling(a,0).cur\",\n\t\t\"last-child\": \"jQuery.sibling(a,0).last\",\n\t\t\"only-child\": \"jQuery.sibling(a).length==1\",\n\n\t\t// Parent Checks\n\t\tparent: \"a.childNodes.length\",\n\t\tempty: \"!a.childNodes.length\",\n\n\t\t// Text Check\n\t\tcontains: \"(a.innerText||a.innerHTML).indexOf(m[3])>=0\",\n\n\t\t// Visibility\n\t\tvisible: \"a.type!='hidden'&&jQuery.css(a,'display')!='none'&&jQuery.css(a,'visibility')!='hidden'\",\n\t\thidden: \"a.type=='hidden'||jQuery.css(a,'display')=='none'||jQuery.css(a,'visibility')=='hidden'\",\n\n\t\t// Form attributes\n\t\tenabled: \"!a.disabled\",\n\t\tdisabled: \"a.disabled\",\n\t\tchecked: \"a.checked\",\n\t\tselected: \"a.selected || jQuery.attr(a, 'selected')\",\n\n\t\t// Form elements\n\t\ttext: \"a.type=='text'\",\n\t\tradio: \"a.type=='radio'\",\n\t\tcheckbox: \"a.type=='checkbox'\",\n\t\tfile: \"a.type=='file'\",\n\t\tpassword: \"a.type=='password'\",\n\t\tsubmit: \"a.type=='submit'\",\n\t\timage: \"a.type=='image'\",\n\t\treset: \"a.type=='reset'\",\n\t\tbutton: \"a.type=='button'\",\n\t\tinput: \"a.nodeName.toLowerCase().match(/input|select|textarea|button/)\"\n\t},\n\t\".\": \"jQuery.className.has(a,m[2])\",\n\t\"@\": {\n\t\t\"=\": \"z==m[4]\",\n\t\t\"!=\": \"z!=m[4]\",\n\t\t\"^=\": \"z && !z.indexOf(m[4])\",\n\t\t\"$=\": \"z && z.substr(z.length - m[4].length,m[4].length)==m[4]\",\n\t\t\"*=\": \"z && z.indexOf(m[4])>=0\",\n\t\t\"\": \"z\"\n\t},\n\t\"[\": \"jQuery.find(m[2],a).length\"\n},\n\ntoken: [\n\t\"\\\\.\\\\.|/\\\\.\\\\.\", \"a.parentNode\",\n\t\">|/\", \"jQuery.sibling(a.firstChild)\",\n\t\"\\\\+\", \"jQuery.sibling(a).next\",\n\t\"~\", function(a){\n\t\tvar r = [];\n\t\tvar s = jQuery.sibling(a);\n\t\tif ( s.n > 0 )\n\t\t\tfor ( var i = s.n; i < s.length; i++ )\n\t\t\t\tr.push( s[i] );\n\t\treturn r;\n\t}\n],\n\n/**\n *\n * @test t( \"Element Selector\", \"div\", [\"main\",\"foo\"] );\n * t( \"Element Selector\", \"body\", [\"body\"] );\n * t( \"Element Selector\", \"html\", [\"html\"] );\n * ok( $(\"*\").size() >= 30, \"Element Selector\" );\n * t( \"Parent Element\", \"div div\", [\"foo\"] );\n *\n * t( \"ID Selector\", \"#body\", [\"body\"] );\n * t( \"ID Selector w/ Element\", \"body#body\", [\"body\"] );\n * t( \"ID Selector w/ Element\", \"ul#first\", [] );\n *\n * t( \"Class Selector\", \".blog\", [\"mark\",\"simon\"] );\n * t( \"Class Selector\", \".blog.link\", [\"simon\"] );\n * t( \"Class Selector w/ Element\", \"a.blog\", [\"mark\",\"simon\"] );\n * t( \"Parent Class Selector\", \"p .blog\", [\"mark\",\"simon\"] );\n *\n * t( \"Comma Support\", \"a.blog, div\", [\"mark\",\"simon\",\"main\",\"foo\"] );\n * t( \"Comma Support\", \"a.blog , div\", [\"mark\",\"simon\",\"main\",\"foo\"] );\n * t( \"Comma Support\", \"a.blog ,div\", [\"mark\",\"simon\",\"main\",\"foo\"] );"}]},
{"id":"23476ee084a607fbd81160ff0fb7fbc745393299","instances":[{"path":"./jquery-data/1.0.3/src/jquery/jquery.js","lines":[1880,1909],"code":"\tinnerHTML: \"innerHTML\",\n\tclassName: \"className\",\n\tvalue: \"value\",\n\tdisabled: \"disabled\",\n\tchecked: \"checked\",\n\treadonly: \"readOnly\"\n};\n\n// IE actually uses filters for opacity ... elem is actually elem.style\nif (name == \"opacity\" && jQuery.browser.msie && value != undefined) {\n\t// IE has trouble with opacity if it does not have layout\n\t// Would prefer to check element.hasLayout first but don't have access to the element here\n\telem['zoom'] = 1; \n\tif (value == 1) // Remove filter to avoid more IE weirdness\n\t\treturn elem[\"filter\"] = elem[\"filter\"].replace(/alpha\\([^\\)]*\\)/gi,\"\");\n\telse\n\t\treturn elem[\"filter\"] = elem[\"filter\"].replace(/alpha\\([^\\)]*\\)/gi,\"\") + \"alpha(opacity=\" + value * 100 + \")\";\n} else if (name == \"opacity\" && jQuery.browser.msie) {\n\treturn elem[\"filter\"] ? parseFloat( elem[\"filter\"].match(/alpha\\(opacity=(.*)\\)/)[1] )/100 : 1;\n}\n\n// Mozilla doesn't play well with opacity 1\nif (name == \"opacity\" && jQuery.browser.mozilla && value == 1) value = 0.9999;\n\nif ( fix[name] ) {\n\tif ( value != undefined ) elem[fix[name]] = value;\n\treturn elem[fix[name]];\n} else if( value == undefined && jQuery.browser.msie && elem.nodeName && elem.nodeName.toUpperCase() == 'FORM' && (name == 'action' || name == 'method') ) {\n\treturn elem.getAttributeNode(name).nodeValue;\n} else if ( elem.getAttribute != undefined && elem.tagName ) { // IE elem.getAttribute passes even for style"},{"path":"./jquery-data/1.0.2/src/jquery/jquery.js","lines":[1827,1856],"code":"\t\"float\": \"cssFloat\",\n\tinnerHTML: \"innerHTML\",\n\tclassName: \"className\",\n\tvalue: \"value\",\n\tdisabled: \"disabled\",\n\tchecked: \"checked\"\n};\n\n// IE actually uses filters for opacity ... elem is actually elem.style\nif (name == \"opacity\" && jQuery.browser.msie && value != undefined) {\n\t// IE has trouble with opacity if it does not have layout\n\t// Would prefer to check element.hasLayout first but don't have access to the element here\n\telem['zoom'] = 1; \n\tif (value == 1) // Remove filter to avoid more IE weirdness\n\t\treturn elem[\"filter\"] = elem[\"filter\"].replace(/alpha\\([^\\)]*\\)/gi,\"\");\n\telse\n\t\treturn elem[\"filter\"] = elem[\"filter\"].replace(/alpha\\([^\\)]*\\)/gi,\"\") + \"alpha(opacity=\" + value * 100 + \")\";\n} else if (name == \"opacity\" && jQuery.browser.msie) {\n\treturn elem[\"filter\"] ? parseFloat( elem[\"filter\"].match(/alpha\\(opacity=(.*)\\)/)[1] )/100 : 1;\n}\n\n// Mozilla doesn't play well with opacity 1\nif (name == \"opacity\" && jQuery.browser.mozilla && value == 1) value = 0.9999;\n\nif ( fix[name] ) {\n\tif ( value != undefined ) elem[fix[name]] = value;\n\treturn elem[fix[name]];\n} else if( value == undefined && jQuery.browser.msie && elem.nodeName && elem.nodeName.toUpperCase() == 'FORM' && (name == 'action' || name == 'method') ) {\n\treturn elem.getAttributeNode(name).nodeValue;\n} else if ( elem.getAttribute != undefined ) {"}]},
{"id":"88f50a9e4e99447038e2982edc620e1d2468c739","instances":[{"path":"./jquery-data/1.0.3/src/jquery/jquery.js","lines":[1912,2272],"code":"\t} else {\n\t\tname = name.replace(/-([a-z])/ig,function(z,b){return b.toUpperCase();});\n\t\tif ( value != undefined ) elem[name] = value;\n\t\treturn elem[name];\n\t}\n},\n\n// The regular expressions that power the parsing engine\nparse: [\n\t// Match: [@value='test'], [@foo]\n\t\"\\\\[ *(@)S *([!*$^=]*) *('?\\\"?)(.*?)\\\\4 *\\\\]\",\n\n\t// Match: [div], [div p]\n\t\"(\\\\[)\\s*(.*?)\\s*\\\\]\",\n\n\t// Match: :contains('foo')\n\t\"(:)S\\\\(\\\"?'?([^\\\\)]*?)\\\"?'?\\\\)\",\n\n\t// Match: :even, :last-chlid\n\t\"([:.#]*)S\"\n],\n\nfilter: function(t,r,not) {\n\t// Figure out if we're doing regular, or inverse, filtering\n\tvar g = not !== false ? jQuery.grep :\n\t\tfunction(a,f) {return jQuery.grep(a,f,true);};\n\n\twhile ( t && /^[a-z[({<*:.#]/i.test(t) ) {\n\n\t\tvar p = jQuery.parse;\n\n\t\tfor ( var i = 0; i < p.length; i++ ) {\n\t\n\t\t\t// Look for, and replace, string-like sequences\n\t\t\t// and finally build a regexp out of it\n\t\t\tvar re = new RegExp(\n\t\t\t\t\"^\" + p[i].replace(\"S\", \"([a-z*_-][a-z0-9_-]*)\"), \"i\" );\n\n\t\t\tvar m = re.exec( t );\n\n\t\t\tif ( m ) {\n\t\t\t\t// Re-organize the first match\n\t\t\t\tif ( !i )\n\t\t\t\t\tm = [\"\",m[1], m[3], m[2], m[5]];\n\n\t\t\t\t// Remove what we just matched\n\t\t\t\tt = t.replace( re, \"\" );\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// :not() is a special case that can be optimized by\n\t\t// keeping it out of the expression list\n\t\tif ( m[1] == \":\" && m[2] == \"not\" )\n\t\t\tr = jQuery.filter(m[3],r,false).r;\n\n\t\t// Otherwise, find the expression to execute\n\t\telse {\n\t\t\tvar f = jQuery.expr[m[1]];\n\t\t\tif ( f.constructor != String )\n\t\t\t\tf = jQuery.expr[m[1]][m[2]];\n\n\t\t\t// Build a custom macro to enclose it\n\t\t\teval(\"f = function(a,i){\" +\n\t\t\t\t( m[1] == \"@\" ? \"z=jQuery.attr(a,m[3]);\" : \"\" ) +\n\t\t\t\t\"return \" + f + \"}\");\n\n\t\t\t// Execute it against the current filter\n\t\t\tr = g( r, f );\n\t\t}\n\t}\n\n\t// Return an array of filtered elements (r)\n\t// and the modified expression string (t)\n\treturn { r: r, t: t };\n},\n\n/**\n * Remove the whitespace from the beginning and end of a string.\n *\n * @example $.trim(\"  hello, how are you?  \");\n * @result \"hello, how are you?\"\n *\n * @name $.trim\n * @type String\n * @param String str The string to trim.\n * @cat Javascript\n */\ntrim: function(t){\n\treturn t.replace(/^\\s+|\\s+$/g, \"\");\n},\n\n/**\n * All ancestors of a given element.\n *\n * @private\n * @name $.parents\n * @type Array<Element>\n * @param Element elem The element to find the ancestors of."},{"path":"./jquery-data/1.0.2/src/jquery/jquery.js","lines":[1859,2219],"code":"\t} else {\n\t\tname = name.replace(/-([a-z])/ig,function(z,b){return b.toUpperCase();});\n\t\tif ( value != undefined ) elem[name] = value;\n\t\treturn elem[name];\n\t}\n},\n\n// The regular expressions that power the parsing engine\nparse: [\n\t// Match: [@value='test'], [@foo]\n\t\"\\\\[ *(@)S *([!*$^=]*) *('?\\\"?)(.*?)\\\\4 *\\\\]\",\n\n\t// Match: [div], [div p]\n\t\"(\\\\[)\\s*(.*?)\\s*\\\\]\",\n\n\t// Match: :contains('foo')\n\t\"(:)S\\\\(\\\"?'?([^\\\\)]*?)\\\"?'?\\\\)\",\n\n\t// Match: :even, :last-chlid\n\t\"([:.#]*)S\"\n],\n\nfilter: function(t,r,not) {\n\t// Figure out if we're doing regular, or inverse, filtering\n\tvar g = not !== false ? jQuery.grep :\n\t\tfunction(a,f) {return jQuery.grep(a,f,true);};\n\n\twhile ( t && /^[a-z[({<*:.#]/i.test(t) ) {\n\n\t\tvar p = jQuery.parse;\n\n\t\tfor ( var i = 0; i < p.length; i++ ) {\n\t\n\t\t\t// Look for, and replace, string-like sequences\n\t\t\t// and finally build a regexp out of it\n\t\t\tvar re = new RegExp(\n\t\t\t\t\"^\" + p[i].replace(\"S\", \"([a-z*_-][a-z0-9_-]*)\"), \"i\" );\n\n\t\t\tvar m = re.exec( t );\n\n\t\t\tif ( m ) {\n\t\t\t\t// Re-organize the first match\n\t\t\t\tif ( !i )\n\t\t\t\t\tm = [\"\",m[1], m[3], m[2], m[5]];\n\n\t\t\t\t// Remove what we just matched\n\t\t\t\tt = t.replace( re, \"\" );\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// :not() is a special case that can be optimized by\n\t\t// keeping it out of the expression list\n\t\tif ( m[1] == \":\" && m[2] == \"not\" )\n\t\t\tr = jQuery.filter(m[3],r,false).r;\n\n\t\t// Otherwise, find the expression to execute\n\t\telse {\n\t\t\tvar f = jQuery.expr[m[1]];\n\t\t\tif ( f.constructor != String )\n\t\t\t\tf = jQuery.expr[m[1]][m[2]];\n\n\t\t\t// Build a custom macro to enclose it\n\t\t\teval(\"f = function(a,i){\" +\n\t\t\t\t( m[1] == \"@\" ? \"z=jQuery.attr(a,m[3]);\" : \"\" ) +\n\t\t\t\t\"return \" + f + \"}\");\n\n\t\t\t// Execute it against the current filter\n\t\t\tr = g( r, f );\n\t\t}\n\t}\n\n\t// Return an array of filtered elements (r)\n\t// and the modified expression string (t)\n\treturn { r: r, t: t };\n},\n\n/**\n * Remove the whitespace from the beginning and end of a string.\n *\n * @example $.trim(\"  hello, how are you?  \");\n * @result \"hello, how are you?\"\n *\n * @name $.trim\n * @type String\n * @param String str The string to trim.\n * @cat Javascript\n */\ntrim: function(t){\n\treturn t.replace(/^\\s+|\\s+$/g, \"\");\n},\n\n/**\n * All ancestors of a given element.\n *\n * @private\n * @name $.parents\n * @type Array<Element>\n * @param Element elem The element to find the ancestors of."}]},
{"id":"91fd675a4fe504e9de44964378adecb1d998572f","instances":[{"path":"./jquery-data/1.0.3/src/jquery/jquery.js","lines":[2186,3484],"code":"\t/*\n\t * A number of helper functions used for managing events.\n\t * Many of the ideas behind this code orignated from Dean Edwards' addEvent library.\n\t */\n\tevent: {\n\n\t\t// Bind an event to an element\n\t\t// Original by Dean Edwards\n\t\tadd: function(element, type, handler) {\n\t\t\t// For whatever reason, IE has trouble passing the window object\n\t\t\t// around, causing it to be cloned in the process\n\t\t\tif ( jQuery.browser.msie && element.setInterval != undefined )\n\t\t\t\telement = window;\n\n\t\t\t// Make sure that the function being executed has a unique ID\n\t\t\tif ( !handler.guid )\n\t\t\t\thandler.guid = this.guid++;\n\n\t\t\t// Init the element's event structure\n\t\t\tif (!element.events)\n\t\t\t\telement.events = {};\n\n\t\t\t// Get the current list of functions bound to this event\n\t\t\tvar handlers = element.events[type];\n\n\t\t\t// If it hasn't been initialized yet\n\t\t\tif (!handlers) {\n\t\t\t\t// Init the event handler queue\n\t\t\t\thandlers = element.events[type] = {};\n\n\t\t\t\t// Remember an existing handler, if it's already there\n\t\t\t\tif (element[\"on\" + type])\n\t\t\t\t\thandlers[0] = element[\"on\" + type];\n\t\t\t}\n\n\t\t\t// Add the function to the element's handler list\n\t\t\thandlers[handler.guid] = handler;\n\n\t\t\t// And bind the global event handler to the element\n\t\t\telement[\"on\" + type] = this.handle;\n\n\t\t\t// Remember the function in a global list (for triggering)\n\t\t\tif (!this.global[type])\n\t\t\t\tthis.global[type] = [];\n\t\t\tthis.global[type].push( element );\n\t\t},\n\n\t\tguid: 1,\n\t\tglobal: {},\n\n\t\t// Detach an event or set of events from an element\n\t\tremove: function(element, type, handler) {\n\t\t\tif (element.events)\n\t\t\t\tif (type && element.events[type])\n\t\t\t\t\tif ( handler )\n\t\t\t\t\t\tdelete element.events[type][handler.guid];\n\t\t\t\t\telse\n\t\t\t\t\t\tfor ( var i in element.events[type] )\n\t\t\t\t\t\t\tdelete element.events[type][i];\n\t\t\t\telse\n\t\t\t\t\tfor ( var j in element.events )\n\t\t\t\t\t\tthis.remove( element, j );\n\t\t},\n\n\t\ttrigger: function(type,data,element) {\n\t\t\t// Touch up the incoming data\n\t\t\tdata = data || [];\n\n\t\t\t// Handle a global trigger\n\t\t\tif ( !element ) {\n\t\t\t\tvar g = this.global[type];\n\t\t\t\tif ( g )\n\t\t\t\t\tfor ( var i = 0; i < g.length; i++ )\n\t\t\t\t\t\tthis.trigger( type, data, g[i] );\n\n\t\t\t// Handle triggering a single element\n\t\t\t} else if ( element[\"on\" + type] ) {\n\t\t\t\t// Pass along a fake event\n\t\t\t\tdata.unshift( this.fix({ type: type, target: element }) );\n\n\t\t\t\t// Trigger the event\n\t\t\t\telement[\"on\" + type].apply( element, data );\n\t\t\t}\n\t\t},\n\n\t\thandle: function(event) {\n\t\t\tif ( typeof jQuery == \"undefined\" ) return false;\n\n\t\t\tevent = event || jQuery.event.fix( window.event );\n\n\t\t\t// If no correct event was found, fail\n\t\t\tif ( !event ) return false;\n\n\t\t\tvar returnValue = true;\n\n\t\t\tvar c = this.events[event.type];\n\n\t\t\tvar args = [].slice.call( arguments, 1 );\n\t\t\targs.unshift( event );\n"},{"path":"./jquery-data/1.0.2/src/jquery/jquery.js","lines":[2133,3421],"code":"\t/*\n\t * A number of helper functions used for managing events.\n\t * Many of the ideas behind this code orignated from Dean Edwards' addEvent library.\n\t */\n\tevent: {\n\n\t\t// Bind an event to an element\n\t\t// Original by Dean Edwards\n\t\tadd: function(element, type, handler) {\n\t\t\t// For whatever reason, IE has trouble passing the window object\n\t\t\t// around, causing it to be cloned in the process\n\t\t\tif ( jQuery.browser.msie && element.setInterval != undefined )\n\t\t\t\telement = window;\n\n\t\t\t// Make sure that the function being executed has a unique ID\n\t\t\tif ( !handler.guid )\n\t\t\t\thandler.guid = this.guid++;\n\n\t\t\t// Init the element's event structure\n\t\t\tif (!element.events)\n\t\t\t\telement.events = {};\n\n\t\t\t// Get the current list of functions bound to this event\n\t\t\tvar handlers = element.events[type];\n\n\t\t\t// If it hasn't been initialized yet\n\t\t\tif (!handlers) {\n\t\t\t\t// Init the event handler queue\n\t\t\t\thandlers = element.events[type] = {};\n\n\t\t\t\t// Remember an existing handler, if it's already there\n\t\t\t\tif (element[\"on\" + type])\n\t\t\t\t\thandlers[0] = element[\"on\" + type];\n\t\t\t}\n\n\t\t\t// Add the function to the element's handler list\n\t\t\thandlers[handler.guid] = handler;\n\n\t\t\t// And bind the global event handler to the element\n\t\t\telement[\"on\" + type] = this.handle;\n\n\t\t\t// Remember the function in a global list (for triggering)\n\t\t\tif (!this.global[type])\n\t\t\t\tthis.global[type] = [];\n\t\t\tthis.global[type].push( element );\n\t\t},\n\n\t\tguid: 1,\n\t\tglobal: {},\n\n\t\t// Detach an event or set of events from an element\n\t\tremove: function(element, type, handler) {\n\t\t\tif (element.events)\n\t\t\t\tif (type && element.events[type])\n\t\t\t\t\tif ( handler )\n\t\t\t\t\t\tdelete element.events[type][handler.guid];\n\t\t\t\t\telse\n\t\t\t\t\t\tfor ( var i in element.events[type] )\n\t\t\t\t\t\t\tdelete element.events[type][i];\n\t\t\t\telse\n\t\t\t\t\tfor ( var j in element.events )\n\t\t\t\t\t\tthis.remove( element, j );\n\t\t},\n\n\t\ttrigger: function(type,data,element) {\n\t\t\t// Touch up the incoming data\n\t\t\tdata = data || [];\n\n\t\t\t// Handle a global trigger\n\t\t\tif ( !element ) {\n\t\t\t\tvar g = this.global[type];\n\t\t\t\tif ( g )\n\t\t\t\t\tfor ( var i = 0; i < g.length; i++ )\n\t\t\t\t\t\tthis.trigger( type, data, g[i] );\n\n\t\t\t// Handle triggering a single element\n\t\t\t} else if ( element[\"on\" + type] ) {\n\t\t\t\t// Pass along a fake event\n\t\t\t\tdata.unshift( this.fix({ type: type, target: element }) );\n\n\t\t\t\t// Trigger the event\n\t\t\t\telement[\"on\" + type].apply( element, data );\n\t\t\t}\n\t\t},\n\n\t\thandle: function(event) {\n\t\t\tif ( typeof jQuery == \"undefined\" ) return;\n\n\t\t\tevent = event || jQuery.event.fix( window.event );\n\n\t\t\t// If no correct event was found, fail\n\t\t\tif ( !event ) return;\n\n\t\t\tvar returnValue = true;\n\n\t\t\tvar c = this.events[event.type];\n\n\t\t\tvar args = [].slice.call( arguments, 1 );\n\t\t\targs.unshift( event );\n"}]},
{"id":"7a0c60e447ed65c62772a177c9c1a24f056e9775","instances":[{"path":"./jquery-data/1.0.2/src/dimensions/dimensions.js","lines":[24,53],"code":"jQuery.fn.height = function() {\n\tif ( this.get(0) == window )\n\t\treturn self.innerHeight ||\n\t\t\tjQuery.boxModel && document.documentElement.clientHeight ||\n\t\t\tdocument.body.clientHeight;\n\t\n\tif ( this.get(0) == document )\n\t\treturn Math.max( document.body.scrollHeight, document.body.offsetHeight );\n\t\n\treturn this.css(\"height\");\n};\n\n/**\n * Returns the css width value for the first matched element.\n * If used on document, returns the document's width (innerWidth)\n * If used on window, returns the viewport's (window) width\n *\n * @example $(\"#testdiv\").width()\n * @result \"200px\"\n *\n * @example $(document).width();\n * @result 800\n *\n * @example $(window).width();\n * @result 400\n * \n * @name width\n * @type Object\n * @cat Dimensions\n */"},{"path":"./jquery-data/1.0.2/src/dimensions/dimensions.js","lines":[54,77],"code":"jQuery.fn.width = function() {\n\tif ( this.get(0) == window )\n\t\treturn self.innerWidth ||\n\t\t\tjQuery.boxModel && document.documentElement.clientWidth ||\n\t\t\tdocument.body.clientWidth;\n\t\n\tif ( this.get(0) == document )\n\t\treturn Math.max( document.body.scrollWidth, document.body.offsetWidth );\n\t\n\treturn this.css(\"width\");\n};\n\n/**\n * Returns the inner height value (without border) for the first matched element.\n * If used on document, returns the document's height (innerHeight)\n * If used on window, returns the viewport's (window) height\n *\n * @example $(\"#testdiv\").innerHeight()\n * @result 800\n * \n * @name innerHeight\n * @type Number\n * @cat Dimensions\n */"}]},
{"id":"69a5bb20cd5ebe82bc0a02885d105f0fcbe54ffc","instances":[{"path":"./jquery-data/1.0.2/src/dimensions/dimensions.js","lines":[66,82],"code":"/**\n * Returns the inner height value (without border) for the first matched element.\n * If used on document, returns the document's height (innerHeight)\n * If used on window, returns the viewport's (window) height\n *\n * @example $(\"#testdiv\").innerHeight()\n * @result 800\n * \n * @name innerHeight\n * @type Number\n * @cat Dimensions\n */\njQuery.fn.innerHeight = function() {\n\treturn this.get(0) == window || this.get(0) == document ?\n\t\tthis.height() :\n\t\tthis.get(0).offsetHeight - parseInt(this.css(\"borderTop\") || 0) - parseInt(this.css(\"borderBottom\") || 0);\n};"},{"path":"./jquery-data/1.0.2/src/dimensions/dimensions.js","lines":[84,100],"code":"/**\n * Returns the inner width value (without border) for the first matched element.\n * If used on document, returns the document's Width (innerWidth)\n * If used on window, returns the viewport's (window) width\n *\n * @example $(\"#testdiv\").innerWidth()\n * @result 1000\n * \n * @name innerWidth\n * @type Number\n * @cat Dimensions\n */\njQuery.fn.innerWidth = function() {\n\treturn this.get(0) == window || this.get(0) == document ?\n\t\tthis.width() :\n\t\tthis.get(0).offsetWidth - parseInt(this.css(\"borderLeft\") || 0) - parseInt(this.css(\"borderRight\") || 0);\n};"}]},
{"id":"4796ee8572781df865cdc1bf420c916ce94ed526","instances":[{"path":"./jquery-data/1.0.2/src/dimensions/dimensions.js","lines":[133,154],"code":"\t\tthis.get(0).offsetWidth;\t\n};\n\n/**\n * Returns how many pixels the user has scrolled to the right (scrollLeft).\n * Works on containers with overflow: auto and window/document.\n *\n * @example $(\"#testdiv\").scrollLeft()\n * @result 100\n * \n * @name scrollLeft\n * @type Number\n * @cat Dimensions\n */\njQuery.fn.scrollLeft = function() {\n\tif ( this.get(0) == window || this.get(0) == document )\n\t\treturn self.pageXOffset ||\n\t\t\tjQuery.boxModel && document.documentElement.scrollLeft ||\n\t\t\tdocument.body.scrollLeft;\n\t\n\treturn this.get(0).scrollLeft;\n};"},{"path":"./jquery-data/1.0.2/src/dimensions/dimensions.js","lines":[153,174],"code":"\treturn this.get(0).scrollLeft;\n};\n\n/**\n * Returns how many pixels the user has scrolled to the bottom (scrollTop).\n * Works on containers with overflow: auto and window/document.\n *\n * @example $(\"#testdiv\").scrollTop()\n * @result 100\n * \n * @name scrollTop\n * @type Number\n * @cat Dimensions\n */\njQuery.fn.scrollTop = function() {\n\tif ( this.get(0) == window || this.get(0) == document )\n\t\treturn self.pageYOffset ||\n\t\t\tjQuery.boxModel && document.documentElement.scrollTop ||\n\t\t\tdocument.body.scrollTop;\n\n\treturn this.get(0).scrollTop;\n};"}]}]
