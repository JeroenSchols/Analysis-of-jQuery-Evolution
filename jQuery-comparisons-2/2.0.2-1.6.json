[{"id":"d976670ca50c92ab384778ba73d5688a5795568c","instances":[{"path":"./jquery-data/2.0.2/src/ajax.js","lines":[340,352],"code":"getResponseHeader: function( key ) {\n\tvar match;\n\tif ( state === 2 ) {\n\t\tif ( !responseHeaders ) {\n\t\t\tresponseHeaders = {};\n\t\t\twhile ( (match = rheaders.exec( responseHeadersString )) ) {\n\t\t\t\tresponseHeaders[ match[1].toLowerCase() ] = match[ 2 ];\n\t\t\t}\n\t\t}\n\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t}\n\treturn match == null ? null : match;\n},"},{"path":"./jquery-data/1.6/src/ajax.js","lines":[429,441],"code":"getResponseHeader: function( key ) {\n\tvar match;\n\tif ( state === 2 ) {\n\t\tif ( !responseHeaders ) {\n\t\t\tresponseHeaders = {};\n\t\t\twhile( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\tresponseHeaders[ match[1].toLowerCase() ] = match[ 2 ];\n\t\t\t}\n\t\t}\n\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t}\n\treturn match === undefined ? null : match;\n},"}]},
{"id":"f5045b1e7f89be06807315c17436a85e68aaac62","instances":[{"path":"./jquery-data/2.0.2/src/ajax.js","lines":[424,428],"code":"if ( s.crossDomain == null ) {\n\tparts = rurl.exec( s.url.toLowerCase() );\n\ts.crossDomain = !!( parts &&\n\t\t( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||\n\t\t\t( parts[ 3 ] || ( parts[ 1 ] === \"http:\" ? \"80\" : \"443\" ) ) !=="},{"path":"./jquery-data/1.6/src/ajax.js","lines":[605,609],"code":"if ( s.crossDomain == null ) {\n\tparts = rurl.exec( s.url.toLowerCase() );\n\ts.crossDomain = !!( parts &&\n\t\t( parts[ 1 ] != ajaxLocParts[ 1 ] || parts[ 2 ] != ajaxLocParts[ 2 ] ||\n\t\t\t( parts[ 3 ] || ( parts[ 1 ] === \"http:\" ? 80 : 443 ) ) !="}]},
{"id":"b8bb951cd0b2d539850cb8357a97f41d0bd1ed55","instances":[{"path":"./jquery-data/2.0.2/src/ajax.js","lines":[524,556],"code":"for ( i in { success: 1, error: 1, complete: 1 } ) {\n\tjqXHR[ i ]( s[ i ] );\n}\n\n// Get transport\ntransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n// If no transport, we auto-abort\nif ( !transport ) {\n\tdone( -1, \"No Transport\" );\n} else {\n\tjqXHR.readyState = 1;\n\n\t// Send global event\n\tif ( fireGlobals ) {\n\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t}\n\t// Timeout\n\tif ( s.async && s.timeout > 0 ) {\n\t\ttimeoutTimer = setTimeout(function() {\n\t\t\tjqXHR.abort(\"timeout\");\n\t\t}, s.timeout );\n\t}\n\n\ttry {\n\t\tstate = 1;\n\t\ttransport.send( requestHeaders, done );\n\t} catch ( e ) {\n\t\t// Propagate exception as error if not done\n\t\tif ( state < 2 ) {\n\t\t\tdone( -1, e );\n\t\t// Simply rethrow otherwise\n\t\t} else {"},{"path":"./jquery-data/1.6/src/ajax.js","lines":[702,733],"code":"for ( i in { success: 1, error: 1, complete: 1 } ) {\n\tjqXHR[ i ]( s[ i ] );\n}\n\n// Get transport\ntransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n// If no transport, we auto-abort\nif ( !transport ) {\n\tdone( -1, \"No Transport\" );\n} else {\n\tjqXHR.readyState = 1;\n\t// Send global event\n\tif ( fireGlobals ) {\n\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t}\n\t// Timeout\n\tif ( s.async && s.timeout > 0 ) {\n\t\ttimeoutTimer = setTimeout( function(){\n\t\t\tjqXHR.abort( \"timeout\" );\n\t\t}, s.timeout );\n\t}\n\n\ttry {\n\t\tstate = 1;\n\t\ttransport.send( requestHeaders, done );\n\t} catch (e) {\n\t\t// Propagate exception as error if not done\n\t\tif ( status < 2 ) {\n\t\t\tdone( -1, e );\n\t\t// Simply rethrow otherwise\n\t\t} else {"}]},
{"id":"f783202c4183e1939c81b396eb4d8f3e1b9d08ee","instances":[{"path":"./jquery-data/2.0.2/src/ajax.js","lines":[687,701],"code":"jQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\t\t// shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\treturn jQuery.ajax({\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback"},{"path":"./jquery-data/1.6/src/ajax.js","lines":[249,263],"code":"jQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\t\t// shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\treturn jQuery.ajax({\n\t\t\ttype: method,\n\t\t\turl: url,\n\t\t\tdata: data,\n\t\t\tsuccess: callback,\n\t\t\tdataType: type"}]},
{"id":"f474107e5e9a880defeed81dddd492961b169ab5","instances":[{"path":"./jquery-data/2.0.2/src/ajax.js","lines":[706,760],"code":"/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[0] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}"},{"path":"./jquery-data/1.6/src/ajax.js","lines":[822,888],"code":"/* Handles responses to an ajax request:\n * - sets all responseXXX fields accordingly\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar contents = s.contents,\n\t\tdataTypes = s.dataTypes,\n\t\tresponseFields = s.responseFields,\n\t\tct,\n\t\ttype,\n\t\tfinalDataType,\n\t\tfirstDataType;\n\n\t// Fill responseXXX fields\n\tfor( type in responseFields ) {\n\t\tif ( type in responses ) {\n\t\t\tjqXHR[ responseFields[type] ] = responses[ type ];\n\t\t}\n\t}\n\n\t// Remove auto dataType and get content-type in the process\n\twhile( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"content-type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[0] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}"}]},
{"id":"418dbd8332fd2666a108a1664640c036cce482ad","instances":[{"path":"./jquery-data/2.0.2/src/attributes.js","lines":[31,52],"code":"\tproceed = typeof value === \"string\" && value;\n\nif ( jQuery.isFunction( value ) ) {\n\treturn this.each(function( j ) {\n\t\tjQuery( this ).addClass( value.call( this, j, this.className ) );\n\t});\n}\n\nif ( proceed ) {\n\t// The disjunction here is for better compressibility (see removeClass)\n\tclasses = ( value || \"\" ).match( core_rnotwhite ) || [];\n\n\tfor ( ; i < len; i++ ) {\n\t\telem = this[ i ];\n\t\tcur = elem.nodeType === 1 && ( elem.className ?\n\t\t\t( \" \" + elem.className + \" \" ).replace( rclass, \" \" ) :\n\t\t\t\" \"\n\t\t);\n\n\t\tif ( cur ) {\n\t\t\tj = 0;\n\t\t\twhile ( (clazz = classes[j++]) ) {"},{"path":"./jquery-data/2.0.2/src/attributes.js","lines":[70,90],"code":"\tproceed = arguments.length === 0 || typeof value === \"string\" && value;\n\nif ( jQuery.isFunction( value ) ) {\n\treturn this.each(function( j ) {\n\t\tjQuery( this ).removeClass( value.call( this, j, this.className ) );\n\t});\n}\nif ( proceed ) {\n\tclasses = ( value || \"\" ).match( core_rnotwhite ) || [];\n\n\tfor ( ; i < len; i++ ) {\n\t\telem = this[ i ];\n\t\t// This expression is here for better compressibility (see addClass)\n\t\tcur = elem.nodeType === 1 && ( elem.className ?\n\t\t\t( \" \" + elem.className + \" \" ).replace( rclass, \" \" ) :\n\t\t\t\"\"\n\t\t);\n\n\t\tif ( cur ) {\n\t\t\tj = 0;\n\t\t\twhile ( (clazz = classes[j++]) ) {"}]},
{"id":"68c8948278ce9d16278c1fa1b2dc1abbc8ad305d","instances":[{"path":"./jquery-data/2.0.2/src/attributes.js","lines":[211,230],"code":"\t\t\tif ( !hooks || !(\"set\" in hooks) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t});\n\t}\n});\n\njQuery.extend({\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\t\t\t\t// attributes.value is undefined in Blackberry 4.7 but\n\t\t\t\t// uses .value. See #6932\n\t\t\t\tvar val = elem.attributes.value;\n\t\t\t\treturn !val || val.specified ? elem.value : elem.text;\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option,"},{"path":"./jquery-data/1.6/src/attributes.js","lines":[202,221],"code":"\t\t\tif ( !hooks || (\"set\" in hooks && hooks.set( this, val, \"value\" ) === undefined) ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t});\n\t}\n});\n\njQuery.extend({\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\t\t\t\t// attributes.value is undefined in Blackberry 4.7 but\n\t\t\t\t// uses .value. See #6932\n\t\t\t\tvar val = elem.attributes.value;\n\t\t\t\treturn !val || val.specified ? elem.value : elem.text;\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar index = elem.selectedIndex,"}]},
{"id":"1180c56627645dfb4357b1b64d18382cde496129","instances":[{"path":"./jquery-data/2.0.2/src/core.js","lines":[86,107],"code":"\treturn this;\n}\n\n// Handle HTML strings\nif ( typeof selector === \"string\" ) {\n\tif ( selector.charAt(0) === \"<\" && selector.charAt( selector.length - 1 ) === \">\" && selector.length >= 3 ) {\n\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\tmatch = [ null, selector, null ];\n\n\t} else {\n\t\tmatch = rquickExpr.exec( selector );\n\t}\n\n\t// Match html or make sure no context is specified for #id\n\tif ( match && (match[1] || !context) ) {\n\n\t\t// HANDLE: $(html) -> $(array)\n\t\tif ( match[1] ) {\n\t\t\tcontext = context instanceof jQuery ? context[0] : context;\n\n\t\t\t// scripts is true for back-compat\n\t\t\tjQuery.merge( this, jQuery.parseHTML("},{"path":"./jquery-data/1.6/src/core.js","lines":[93,113],"code":"\treturn this;\n}\n\n// Handle HTML strings\nif ( typeof selector === \"string\" ) {\n\t// Are we dealing with HTML string or an ID?\n\tif ( selector.charAt(0) === \"<\" && selector.charAt( selector.length - 1 ) === \">\" && selector.length >= 3 ) {\n\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\tmatch = [ null, selector, null ];\n\n\t} else {\n\t\tmatch = quickExpr.exec( selector );\n\t}\n\n\t// Verify a match, and that no context was specified for #id\n\tif ( match && (match[1] || !context) ) {\n\n\t\t// HANDLE: $(html) -> $(array)\n\t\tif ( match[1] ) {\n\t\t\tcontext = context instanceof jQuery ? context[0] : context;\n\t\t\tdoc = (context ? context.ownerDocument || context : document);"}]},
{"id":"cc6f94fcb854c80721ef82ce0ecf5ed64390e23f","instances":[{"path":"./jquery-data/2.0.2/src/core.js","lines":[245,331],"code":"\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map(this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t}));\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor(null);\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: core_push,\n\tsort: [].sort,\n\tsplice: [].splice\n};\n\n// Give the init function the jQuery prototype for later instantiation\njQuery.fn.init.prototype = jQuery.fn;\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction(target) ) {\n\t\ttarget = {};\n\t}\n\n\t// extend jQuery itself if only one argument is passed\n\tif ( length === i ) {\n\t\ttarget = this;\n\t\t--i;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\t\t// Only deal with non-null/undefined values\n\t\tif ( (options = arguments[ i ]) != null ) {\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && jQuery.isArray(src) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject(src) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend({\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( core_version + Math.random() ).replace( /\\D/g, \"\" ),"},{"path":"./jquery-data/1.6/src/core.js","lines":[276,361],"code":"\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map(this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t}));\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor(null);\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: [].sort,\n\tsplice: [].splice\n};\n\n// Give the init function the jQuery prototype for later instantiation\njQuery.fn.init.prototype = jQuery.fn;\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction(target) ) {\n\t\ttarget = {};\n\t}\n\n\t// extend jQuery itself if only one argument is passed\n\tif ( length === i ) {\n\t\ttarget = this;\n\t\t--i;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\t\t// Only deal with non-null/undefined values\n\t\tif ( (options = arguments[ i ]) != null ) {\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && jQuery.isArray(src) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject(src) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend({\n\tnoConflict: function( deep ) {"}]},
{"id":"d25d288350f099872d2d7bf54dfb62c29b5ac28d","instances":[{"path":"./jquery-data/2.0.2/src/core.js","lines":[663,685],"code":"// Go through the array, translating each of the items to their\nif ( isArray ) {\n\tfor ( ; i < length; i++ ) {\n\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\tif ( value != null ) {\n\t\t\tret[ ret.length ] = value;\n\t\t}\n\t}\n\n// Go through every key on the object,\n} else {\n\tfor ( i in elems ) {\n\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\tif ( value != null ) {\n\t\t\tret[ ret.length ] = value;\n\t\t}\n\t}\n}\n\n// Flatten any nested arrays\nreturn core_concat.apply( [], ret );"},{"path":"./jquery-data/1.6/src/core.js","lines":[725,747],"code":"// Go through the array, translating each of the items to their\nif ( isArray ) {\n\tfor ( ; i < length; i++ ) {\n\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\tif ( value != null ) {\n\t\t\tret[ ret.length ] = value;\n\t\t}\n\t}\n\n// Go through every key on the object,\n} else {\n\tfor ( key in elems ) {\n\t\tvalue = callback( elems[ key ], key, arg );\n\n\t\tif ( value != null ) {\n\t\t\tret[ ret.length ] = value;\n\t\t}\n\t}\n}\n\n// Flatten any nested arrays\nreturn ret.concat.apply( [], ret );"}]},
{"id":"8824942072fa09e680e26f72c0e6152ceb86cde8","instances":[{"path":"./jquery-data/2.0.2/src/data.js","lines":[329,339],"code":"if ( data === undefined && elem.nodeType === 1 ) {\n\tname = \"data-\" + key.replace( rmultiDash, \"-$1\" ).toLowerCase();\n\tdata = elem.getAttribute( name );\n\n\tif ( typeof data === \"string\" ) {\n\t\ttry {\n\t\t\tdata = data === \"true\" ? true :\n\t\t\t\tdata === \"false\" ? false :\n\t\t\t\tdata === \"null\" ? null :\n\t\t\t\t// Only convert to a number if it doesn't change the string\n\t\t\t\t+data + \"\" === data ? +data :"},{"path":"./jquery-data/1.6/src/data.js","lines":[286,296],"code":"if ( data === undefined && elem.nodeType === 1 ) {\n\tname = \"data-\" + key.replace( rmultiDash, \"$1-$2\" ).toLowerCase();\n\n\tdata = elem.getAttribute( name );\n\n\tif ( typeof data === \"string\" ) {\n\t\ttry {\n\t\t\tdata = data === \"true\" ? true :\n\t\t\tdata === \"false\" ? false :\n\t\t\tdata === \"null\" ? null :\n\t\t\t!jQuery.isNaN( data ) ? parseFloat( data ) :"}]},
{"id":"d5e076fef31645b4cc5f72286d89d47f3f0d770e","instances":[{"path":"./jquery-data/2.0.2/src/effects.js","lines":[631,640],"code":"jQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n\t};\n\n\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ? opt.duration :\n\t\topt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;"},{"path":"./jquery-data/1.6/src/effects.js","lines":[315,324],"code":"speed: function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend({}, speed) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction(easing) && easing\n\t};\n\n\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ? opt.duration :\n\t\topt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;"}]},
{"id":"f7917b34ef44c9134626f7f4a91c8b2ca05f7878","instances":[{"path":"./jquery-data/2.0.2/src/traversing.js","lines":[146,158],"code":"jQuery.each({\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn jQuery.dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn jQuery.dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );"},{"path":"./jquery-data/1.6/src/traversing.js","lines":[182,194],"code":"jQuery.each({\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn jQuery.dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn jQuery.dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn jQuery.nth( elem, 2, \"nextSibling\" );"}]},
{"id":"ffb2f59dcd3e239dc57ab21869c955366d0417ba","instances":[{"path":"./jquery-data/2.0.2/src/wrap.js","lines":[23,54],"code":"\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\telem = elem.firstElementChild;\n\t\t\t}\n\n\t\t\treturn elem;\n\t\t}).append( this );\n\t}\n\n\treturn this;\n},\n\nwrapInner: function( html ) {\n\tif ( jQuery.isFunction( html ) ) {\n\t\treturn this.each(function( i ) {\n\t\t\tjQuery( this ).wrapInner( html.call(this, i) );\n\t\t});\n\t}\n\n\treturn this.each(function() {\n\t\tvar self = jQuery( this ),\n\t\t\tcontents = self.contents();\n\n\t\tif ( contents.length ) {\n\t\t\tcontents.wrapAll( html );\n\n\t\t} else {\n\t\t\tself.append( html );\n\t\t}\n\t});\n},\n\nwrap: function( html ) {"},{"path":"./jquery-data/1.6/src/manipulation.js","lines":[68,99],"code":"\t\t\twhile ( elem.firstChild && elem.firstChild.nodeType === 1 ) {\n\t\t\t\telem = elem.firstChild;\n\t\t\t}\n\n\t\t\treturn elem;\n\t\t}).append( this );\n\t}\n\n\treturn this;\n},\n\nwrapInner: function( html ) {\n\tif ( jQuery.isFunction( html ) ) {\n\t\treturn this.each(function(i) {\n\t\t\tjQuery(this).wrapInner( html.call(this, i) );\n\t\t});\n\t}\n\n\treturn this.each(function() {\n\t\tvar self = jQuery( this ),\n\t\t\tcontents = self.contents();\n\n\t\tif ( contents.length ) {\n\t\t\tcontents.wrapAll( html );\n\n\t\t} else {\n\t\t\tself.append( html );\n\t\t}\n\t});\n},\n\nwrap: function( html ) {"}]}]
