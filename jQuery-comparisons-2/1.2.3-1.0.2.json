[{"id":"0510b787a437878839988d814bbb811cc2158162","instances":[{"path":"./jquery-data/1.2.3/src/event.js","lines":[350,370],"code":"mouseenter: {\n\tsetup: function() {\n\t\tif ( jQuery.browser.msie ) return false;\n\t\tjQuery(this).bind(\"mouseover\", jQuery.event.special.mouseenter.handler);\n\t\treturn true;\n\t},\n\n\tteardown: function() {\n\t\tif ( jQuery.browser.msie ) return false;\n\t\tjQuery(this).unbind(\"mouseover\", jQuery.event.special.mouseenter.handler);\n\t\treturn true;\n\t},\n\t\n\thandler: function(event) {\n\t\t// If we actually just moused on to a sub-element, ignore it\n\t\tif ( withinElement(event, this) ) return true;\n\t\t// Execute the right handlers by setting the event type to mouseenter\n\t\targuments[0].type = \"mouseenter\";\n\t\treturn jQuery.event.handle.apply(this, arguments);\n\t}\n},"},{"path":"./jquery-data/1.2.3/src/event.js","lines":[372,392],"code":"mouseleave: {\n\tsetup: function() {\n\t\tif ( jQuery.browser.msie ) return false;\n\t\tjQuery(this).bind(\"mouseout\", jQuery.event.special.mouseleave.handler);\n\t\treturn true;\n\t},\n\n\tteardown: function() {\n\t\tif ( jQuery.browser.msie ) return false;\n\t\tjQuery(this).unbind(\"mouseout\", jQuery.event.special.mouseleave.handler);\n\t\treturn true;\n\t},\n\t\n\thandler: function(event) {\n\t\t// If we actually just moused on to a sub-element, ignore it\n\t\tif ( withinElement(event, this) ) return true;\n\t\t// Execute the right handlers by setting the event type to mouseleave\n\t\targuments[0].type = \"mouseleave\";\n\t\treturn jQuery.event.handle.apply(this, arguments);\n\t}\n}"}]},
{"id":"7a0c60e447ed65c62772a177c9c1a24f056e9775","instances":[{"path":"./jquery-data/1.0.2/src/dimensions/dimensions.js","lines":[24,53],"code":"jQuery.fn.height = function() {\n\tif ( this.get(0) == window )\n\t\treturn self.innerHeight ||\n\t\t\tjQuery.boxModel && document.documentElement.clientHeight ||\n\t\t\tdocument.body.clientHeight;\n\t\n\tif ( this.get(0) == document )\n\t\treturn Math.max( document.body.scrollHeight, document.body.offsetHeight );\n\t\n\treturn this.css(\"height\");\n};\n\n/**\n * Returns the css width value for the first matched element.\n * If used on document, returns the document's width (innerWidth)\n * If used on window, returns the viewport's (window) width\n *\n * @example $(\"#testdiv\").width()\n * @result \"200px\"\n *\n * @example $(document).width();\n * @result 800\n *\n * @example $(window).width();\n * @result 400\n * \n * @name width\n * @type Object\n * @cat Dimensions\n */"},{"path":"./jquery-data/1.0.2/src/dimensions/dimensions.js","lines":[54,77],"code":"jQuery.fn.width = function() {\n\tif ( this.get(0) == window )\n\t\treturn self.innerWidth ||\n\t\t\tjQuery.boxModel && document.documentElement.clientWidth ||\n\t\t\tdocument.body.clientWidth;\n\t\n\tif ( this.get(0) == document )\n\t\treturn Math.max( document.body.scrollWidth, document.body.offsetWidth );\n\t\n\treturn this.css(\"width\");\n};\n\n/**\n * Returns the inner height value (without border) for the first matched element.\n * If used on document, returns the document's height (innerHeight)\n * If used on window, returns the viewport's (window) height\n *\n * @example $(\"#testdiv\").innerHeight()\n * @result 800\n * \n * @name innerHeight\n * @type Number\n * @cat Dimensions\n */"}]},
{"id":"69a5bb20cd5ebe82bc0a02885d105f0fcbe54ffc","instances":[{"path":"./jquery-data/1.0.2/src/dimensions/dimensions.js","lines":[66,82],"code":"/**\n * Returns the inner height value (without border) for the first matched element.\n * If used on document, returns the document's height (innerHeight)\n * If used on window, returns the viewport's (window) height\n *\n * @example $(\"#testdiv\").innerHeight()\n * @result 800\n * \n * @name innerHeight\n * @type Number\n * @cat Dimensions\n */\njQuery.fn.innerHeight = function() {\n\treturn this.get(0) == window || this.get(0) == document ?\n\t\tthis.height() :\n\t\tthis.get(0).offsetHeight - parseInt(this.css(\"borderTop\") || 0) - parseInt(this.css(\"borderBottom\") || 0);\n};"},{"path":"./jquery-data/1.0.2/src/dimensions/dimensions.js","lines":[84,100],"code":"/**\n * Returns the inner width value (without border) for the first matched element.\n * If used on document, returns the document's Width (innerWidth)\n * If used on window, returns the viewport's (window) width\n *\n * @example $(\"#testdiv\").innerWidth()\n * @result 1000\n * \n * @name innerWidth\n * @type Number\n * @cat Dimensions\n */\njQuery.fn.innerWidth = function() {\n\treturn this.get(0) == window || this.get(0) == document ?\n\t\tthis.width() :\n\t\tthis.get(0).offsetWidth - parseInt(this.css(\"borderLeft\") || 0) - parseInt(this.css(\"borderRight\") || 0);\n};"}]},
{"id":"4796ee8572781df865cdc1bf420c916ce94ed526","instances":[{"path":"./jquery-data/1.0.2/src/dimensions/dimensions.js","lines":[133,154],"code":"\t\tthis.get(0).offsetWidth;\t\n};\n\n/**\n * Returns how many pixels the user has scrolled to the right (scrollLeft).\n * Works on containers with overflow: auto and window/document.\n *\n * @example $(\"#testdiv\").scrollLeft()\n * @result 100\n * \n * @name scrollLeft\n * @type Number\n * @cat Dimensions\n */\njQuery.fn.scrollLeft = function() {\n\tif ( this.get(0) == window || this.get(0) == document )\n\t\treturn self.pageXOffset ||\n\t\t\tjQuery.boxModel && document.documentElement.scrollLeft ||\n\t\t\tdocument.body.scrollLeft;\n\t\n\treturn this.get(0).scrollLeft;\n};"},{"path":"./jquery-data/1.0.2/src/dimensions/dimensions.js","lines":[153,174],"code":"\treturn this.get(0).scrollLeft;\n};\n\n/**\n * Returns how many pixels the user has scrolled to the bottom (scrollTop).\n * Works on containers with overflow: auto and window/document.\n *\n * @example $(\"#testdiv\").scrollTop()\n * @result 100\n * \n * @name scrollTop\n * @type Number\n * @cat Dimensions\n */\njQuery.fn.scrollTop = function() {\n\tif ( this.get(0) == window || this.get(0) == document )\n\t\treturn self.pageYOffset ||\n\t\t\tjQuery.boxModel && document.documentElement.scrollTop ||\n\t\t\tdocument.body.scrollTop;\n\n\treturn this.get(0).scrollTop;\n};"}]}]
